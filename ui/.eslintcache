[{"G:\\progs\\Movie_Booking_2\\ui\\src\\index.js":"1","G:\\progs\\Movie_Booking_2\\ui\\src\\reportWebVitals.js":"2","G:\\progs\\Movie_Booking_2\\ui\\src\\App.js":"3","G:\\progs\\Movie_Booking_2\\ui\\src\\store\\reducer\\stateReducer.js":"4","G:\\progs\\Movie_Booking_2\\ui\\src\\store\\reducer\\movieReducer.js":"5","G:\\progs\\Movie_Booking_2\\ui\\src\\store\\reducer\\cityReducer.js":"6","G:\\progs\\Movie_Booking_2\\ui\\src\\store\\reducer\\userReducer.js":"7","G:\\progs\\Movie_Booking_2\\ui\\src\\store\\reducer\\screenReducer.js":"8","G:\\progs\\Movie_Booking_2\\ui\\src\\registerTask.js":"9","G:\\progs\\Movie_Booking_2\\ui\\src\\store\\actionTypes.js":"10","G:\\progs\\Movie_Booking_2\\ui\\src\\store\\cityActionTypes.js":"11","G:\\progs\\Movie_Booking_2\\ui\\src\\store\\userActionTypes.js":"12","G:\\progs\\Movie_Booking_2\\ui\\src\\store\\movieActionTypes.js":"13","G:\\progs\\Movie_Booking_2\\ui\\src\\store\\screenActionType.js":"14","G:\\progs\\Movie_Booking_2\\ui\\src\\stateTask.js":"15","G:\\progs\\Movie_Booking_2\\ui\\src\\TheaterTask.js":"16","G:\\progs\\Movie_Booking_2\\ui\\src\\store\\action\\userAction.js":"17","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\All Registration form\\theaterRegistration.js":"18","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\All Registration form\\userRegistration.js":"19","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\All Registration form\\Temp.js":"20","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\All Registration form\\loginForm.js":"21","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\All Registration form\\dashboard.js":"22","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\State_All_Form\\stateList.js":"23","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\State_All_Form\\addForm.js":"24","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\City_All_Form\\cityList.js":"25","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\Movie_All_Form\\addMovie.js":"26","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\City_All_Form\\addForm.js":"27","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\Movie_All_Form\\movieList.js":"28","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\common\\Header.js":"29","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\common\\HeaderTheater.js":"30","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\Users_Theater_List\\allUsersList.js":"31","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\Users_Theater_List\\allTheaterList.js":"32","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\TheaterPanel\\dashboard.js":"33","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\TheaterPanel\\screenList.js":"34","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\TheaterPanel\\addScreen.js":"35","G:\\progs\\Movie_Booking_2\\ui\\src\\store\\action\\stateAction.js":"36","G:\\progs\\Movie_Booking_2\\ui\\src\\store\\action\\cityAction.js":"37","G:\\progs\\Movie_Booking_2\\ui\\src\\store\\action\\movieAction.js":"38","G:\\progs\\Movie_Booking_2\\ui\\src\\store\\action\\screenAction.js":"39","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\TheaterPanel\\theaterscreenlist.js":"40","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\TheaterPanel\\addtheaterscreen.js":"41","G:\\progs\\Movie_Booking_2\\ui\\src\\store\\action\\theaterscreenAction.js":"42","G:\\progs\\Movie_Booking_2\\ui\\src\\store\\theaterscreenActionType.js":"43","G:\\progs\\Movie_Booking_2\\ui\\src\\store\\reducer\\theaterscreenReducer.js":"44"},{"size":1441,"mtime":1608900956833,"results":"45","hashOfConfig":"46"},{"size":375,"mtime":1608823125673,"results":"47","hashOfConfig":"46"},{"size":323,"mtime":1608823125656,"results":"48","hashOfConfig":"46"},{"size":3671,"mtime":1608823125678,"results":"49","hashOfConfig":"46"},{"size":4271,"mtime":1610114278399,"results":"50","hashOfConfig":"46"},{"size":4284,"mtime":1608823125677,"results":"51","hashOfConfig":"46"},{"size":8466,"mtime":1608823125678,"results":"52","hashOfConfig":"46"},{"size":3385,"mtime":1608823125678,"results":"53","hashOfConfig":"46"},{"size":3958,"mtime":1608831201785,"results":"54","hashOfConfig":"46"},{"size":1098,"mtime":1608823125676,"results":"55","hashOfConfig":"46"},{"size":1130,"mtime":1608823125677,"results":"56","hashOfConfig":"46"},{"size":2330,"mtime":1608823125679,"results":"57","hashOfConfig":"46"},{"size":872,"mtime":1608823125677,"results":"58","hashOfConfig":"46"},{"size":872,"mtime":1608823125679,"results":"59","hashOfConfig":"46"},{"size":1777,"mtime":1608833000870,"results":"60","hashOfConfig":"46"},{"size":1318,"mtime":1609095247115,"results":"61","hashOfConfig":"46"},{"size":6772,"mtime":1608823125676,"results":"62","hashOfConfig":"46"},{"size":12947,"mtime":1609133396183,"results":"63","hashOfConfig":"46"},{"size":12120,"mtime":1609133228719,"results":"64","hashOfConfig":"46"},{"size":2501,"mtime":1608823125662,"results":"65","hashOfConfig":"46"},{"size":3802,"mtime":1609006407653,"results":"66","hashOfConfig":"46"},{"size":2930,"mtime":1608823125663,"results":"67","hashOfConfig":"46"},{"size":6276,"mtime":1609644933972,"results":"68","hashOfConfig":"46"},{"size":2482,"mtime":1608823125666,"results":"69","hashOfConfig":"46"},{"size":7207,"mtime":1608823125665,"results":"70","hashOfConfig":"46"},{"size":13134,"mtime":1610114218739,"results":"71","hashOfConfig":"46"},{"size":4428,"mtime":1608823125665,"results":"72","hashOfConfig":"46"},{"size":20521,"mtime":1610114232573,"results":"73","hashOfConfig":"46"},{"size":8795,"mtime":1609008075636,"results":"74","hashOfConfig":"46"},{"size":8518,"mtime":1608832165968,"results":"75","hashOfConfig":"46"},{"size":5092,"mtime":1608823125670,"results":"76","hashOfConfig":"46"},{"size":5073,"mtime":1609133895454,"results":"77","hashOfConfig":"46"},{"size":2499,"mtime":1608823125668,"results":"78","hashOfConfig":"46"},{"size":6336,"mtime":1608823125668,"results":"79","hashOfConfig":"46"},{"size":4228,"mtime":1608929587352,"results":"80","hashOfConfig":"46"},{"size":2845,"mtime":1608823125676,"results":"81","hashOfConfig":"46"},{"size":3614,"mtime":1608823125674,"results":"82","hashOfConfig":"46"},{"size":3047,"mtime":1608823125675,"results":"83","hashOfConfig":"46"},{"size":3735,"mtime":1608823125676,"results":"84","hashOfConfig":"46"},{"size":11994,"mtime":1609690664886,"results":"85","hashOfConfig":"46"},{"size":8237,"mtime":1609690740608,"results":"86","hashOfConfig":"46"},{"size":3612,"mtime":1609096014514,"results":"87","hashOfConfig":"46"},{"size":1110,"mtime":1608826710860,"results":"88","hashOfConfig":"46"},{"size":4112,"mtime":1609132520091,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"15ze54o",{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"92"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"92"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"92"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"92"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"92"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"92"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"92"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"92"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"92"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"92"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"92"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"92"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"92"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"92"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"92"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"92"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"92"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"92"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"92"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"92"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"92"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"92"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"92"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"92"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"92"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"92"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"202"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"92"},"G:\\progs\\Movie_Booking_2\\ui\\src\\index.js",[],["208","209"],"G:\\progs\\Movie_Booking_2\\ui\\src\\reportWebVitals.js",[],"G:\\progs\\Movie_Booking_2\\ui\\src\\App.js",[],"G:\\progs\\Movie_Booking_2\\ui\\src\\store\\reducer\\stateReducer.js",["210"],"import * as actionTypes from \"../actionTypes\";\r\nconst initalstore ={\r\n    states:[],\r\n    singlestate:{},\r\n    loading:false,\r\n    error:\"\",\r\n}\r\n\r\nconst store = (state = initalstore,action) =>{\r\n    switch(action.type){\r\n        case actionTypes.INIT_FETCH_STATES:\r\n            return{\r\n                ...state,\r\n                loading:true,\r\n            }\r\n        case actionTypes.FETCH_STATES_SUCCESS:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                states:action.states\r\n            }\r\n\r\n        case actionTypes.FETCH_STATES_FAILED:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                error:action.error,\r\n            }\r\n        case actionTypes.INIT_ADD_STATES:\r\n                    return{\r\n                        ...state,\r\n                        loading:true,\r\n                    };\r\n        case actionTypes.ADD_STATES_SUCCESS:\r\n\r\n                return{\r\n                    ...state,\r\n                    loading:false                  \r\n                }\r\n        case actionTypes.ADD_STATES_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n        case actionTypes.INIT_DELETE_STATES:\r\n                    return{\r\n                        ...state,\r\n                        loading:true,\r\n    \r\n                    };\r\n        case actionTypes.DELETE_STATES_SUCCESS:\r\n                let statees = state.states.filter(statese => statese._id !== action.id);\r\n                // let studentst = state.states.filter(student => student._id !== action.id);\r\n                return{\r\n                    ...state,\r\n                    loading:false,   \r\n                    states:statees,\r\n                }\r\n        case actionTypes.DELETE_STATES_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n        case actionTypes.INIT_SINGLE_STATES:\r\n                    return{\r\n                        ...state,\r\n                        loading:true,    \r\n                    };\r\n        case actionTypes.SINGLE_STATES_SUCCESS:\r\n            console.log(action.singlestate)\r\n                return{\r\n                    ...state,\r\n                    loading:false, \r\n                    singlestate:action.singlestate             \r\n                }\r\n        case actionTypes.SINGLE_STATES_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n        case actionTypes.INIT_UPDATE_STATES:\r\n                    return{\r\n                        ...state,\r\n                        loading:true,\r\n                    };\r\n        case actionTypes.UPDATE_STATES_SUCCESS:\r\n            let statesst = [...state.states];\r\n            statesst.map(order => {\r\n                if(order._id === action.states._id)\r\n                {\r\n                    order.state_name = action.states.state_name                    \r\n                }\r\n            });\r\n            // console.log(action.singlestates);\r\n                return{\r\n                    ...state,\r\n                    loading:false, \r\n                    states:statesst             \r\n                }\r\n        case actionTypes.UPDATE_STATES_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n            default :\r\n                return state;\r\n    }\r\n}\r\n\r\nexport default store;","G:\\progs\\Movie_Booking_2\\ui\\src\\store\\reducer\\movieReducer.js",["211"],"import * as actionTypes from \"../movieActionTypes\";\r\nconst initalstore ={\r\n    movies:[],\r\n    singlemovie:{},\r\n    loading:false,\r\n    error:\"\",\r\n}\r\n\r\nconst store = (state = initalstore,action) =>{\r\n    switch(action.type){\r\n        case actionTypes.INIT_FETCH_MOVIES:\r\n            return{\r\n                ...state,\r\n                loading:true,\r\n            }\r\n        case actionTypes.FETCH_MOVIES_SUCCESS:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                movies:action.movies\r\n            }\r\n\r\n        case actionTypes.FETCH_MOVIES_FAILED:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                error:action.error,\r\n            }\r\n        case actionTypes.INIT_ADD_MOVIES:\r\n                    return{\r\n                        ...state,\r\n                        loading:true,\r\n                    };\r\n        case actionTypes.ADD_MOVIES_SUCCESS:\r\n                return{\r\n                    ...state,\r\n                    loading:false                  \r\n                }\r\n        case actionTypes.ADD_MOVIES_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n        case actionTypes.INIT_DELETE_MOVIES:\r\n                    return{\r\n                        ...state,\r\n                        loading:true,\r\n    \r\n                    };\r\n        case actionTypes.DELETE_MOVIES_SUCCESS:\r\n                let moviessd= state.movies.filter(movies1 => movies1._id !== action.id);\r\n                return{\r\n                    ...state,\r\n                    loading:false,   \r\n                    movies:moviessd,\r\n                }\r\n        case actionTypes.DELETE_MOVIES_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n        case actionTypes.INIT_SINGLE_MOVIES:\r\n                    return{\r\n                        ...state,\r\n                        loading:true,    \r\n                    };\r\n        case actionTypes.SINGLE_MOVIES_SUCCESS:\r\n            console.log(action.singlemovie)\r\n                return{\r\n                    ...state,\r\n                    loading:false, \r\n                    singlemovie:action.singlemovie             \r\n                }\r\n        case actionTypes.SINGLE_MOVIES_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n        case actionTypes.INIT_UPDATE_MOVIES:\r\n                    return{\r\n                        ...state,\r\n                        loading:true,\r\n                    };\r\n        case actionTypes.UPDATE_MOVIES_SUCCESS:\r\n            let statesst = [...state.movies];\r\n            statesst.map(order => {\r\n                if(order._id === action.movies._id)\r\n                {\r\n                    order.moviename = action.movies.moviename;\r\n                    order.movie_category=action.movies.movie_category;\r\n                    order.releasedate=action.movies.releasedate;\r\n                    order.director_name=action.movies.director_name;\r\n                    order.movie_languages =action.movies.movie_languages;\r\n                    order.Actors_name=action.movies.Actors_name; \r\n                    order.movie_description=action.movies.movie_description;\r\n                    order.movie_type=action.movies.movie_type;\r\n                    order.movie_logo=action.movies.movie_logo;\r\n                    order.movie_status=action.movies.movie_status;\r\n                    order.booking_status=action.movies.booking_status;                   \r\n                }\r\n            });\r\n            console.log(action.singlestates);\r\n                return{\r\n                    ...state,\r\n                    loading:false, \r\n                    movies:statesst             \r\n                }\r\n        case actionTypes.UPDATE_MOVIES_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n            default :\r\n                return state;\r\n    }\r\n}\r\n\r\nexport default store;","G:\\progs\\Movie_Booking_2\\ui\\src\\store\\reducer\\cityReducer.js",["212"],"import * as actionTypes from \"../cityActionTypes\";\r\nconst initalstore ={\r\n    cities:[],\r\n    singlecities:{},\r\n    loading:false,\r\n    error:\"\",\r\n}\r\n\r\nconst store = (state = initalstore,action) =>{\r\n    switch(action.type){\r\n        case actionTypes.INIT_FETCH_CITIES:\r\n            return{\r\n                ...state,\r\n                loading:true,\r\n            }\r\n        case actionTypes.FETCH_CITIES_SUCCESS:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                cities:action.cities\r\n            }\r\n\r\n        case actionTypes.FETCH_CITIES_FAILED:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                error:action.error,\r\n            }\r\n        case actionTypes.INIT_ADD_CITIES:\r\n                    return{\r\n                        ...state,\r\n                        loading:true,\r\n                    };\r\n        case actionTypes.ADD_CITIES_SUCCESS:\r\n\r\n                return{\r\n                    ...state,\r\n                    loading:false                  \r\n                }\r\n        case actionTypes.ADD_CITIES_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n        case actionTypes.INIT_DELETE_CITIES:\r\n                    return{\r\n                        ...state,\r\n                        loading:true,\r\n    \r\n                    };\r\n        case actionTypes.DELETE_CITIES_SUCCESS:\r\n                let citiest = state.cities.filter(statese => statese._id !== action.id);\r\n                // let studentst = state.states.filter(student => student._id !== action.id);\r\n                return{\r\n                    ...state,\r\n                    loading:false,   \r\n                    cities:citiest,\r\n                }\r\n        case actionTypes.DELETE_CITIES_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n        case actionTypes.INIT_SINGLE_CITIES:\r\n                    return{\r\n                        ...state,\r\n                        loading:true,    \r\n                    };\r\n        case actionTypes.SINGLE_CITIES_SUCCESS:\r\n            // console.log(ac)\r\n                return{\r\n                    ...state,\r\n                    loading:false, \r\n                    singlecities:action.singlecities             \r\n                }\r\n        case actionTypes.SINGLE_CITIES_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n        case actionTypes.INIT_UPDATE_CITIES:\r\n                    return{\r\n                        ...state,\r\n                        loading:true,\r\n                    };\r\n        case actionTypes.UPDATE_CITIES_SUCCESS:\r\n                let statesst = [...state.cities];\r\n                statesst.map(order => {\r\n                    if(order._id === action.cities._id)\r\n                    {\r\n                        order.city_name = action.cities.city_name\r\n                        order.state_id = action.cities.state_id;\r\n                    }\r\n                });  \r\n                // console.log(action.cities.state_id);          \r\n                return{\r\n                    ...state,\r\n                    loading:false, \r\n                    cities:statesst\r\n                }\r\n        case actionTypes.UPDATE_CITIES_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n        case actionTypes.INIT_FETCHSTATESBYCITYID_CITIES:\r\n            return{\r\n                ...state,\r\n                loading:true,\r\n            }\r\n        case actionTypes.FETCHSTATESBYCITYID_CITIES_SUCCESS:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                cities:action.cities\r\n            }\r\n        case actionTypes.FETCHSTATESBYCITYID_CITIES_FAILED:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                error:action.error,\r\n            }\r\n            default :\r\n                return state;\r\n    }\r\n}\r\n\r\nexport default store;","G:\\progs\\Movie_Booking_2\\ui\\src\\store\\reducer\\userReducer.js",[],"G:\\progs\\Movie_Booking_2\\ui\\src\\store\\reducer\\screenReducer.js",["213"],"import * as actionTypes from \"../screenActionType\";\r\nconst initalstore = {\r\n    screens: [],\r\n    singlescreen: {},\r\n    loading: false,\r\n    error: \"\",\r\n}\r\n\r\nconst store = (state = initalstore, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.INIT_FETCH_SCREEN:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            }\r\n        case actionTypes.FETCH_SCREEN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                screens: action.screens\r\n            }\r\n\r\n        case actionTypes.FETCH_SCREEN_FAILED:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.error,\r\n            }\r\n        case actionTypes.INIT_ADD_SCREEN:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            };\r\n        case actionTypes.ADD_SCREEN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false\r\n            }\r\n        case actionTypes.ADD_SCREEN_FAILED:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.error\r\n            }\r\n        case actionTypes.INIT_DELETE_SCREEN:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n\r\n            };\r\n        case actionTypes.DELETE_SCREEN_SUCCESS:\r\n            let screensTemp = state.screens.filter(screen => screen._id !== action.id);\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                screens: screensTemp,\r\n            }\r\n        case actionTypes.DELETE_SCREEN_FAILED:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.error\r\n            }\r\n        case actionTypes.INIT_SINGLE_SCREEN:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            };\r\n        case actionTypes.SINGLE_SCREEN_SUCCESS:\r\n            console.log(action.singlescreen)\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                singlescreen: action.singlescreen\r\n            }\r\n        case actionTypes.SINGLE_SCREEN_FAILED:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.error\r\n            }\r\n        case actionTypes.INIT_UPDATE_SCREEN:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            };\r\n        case actionTypes.UPDATE_SCREEN_SUCCESS:\r\n            console.log(action.screens);\r\n            let screensTemp1 = [...state.screens];\r\n            screensTemp1.map(order => {\r\n                if (order._id === action.screens._id) {\r\n                        order.screen_name = action.screens.screen_name;\r\n                        order.rows = action.screens.rows;\r\n                        order.cols = action.screens.cols;\r\n                }\r\n            });\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                screens: screensTemp1\r\n            }\r\n        case actionTypes.UPDATE_SCREEN_FAILED:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.error\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default store;","G:\\progs\\Movie_Booking_2\\ui\\src\\registerTask.js",["214","215","216","217"],"import React,{useEffect} from 'react';\r\nimport { Switch, Route,Redirect } from 'react-router'\r\nimport RegisterForm from './components/All Registration form/userRegistration';\r\nimport LoginForm from './components/All Registration form/loginForm';\r\nimport {login,autoCheckLogin} from './store/action/userAction';\r\nimport TheaterRegistration from './components/All Registration form/theaterRegistration';\r\nimport Temp from './components/All Registration form/Temp';\r\nimport TheaterTask from './TheaterTask';\r\nimport StateTask from './stateTask';\r\nimport {connect} from 'react-redux';\r\n\r\nconst RegisterTask = (props) => {\r\n\r\n    useEffect(() => {\r\n        if(props.location.pathname.startsWith(\"/\") && !props.token) {\r\n            props.autoCheckLogin();\r\n            // props.singleuser\r\n            console.log(props.singleuser)\r\n        }\r\n    }, [props.location.pathname,props.autoCheckLogin,props.token])\r\n    let content = <Redirect to=\"/\" />\r\n    if(props.location.pathname.startsWith(\"/\") && !props.token) {\r\n        console.log(\"Login In \" + false + \" token \" + props.token);\r\n        content = <Switch>\r\n            <Route path=\"/login\" exact component={LoginForm}/>\r\n            <Route path=\"/userreg\" exact component={RegisterForm}/>\r\n            <Route path=\"/theaterreg\" exact component={TheaterRegistration}/>\r\n            <Redirect to=\"/login\" />\r\n        </Switch>\r\n    } else if(props.location.pathname.startsWith(\"/\") && props.token && props.singleuser.group_id.group_name==\"admin\") {\r\n        content = <>\r\n            <div >\r\n            <Switch>\r\n                \r\n                <Route path=\"/city\" component={StateTask}/>\r\n                <Route path=\"/city/cityAdd\" exact component={StateTask}/>\r\n                \r\n                <Route path=\"/state/stateAdd\" exact component={StateTask}/>\r\n                <Route path=\"/state\" exact component={StateTask}/>\r\n\r\n                <Route path=\"/movie\" exact component={StateTask} />\r\n                <Route path=\"/movie/movieAdd\" exact component={StateTask} />\r\n                \r\n                <Route path=\"/users/\" exact component={StateTask} />\r\n                <Route path=\"/theaters/\" exact component={StateTask} />\r\n                <Route path=\"/dashboard\" exact component={StateTask} />\r\n\r\n                <Redirect to=\"/dashboard\" />\r\n            </Switch>\r\n            </div>\r\n        </>    \r\n    }else if(props.location.pathname.startsWith(\"/\") && props.token && props.singleuser.group_id.group_name==\"user\"){\r\n        content = <>\r\n        <div >\r\n        <Switch>\r\n            <Route path=\"/Temp\" exact component={Temp} />\r\n            {/* <Route path=\"/Temp\" exact component={Temp} /> */}\r\n\r\n            <Redirect to=\"/Temp\" />\r\n         </Switch>\r\n        </div> \r\n    </>\r\n     }else if(props.location.pathname.startsWith(\"/\") && props.token && props.singleuser.group_id.group_name==\"theater\"){\r\n            content = <>\r\n            <div > \r\n             <Switch>\r\n                \r\n                <Route path=\"/theater/dashboard\" exact component={TheaterTask} />\r\n                <Route path=\"/theater/addScreen\" exact component={TheaterTask} />\r\n                <Route path=\"/theater/screenList\" exact component={TheaterTask} />\r\n                <Route path=\"/theater/addtscreen\" exact component={TheaterTask} />\r\n                <Route path=\"/theater/tscreenList\" exact component={TheaterTask} />\r\n                <Redirect to=\"/theater/dashboard\" />\r\n            </Switch>\r\n             </div>\r\n        </>\r\n    }\r\n    return content\r\n}\r\n\r\nconst mapStateToProps =  (state) => ({\r\n    err1:state.userReducer.error1,\r\n    singleuser:state.userReducer.singleuser,\r\n    token:state.userReducer.token ? true : false\r\n  })\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n  return{\r\n    autoCheckLogin:()=>dispatch(autoCheckLogin()),\r\n    login:(email,password)=>dispatch(login(email,password))\r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(RegisterTask);","G:\\progs\\Movie_Booking_2\\ui\\src\\store\\actionTypes.js",[],"G:\\progs\\Movie_Booking_2\\ui\\src\\store\\cityActionTypes.js",[],"G:\\progs\\Movie_Booking_2\\ui\\src\\store\\userActionTypes.js",[],"G:\\progs\\Movie_Booking_2\\ui\\src\\store\\movieActionTypes.js",[],"G:\\progs\\Movie_Booking_2\\ui\\src\\store\\screenActionType.js",[],"G:\\progs\\Movie_Booking_2\\ui\\src\\stateTask.js",[],"G:\\progs\\Movie_Booking_2\\ui\\src\\TheaterTask.js",[],"G:\\progs\\Movie_Booking_2\\ui\\src\\store\\action\\userAction.js",[],"G:\\progs\\Movie_Booking_2\\ui\\src\\components\\All Registration form\\theaterRegistration.js",["218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237"],"import React, { useState,useEffect } from \"react\";\r\nimport {Form,Col,Button} from \"react-bootstrap\";\r\nimport {connect} from 'react-redux';\r\nimport {adduserdata} from '../../store/action/userAction';\r\nimport {fetchstatedata} from '../../store/action/stateAction';\r\nimport {fetchAllStatesBystate_id} from '../../store/action/cityAction';\r\nimport '../register.css';\r\n\r\nconst FormPage = (props) => {\r\n  useEffect(()=>{\r\n    props.fetchstatedata();\r\n  },[props.fetchstatedata])\r\n\r\n  const [obj,setMyObj] = useState({\r\n    user_name:\"\",\r\n    cinema_name:\"\",\r\n    password:\"\",\r\n    email:\"\",\r\n    gender:\"Male\",\r\n    photo1:\"\",\r\n    state_id:\"\",\r\n    city_id:\"\",\r\n    group_id:\"\",\r\n    is_active:\"\"\r\n  });\r\n  \r\n  const [error,setError]=useState({\r\n    user_name_nameError:\"\",\r\n    cinema_nameError:\"\",\r\n    password_nameError:\"\",\r\n    gender_nameError:\"\",\r\n    email_nameError:\"\",\r\n    state_nameError:\"\",\r\n    city_nameError:\"\",\r\n    isValid:false\r\n  });\r\n\r\n  const handleSubmit =async () =>{\r\n    let errors = { ...error,isValid: true };\r\n    obj.group_id=\"5fe49d95fcd4173394b09b40\";\r\n    obj.is_active=\"1\";\r\n    // obj.photo1=\"sds\";\r\n    errors.state_nameError=\"\";\r\n    errors.city_nameError=\"\";\r\n    errors.user_name_nameError=\"\";\r\n    errors.cinema_nameError=\"\";\r\n    errors.password_nameError=\"\";\r\n    errors.email_nameError=\"\";\r\n    errors.isValid=false;\r\n    if(obj.state_id == \"\" || obj.city_id == \"\" || obj.user_name == \"\" || obj.password == \"\" || obj.email == \"\" || obj.email != \"\" || obj.cinema_name!=\"\"){\r\n      if(obj.state_id == \"\"){\r\n        errors.state_nameError=\"Please atleast one select state !!\"\r\n        errors.isValid=true;\r\n      }\r\n      if(obj.city_id == \"\"){\r\n        errors.city_nameError=\"Please atleast one select city !!\"\r\n        errors.isValid=true;\r\n      }\r\n      if(obj.user_name == \"\"){\r\n        errors.user_name_nameError=\"Please reuired username !!\"\r\n        errors.isValid=true;\r\n      }\r\n      if(obj.password == \"\"){\r\n        errors.password_nameError=\"Please required password !!\"\r\n        errors.isValid=true;\r\n      }\r\n      if(obj.email == \"\"){\r\n        errors.email_nameError=\"Please required email !!\"\r\n        errors.isValid=true;\r\n      }\r\n      if(obj.cinema_name == \"\"){\r\n        errors.cinema_nameError=\"Please required cinema name !!\"\r\n        errors.isValid=true;\r\n      }\r\n      if(obj.email != \"\"){\r\n        var pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\r\n        if (!pattern.test(obj.email)) {\r\n          errors.isValid = true;\r\n          errors.email_nameError = \"Please enter valid email address.\";\r\n        }\r\n      }\r\n    }else{\r\n      errors.state_nameError=\"\";\r\n      errors.city_nameError=\"\";\r\n      errors.user_name_nameError=\"\";\r\n      errors.cinema_nameError=\"\";\r\n      errors.password_nameError=\"\";\r\n      errors.email_nameError=\"\";\r\n      errors.isValid=false;\r\n    }\r\n    if(errors.isValid==false){\r\n      const formdata = new FormData();\r\n      console.log(obj);\r\n      formdata.append(\"user_name\",obj.user_name);\r\n      formdata.append(\"cinema_name\",obj.cinema_name);\r\n      formdata.append(\"password\",obj.password);\r\n      formdata.append(\"email\",obj.email);\r\n      formdata.append(\"gender\",obj.gender);\r\n      formdata.append(\"photo1\",obj.photo1);\r\n      formdata.append(\"state_id\",obj.state_id);\r\n      formdata.append(\"city_id\",obj.city_id);\r\n      formdata.append(\"group_id\",obj.group_id);\r\n      formdata.append(\"is_active\",obj.is_active);\r\n      console.log(obj.photo1);\r\n      await props.adduserdata(formdata);\r\n      props.history.replace(\"/\");\r\n    }\r\n    setError(errors);\r\n  }\r\n  const HandleChange = (e,name) =>{\r\n    let olddata = {...obj};\r\n    if (name == \"photo1\") {\r\n      const { target: { files } } = e\r\n      olddata[name] = files.length === 1 ? files[0] : files\r\n      olddata[name] = e.target.files[0];\r\n    }\r\n    else\r\n    {\r\n      olddata[name] = e.target.value;\r\n    }\r\n    setMyObj(olddata)\r\n    cityCall(olddata.state_id);\r\n  }\r\n\r\n  const cityCall =async (id) =>{\r\n    await props.fetchAllStatesBystate_id(id);\r\n  }\r\n\r\n  const optionStates = () => {\r\n    return props.states.map((stateslist) => {\r\n    const { _id, state_name } = stateslist;\r\n      return (\r\n          <option value={_id} key={_id}>{state_name}</option>\r\n      )\r\n    })\r\n  }\r\n\r\n  const optioncities = () => {\r\n    return props.cities.map((stateslist) => {\r\n    const { _id, city_name } = stateslist;\r\n      return (\r\n          <option value={_id} key={_id}>{city_name}</option>\r\n      )\r\n    })\r\n  }\r\n\r\n  const backHandler = () => {\r\n    props.history.replace(\"/userreg\")\r\n  }\r\n\r\n  const loginHandler = () =>{\r\n    props.history.replace(\"/\")\r\n  }\r\n\r\n    return (\r\n              <div>\r\n        <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\" rel=\"stylesheet\" id=\"bootstrap-css\" />\r\n        {/*---- Include the above in your HEAD tag --------*/}\r\n        <div className=\"container register\" style={{marginTop: \"2px\" }}>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-3 register-left\">\r\n              <img src=\"https://image.ibb.co/n7oTvU/logo_white.png\" alt=\"\" />\r\n              <h3>Welcome</h3>\r\n              <p>You are 30 seconds away farom earning your own money!</p>\r\n              <input type=\"submit\" name defaultValue=\"Login\" disabled/><br />\r\n            </div>\r\n            <div className=\"col-md-9 register-right\">\r\n              <ul className=\"nav nav-tabs nav-justified\" id=\"myTab\" role=\"tablist\">\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link \" variant=\"secondary\" onClick={() => backHandler()} id=\"home-tab\" data-toggle=\"tab\" role=\"tab\" aria-controls=\"home\" aria-selected=\"false\">User</a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link active\" id=\"profile-tab\" data-toggle=\"tab\" role=\"tab\" aria-controls=\"profile\" aria-selected=\"true\">Theater</a>\r\n                </li>\r\n              </ul>\r\n              <div className=\"tab-content\" id=\"myTabContent\">\r\n                <div className=\"tab-pane fade show active\" id=\"home\" role=\"tabpanel\" aria-labelledby=\"home-tab\">\r\n                  <h3 className=\"register-heading\">Apply as a Theater</h3>\r\n                  <div className=\"row register-form\">\r\n                  <Form style={{marginLeft: \"100px\"}}>\r\n                  <Form.Row>\r\n                      <Form.Group  as={Col} controlId=\"formGridEmail\">\r\n                        <Form.Label>Enter Username:-</Form.Label>\r\n                        <Form.Control type=\"text\" isInvalid={error.user_name_nameError}  placeholder=\"Enter Username ...\" name=\"user_name\" onChange={(e) => {HandleChange(e,\"user_name\")}} style={{width:\"290px\"}}/>\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {error.user_name_nameError}\r\n                          </Form.Control.Feedback>\r\n                      </Form.Group>\r\n                      <Form.Group as={Col} controlId=\"formGridEmail2\">\r\n                      <Form.Label style={{marginLeft: \"28px\"}}>Enter Cinema name:-</Form.Label>\r\n                      <Form.Control type=\"text\" isInvalid={error.cinema_nameError} placeholder=\"Enter cinema name ...\" name=\"cinema_name\" onChange={(e) => {HandleChange(e,\"cinema_name\")}}  style={{marginLeft: \"28px\",width:\"250px\"}}/>\r\n                      <Form.Control.Feedback type=\"invalid\" style={{marginLeft: \"28px\"}}>\r\n                            {error.cinema_nameError}\r\n                        </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                  </Form.Row>\r\n                  <Form.Row>\r\n                      <Form.Group as={Col} controlId=\"formGridEmail2\">\r\n                      <Form.Label style={{marginLeft: \"28px\"}}>Enter Password:-</Form.Label>\r\n                      <Form.Control type=\"password\" isInvalid={error.password_nameError} placeholder=\"Enter Password ...\" name=\"password\" onChange={(e) => {HandleChange(e,\"password\")}}  style={{marginLeft: \"28px\",width:\"250px\"}}/>\r\n                      <Form.Control.Feedback type=\"invalid\" style={{marginLeft: \"28px\"}}>\r\n                            {error.password_nameError}\r\n                        </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                      <Form.Group  as={Col} controlId=\"formGridEmail\">\r\n                        <Form.Label>Enter Email:-</Form.Label>\r\n                        <Form.Control type=\"email\" isInvalid={error.email_nameError} className=\"form-control\" name=\"email\" onChange={(e) => {HandleChange(e,\"email\")}} onBlur={() => cityCall()} placeholder=\"Enter email ...\"   style={{width:\"290px\"}}/>\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {error.email_nameError}\r\n                        </Form.Control.Feedback>\r\n                      </Form.Group>\r\n                  </Form.Row>\r\n                      \r\n                  <Form.Row>\r\n                      <Form.Group as={Col} controlId=\"formGridEmail\">\r\n                        <Form.Label style={{marginLeft: \"28px\"}}>Select Gender:-</Form.Label>\r\n                        <Form.Check type=\"radio\" name=\"gender\" value=\"male\" label=\"Male\" style={{marginLeft: \"28px\"}} onChange={(e) => {HandleChange(e,\"gender\")}} checked/>\r\n                        <Form.Check type=\"radio\" name=\"gender\" value=\"female\" label=\"Female\" style={{marginLeft: \"28px\"}} onChange={(e) => {HandleChange(e,\"gender\")}}/>\r\n                      </Form.Group>\r\n                      <Form.Group>\r\n                          <Form.Label>Select User Photo:-</Form.Label>\r\n                          <Form.Control type=\"file\" name=\"photo1\" onChange={(e) => {HandleChange(e,\"photo1\")}} style={{maxWidth : \"300px\"}}/>\r\n                      </Form.Group> \r\n                  </Form.Row>\r\n                  <Form.Row>\r\n                      <Form.Group>\r\n                          <Form.Label>Select State:-</Form.Label>\r\n                          <Form.Control isInvalid={error.state_nameError} className=\"form-control\" as=\"select\" name=\"state_id\" onChange={(e) => {HandleChange(e,\"state_id\")}}  style={{width:\"290px\"}} >\r\n                            <option selected disabled>-----Select -----</option>\r\n                              {optionStates()}\r\n                          </Form.Control>\r\n                          <Form.Control.Feedback type=\"invalid\">\r\n                            {error.state_nameError}\r\n                          </Form.Control.Feedback>\r\n                      </Form.Group> \r\n                      <Form.Group>\r\n                          <Form.Label style={{marginLeft: \"50px\"}}>Select city:-</Form.Label>\r\n                          <Form.Control isInvalid={error.city_nameError} className=\"form-control\" as=\"select\" name=\"city_id\" onChange={(e) => {HandleChange(e,\"city_id\")}} style={{marginLeft: \"50px\",width:\"250px\"}} >\r\n                              <option selected disabled>-----Select -----</option>\r\n                              {optioncities()}\r\n                          </Form.Control>\r\n                          <Form.Control.Feedback type=\"invalid\" style={{marginLeft: \"28px\"}}>\r\n                            {error.city_nameError}\r\n                          </Form.Control.Feedback>\r\n                      </Form.Group> \r\n                  </Form.Row>\r\n                  <Form.Row>\r\n                      <Form.Group as={Col} controlId=\"formGridEmail2\">\r\n                          {/* <input type=\"submit\" /> */}\r\n                          <Button className=\"btnRegister\" defaultValue=\"Register\" style={{marginLeft: \"28px\"}} onClick={handleSubmit}>Submit</Button>\r\n                      </Form.Group>\r\n                  </Form.Row>\r\n\r\n                  </Form>\r\n                  <span className=\"logn-form-copy\" style={{ marginLeft: \"262px\",marginTop: \"26px\"}}>Already have an account? <a onClick={()=>{loginHandler()}} className=\"login-form__sign-up\" style={{color:\"#0074d9\"}}>Sign in</a></span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  const mapStateToProps =  (state) => ({\r\n      err:state.stateReducer.error,\r\n      // err:state.userReducer.error1,\r\n      states:state.stateReducer.states,\r\n      cities:state.cityReducer.cities,\r\n    })\r\n  \r\n  const mapDispatchToProps = dispatch =>{\r\n    return{\r\n      fetchstatedata:()=>dispatch(fetchstatedata()),\r\n      // fetchcitiesdata:()=>dispatch(fetchcitiesdata()),\r\n      fetchAllStatesBystate_id:(_id)=>dispatch(fetchAllStatesBystate_id(_id)),\r\n      adduserdata: (postdata) => dispatch(adduserdata(postdata))\r\n    }\r\n  }\r\n  export default connect(mapStateToProps,mapDispatchToProps)(FormPage);\r\n  ","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\All Registration form\\userRegistration.js",["238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262"],"import React, { useState,useEffect } from \"react\";\r\nimport {Form,Col,Button} from \"react-bootstrap\";\r\nimport {connect} from 'react-redux';\r\nimport {adduserdata,fetchusersdata} from '../../store/action/userAction';\r\nimport {fetchstatedata} from '../../store/action/stateAction';\r\nimport {fetchAllStatesBystate_id} from '../../store/action/cityAction';\r\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBCard, MDBInput } from 'mdbreact';\r\nimport '../register.css';\r\n\r\nconst FormPage = (props) => {\r\n  useEffect(()=>{\r\n    props.fetchstatedata();\r\n  },[props.fetchstatedata])\r\n\r\n  const [obj,setMyObj] = useState({\r\n    user_name:\"\",\r\n    password:\"\",\r\n    email:\"\",\r\n    gender:\"Male\",\r\n    photo1:\"\",\r\n    state_id:\"\",\r\n    city_id:\"\",\r\n    group_id:\"\",\r\n    is_active:\"\"\r\n  });\r\n  \r\n  const [error,setError]=useState({\r\n    user_name_nameError:\"\",\r\n    password_nameError:\"\",\r\n    gender_nameError:\"\",\r\n    email_nameError:\"\",\r\n    state_nameError:\"\",\r\n    city_nameError:\"\",\r\n    isValid:false\r\n  });\r\n\r\n  const handleSubmit =async () =>{\r\n    let errors = { ...error,isValid: true };\r\n    obj.group_id=\"5fe49d9efcd4173394b09b42\";\r\n    obj.is_active=\"1\";\r\n    // obj.photo1=\"sds\";\r\n    errors.state_nameError=\"\";\r\n    errors.city_nameError=\"\";\r\n    errors.user_name_nameError=\"\";\r\n    errors.password_nameError=\"\";\r\n    errors.email_nameError=\"\";\r\n    errors.isValid=false;\r\n    if(obj.state_id == \"\" || obj.city_id == \"\" || obj.user_name == \"\" || obj.password == \"\" || obj.email == \"\" || obj.email != \"\"){\r\n      if(obj.state_id == \"\"){\r\n        errors.state_nameError=\"Please atleast one select state !!\"\r\n        errors.isValid=true;\r\n      }\r\n      if(obj.city_id == \"\"){\r\n        errors.city_nameError=\"Please atleast one select city !!\"\r\n        errors.isValid=true;\r\n      }\r\n      if(obj.user_name == \"\"){\r\n        errors.user_name_nameError=\"Please reuired username !!\"\r\n        errors.isValid=true;\r\n      }\r\n      if(obj.password == \"\"){\r\n        errors.password_nameError=\"Please required password !!\"\r\n        errors.isValid=true;\r\n      }\r\n      if(obj.email == \"\"){\r\n        errors.email_nameError=\"Please required email !!\"\r\n        errors.isValid=true;\r\n      }\r\n      if(obj.email != \"\"){\r\n        var pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\r\n        if (!pattern.test(obj.email)) {\r\n          errors.isValid = true;\r\n          errors.email_nameError = \"Please enter valid email address.\";\r\n        }\r\n      }\r\n    }else{\r\n      errors.state_nameError=\"\";\r\n      errors.city_nameError=\"\";\r\n      errors.user_name_nameError=\"\";\r\n      errors.password_nameError=\"\";\r\n      errors.email_nameError=\"\";\r\n      errors.isValid=false;\r\n    }\r\n    if(errors.isValid==false){\r\n      const formdata = new FormData();\r\n      console.log(obj);\r\n      formdata.append(\"user_name\",obj.user_name);\r\n      formdata.append(\"password\",obj.password);\r\n      formdata.append(\"email\",obj.email);\r\n      formdata.append(\"gender\",obj.gender);\r\n      formdata.append(\"photo1\",obj.photo1);\r\n      formdata.append(\"state_id\",obj.state_id);\r\n      formdata.append(\"city_id\",obj.city_id);\r\n      formdata.append(\"group_id\",obj.group_id);\r\n      formdata.append(\"is_active\",obj.is_active);\r\n      console.log(obj.photo1);\r\n      await props.adduserdata(formdata);\r\n      props.history.replace(\"/\");\r\n    }\r\n    setError(errors);\r\n  }\r\n  const HandleChange = (e,name) =>{\r\n    let olddata = {...obj};\r\n    if (name == \"photo1\") {\r\n      const { target: { files } } = e\r\n      olddata[name] = files.length === 1 ? files[0] : files\r\n      olddata[name] = e.target.files[0];\r\n    }\r\n    else\r\n    {\r\n      olddata[name] = e.target.value;\r\n    }\r\n    setMyObj(olddata)\r\n    cityCall(olddata.state_id);\r\n  }\r\n\r\n  const cityCall =async (id) =>{\r\n    await props.fetchAllStatesBystate_id(id);\r\n    // console.log(props.cities);\r\n  }\r\n\r\n  const optionStates = () => {\r\n    return props.states.map((stateslist) => {\r\n    const { _id, state_name } = stateslist;\r\n      return (\r\n          <option value={_id} key={_id}>{state_name}</option>\r\n      )\r\n    })\r\n  }\r\n\r\n  const optioncities = () => {\r\n    return props.cities.map((stateslist) => {\r\n    const { _id, city_name } = stateslist;\r\n      return (\r\n          <option value={_id} key={_id}>{city_name}</option>\r\n      )\r\n    })\r\n  }\r\n\r\n  const backHandler = () => {\r\n    props.history.replace(\"/theaterreg\")\r\n  }\r\n\r\n  const loginHandler = () =>{\r\n    props.history.replace(\"/\")\r\n  }\r\n\r\n    return (\r\n      <div>\r\n        <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\" rel=\"stylesheet\" id=\"bootstrap-css\" />\r\n        {/*---- Include the above in your HEAD tag --------*/}\r\n        <div className=\"container register\" style={{marginTop: \"2px\"}}>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-3 register-left\">\r\n              <img src=\"https://image.ibb.co/n7oTvU/logo_white.png\" alt=\"\" />\r\n              <h3>Welcome</h3>\r\n              <p>You are 30 seconds away farom earning your own money!</p>\r\n              <input type=\"submit\" name defaultValue=\"Login\" disabled/><br />\r\n            </div>\r\n            <div className=\"col-md-9 register-right\">\r\n              <ul className=\"nav nav-tabs nav-justified\" id=\"myTab\" role=\"tablist\">\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link active\" id=\"home-tab\" data-toggle=\"tab\" role=\"tab\" aria-controls=\"home\" aria-selected=\"true\">User</a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link\" variant=\"secondary\" onClick={() => backHandler()}  id=\"profile-tab\" data-toggle=\"tab\" role=\"tab\" aria-controls=\"profile\" aria-selected=\"false\">Theater</a>\r\n                </li>\r\n              </ul>\r\n              <div className=\"tab-content\" id=\"myTabContent\">\r\n                <div className=\"tab-pane fade show active\" id=\"home\" role=\"tabpanel\" aria-labelledby=\"home-tab\">\r\n                  <h3 className=\"register-heading\">Apply as a User</h3>\r\n                  <div className=\"row register-form\">\r\n                  <Form style={{marginLeft: \"100px\"}}>\r\n                  <Form.Row>\r\n                      <Form.Group  as={Col} controlId=\"formGridEmail\">\r\n                        <Form.Label>Enter Username:-</Form.Label>\r\n                        <Form.Control type=\"text\" isInvalid={error.user_name_nameError}  placeholder=\"Enter Username ...\" name=\"user_name\" onChange={(e) => {HandleChange(e,\"user_name\")}} style={{width:\"290px\"}}/>\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {error.user_name_nameError}\r\n                          </Form.Control.Feedback>\r\n                      </Form.Group>\r\n                      <Form.Group as={Col} controlId=\"formGridEmail2\">\r\n                      <Form.Label style={{marginLeft: \"28px\"}}>Enter Password:-</Form.Label>\r\n                      <Form.Control type=\"password\" isInvalid={error.password_nameError} placeholder=\"Enter Password ...\" name=\"password\" onChange={(e) => {HandleChange(e,\"password\")}}  style={{marginLeft: \"28px\",width:\"250px\"}}/>\r\n                      <Form.Control.Feedback type=\"invalid\" style={{marginLeft: \"28px\"}}>\r\n                            {error.password_nameError}\r\n                        </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                  </Form.Row>\r\n                  <Form.Row>\r\n                      <Form.Group  as={Col} controlId=\"formGridEmail\">\r\n                        <Form.Label>Enter Email:-</Form.Label>\r\n                        <Form.Control type=\"email\" isInvalid={error.email_nameError} className=\"form-control\" name=\"email\" onChange={(e) => {HandleChange(e,\"email\")}} onBlur={() => cityCall()} placeholder=\"Enter email ...\"   style={{width:\"290px\"}}/>\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {error.email_nameError}\r\n                        </Form.Control.Feedback>\r\n                      </Form.Group>\r\n                      <Form.Group as={Col} controlId=\"formGridEmail\">\r\n                        <Form.Label style={{marginLeft: \"28px\"}}>Select Gender:-</Form.Label>\r\n                        <Form.Check type=\"radio\" name=\"gender\" value=\"male\" label=\"Male\" style={{marginLeft: \"28px\"}} onChange={(e) => {HandleChange(e,\"gender\")}} checked/>\r\n                        <Form.Check type=\"radio\" name=\"gender\" value=\"female\" label=\"Female\" style={{marginLeft: \"28px\"}} onChange={(e) => {HandleChange(e,\"gender\")}}/>\r\n                      </Form.Group>\r\n                  </Form.Row>\r\n                      \r\n                  <Form.Row>\r\n                      <Form.Group>\r\n                          <Form.Label>Select State:-</Form.Label>\r\n                          <Form.Control isInvalid={error.state_nameError} className=\"form-control\" as=\"select\" name=\"state_id\" onChange={(e) => {HandleChange(e,\"state_id\")}}  style={{width:\"290px\"}} >\r\n                            <option selected disabled>-----Select -----</option>\r\n                              {optionStates()}\r\n                          </Form.Control>\r\n                          <Form.Control.Feedback type=\"invalid\">\r\n                            {error.state_nameError}\r\n                          </Form.Control.Feedback>\r\n                      </Form.Group> \r\n                      <Form.Group>\r\n                          <Form.Label style={{marginLeft: \"50px\"}}>Select city:-</Form.Label>\r\n                          <Form.Control isInvalid={error.city_nameError} className=\"form-control\" as=\"select\" name=\"city_id\" onChange={(e) => {HandleChange(e,\"city_id\")}} style={{marginLeft: \"50px\",width:\"250px\"}} >\r\n                              <option selected disabled>-----Select -----</option>\r\n                              {optioncities()}\r\n                          </Form.Control>\r\n                          <Form.Control.Feedback type=\"invalid\" style={{marginLeft: \"28px\"}}>\r\n                            {error.city_nameError}\r\n                          </Form.Control.Feedback>\r\n                      </Form.Group> \r\n                  </Form.Row>\r\n                  <Form.Row>\r\n                      <Form.Group>\r\n                          <Form.Label>Select User photo:-</Form.Label>\r\n                          {/* <Form.File id=\"exampleFormControlFile1\" />   */}\r\n                          <Form.Control type=\"file\" name=\"photo1\" onChange={(e) => {HandleChange(e,\"photo1\")}} style={{maxWidth : \"300px\"}}/>\r\n                      </Form.Group> \r\n                      <Form.Group as={Col} controlId=\"formGridEmail2\">\r\n                          {/* <input type=\"submit\" /> */}\r\n                          <Button className=\"btnRegister\" defaultValue=\"Register\" style={{marginLeft: \"28px\"}} onClick={handleSubmit}>Submit</Button>\r\n                      </Form.Group>\r\n                  </Form.Row>\r\n                  </Form>\r\n                  <span className=\"logn-form-copy\" style={{ marginLeft: \"262px\",marginTop: \"26px\"}}>Already have an account? <a onClick={()=>{loginHandler()}} className=\"login-form__sign-up\" style={{color:\"#0074d9\"}}>Sign in</a></span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  const mapStateToProps =  (state) => ({\r\n      err:state.stateReducer.error,\r\n      // err:state.userReducer.error1,\r\n      states:state.stateReducer.states,\r\n      cities:state.cityReducer.cities,\r\n    })\r\n  \r\n  const mapDispatchToProps = dispatch =>{\r\n    return{\r\n      fetchstatedata:()=>dispatch(fetchstatedata()),\r\n      // fetchcitiesdata:()=>dispatch(fetchcitiesdata()),\r\n      fetchAllStatesBystate_id:(_id)=>dispatch(fetchAllStatesBystate_id(_id)),\r\n      adduserdata: (postdata) => dispatch(adduserdata(postdata))\r\n    }\r\n  }\r\n  export default connect(mapStateToProps,mapDispatchToProps)(FormPage);\r\n  ","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\All Registration form\\Temp.js",["263","264","265","266","267"],"import React, { Component, useEffect } from \"react\";\r\nimport {connect} from 'react-redux';\r\nimport {fetchDashboradRecord} from '../../store/action/userAction';\r\nimport {  Row, Col,Card, CardGroup,CardDeck } from \"react-bootstrap\";\r\n// import {MDBIcon} from 'react/jsx'\r\nimport { SiApachesolr,SiAtAndT,SiAdobecreativecloud,SiCoffeescript } from \"react-icons/si\";\r\n\r\nconst Dashboard = (props) => {\r\n\r\n  // render: function() {\r\n    return (\r\n      <>\r\n      <div >\r\n      <CardDeck style={{    display: \"flex\"}}>\r\n    <Card border=\"Primary\" style={{ width: '18rem',backgroundColor:\"#1e9ee8\",color:\"White\",padding:\"20px\",\r\n    marginLeft: \"20px\" }} >\r\n      <Card.Header>Total State</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title></Card.Title>\r\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}></Card.Text>\r\n        <SiCoffeescript style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>\r\n      </Card.Body>\r\n    </Card>\r\n    <Card border=\"Success\" style={{ width: '18rem',backgroundColor:\"#b9ad16\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\r\n      <Card.Header>Total City</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title></Card.Title>\r\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}></Card.Text>\r\n        <SiAtAndT style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>  \r\n      </Card.Body>\r\n    </Card>\r\n    <Card border=\"Success\" style={{ width: '18rem',backgroundColor:\"#25b125\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\r\n      <Card.Header>Total Movies</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title></Card.Title>\r\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}></Card.Text>\r\n        <SiApachesolr style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>        \r\n      </Card.Body>\r\n    </Card>\r\n    <Card bg=\"danger\" style={{ width: '18rem',backgroundColor:\"#f52e2e\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\r\n      <Card.Header>Total Theater</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title></Card.Title>\r\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}></Card.Text>\r\n        <SiAdobecreativecloud style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>  \r\n      </Card.Body>\r\n    </Card>\r\n    </CardDeck>\r\n    </div>\r\n     </>\r\n    );\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n  return{\r\n    fetchDashboradRecord:()=>dispatch(fetchDashboradRecord())\r\n  }\r\n}\r\nexport default connect(null,mapDispatchToProps)(Dashboard);","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\All Registration form\\loginForm.js",["268","269","270"],"import React,{useState,useEffect} from 'react';\r\nimport  \"./../css/login.css\";\r\nimport {connect} from 'react-redux';\r\nimport {login} from '../../store/action/userAction';\r\nimport {Form,Button,Input} from \"antd\";\r\nimport Logo from '../../Movie_logo/Admin3.jpg'\r\n\r\nconst NewComponent = (props) => {\r\n  const [form] = Form.useForm();\r\n  useEffect(()=>{\r\n    if(props.token===true){\r\n      props.history.replace(\"/city\");\r\n    }\r\n  },[props.token])\r\n  const [obj,setMyObj] = useState({\r\n    email:\"\",\r\n    password:\"\",\r\n  });\r\n  const [error,setError]=useState(false);\r\n  const handleSubmit = async () =>{\r\n    await props.login(obj.email,obj.password);\r\n    if(props.token!==true && obj.email && obj.password){\r\n     setError(true);\r\n    }\r\n  }\r\n\r\n    const signUp = () =>{\r\n        props.history.replace(\"/userreg\");\r\n    }\r\n\r\n    const HandleChange = (e,name) =>{\r\n      let olddata = {...obj};\r\n        olddata[name] = e.target.value;\r\n      setMyObj(olddata)\r\n    }\r\n      return (  \r\n        <Form className=\"login\" style={{marginLeft: \"500px\",marginTop:\"90px\",borderBottomLeftRadius: \"50px\",\r\n        borderBottomRightRadius: \"50px\",\r\n        borderTopLeftRadius: \"50px\",\r\n        borderTopRightRadius: \"50px\"}} form={form}\r\n        name=\"register\">\r\n          <header style={{marginTop:\"35px\",color:'#0ec78b'}}><img src={Logo} style={{height: \"60px\",width: \"60px\",marginLeft:\"05px\",borderBottomLeftRadius: \"43px\",borderBottomRightRadius: \"43px\",borderTopLeftRadius: \"43px\",borderTopRightRadius: \"43px\"}}/> Movie Login</header>\r\n          <div className=\"field\">\r\n              <span className=\"fa fa-user\" />\r\n              <Form.Item\r\n                  name=\"email\"\r\n                  style={{marginLeft:\"45px\",width:\"280px\"}}\r\n                  rules={[\r\n                    {\r\n                      type: 'email',\r\n                      message: 'The input is not valid E-mail!',\r\n                    },\r\n                    {\r\n                      required: true,\r\n                      message: 'Please input your E-mail!',\r\n                    },\r\n                  ]}\r\n                ><Input placeholder=\"Enter Your email\" style={{height:\"55px\"}} onChange={(e) => {HandleChange(e,\"email\")}}/></Form.Item>\r\n          </div>\r\n          <div className=\"field\">\r\n              <span className=\"fa fa-lock\" />\r\n              <Form.Item\r\n                  style={{width:\"280px\",marginTop: \"20px\",marginLeft: \"46px\"}}\r\n                  name=\"password\"\r\n                  rules={[\r\n                    {\r\n                      required: true,\r\n                      message: 'Please input your password!',\r\n                    },\r\n                  ]}\r\n                  hasFeedback\r\n                >\r\n                  <Input.Password  placeholder=\"*************\" onChange={(e) => {HandleChange(e,\"password\")}}/>\r\n                </Form.Item>\r\n          </div>\r\n          {(error)?<h4 style={{color:\"red\"}}>You are Not Unable to Login !!</h4>:\"\"}\r\n          <Form.Item>\r\n              <Button type=\"primary\" htmlType=\"submit\" onClick={() =>handleSubmit()}>Login</Button>\r\n            </Form.Item>\r\n          <div className=\"forgot-password\" style={{textAlign:\"center\"}}><a href=\"/\">Forgot password?</a></div>\r\n          <span className=\"logn-form-copy\">Don't have an account? <a onClick={()=>{signUp()}} className=\"login-form__sign-up\" style={{color:\"#0074d9\"}}>Sign Up</a></span>\r\n        </Form>\r\n    );\r\n  }\r\n  \r\n  const mapStateToProps =  (state) => ({\r\n    err1:state.userReducer.error1,\r\n    singleuser:state.userReducer.singleuser,\r\n    token:state.userReducer.token ? true : false\r\n\r\n  })\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n  return{\r\n    login:(email,password)=>dispatch(login(email,password))\r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(NewComponent);","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\All Registration form\\dashboard.js",["271","272","273","274","275"],"import React, { Component, useEffect } from \"react\";\r\nimport {connect} from 'react-redux';\r\nimport {fetchDashboradRecord} from '../../store/action/userAction';\r\nimport {  Row, Col,Card, CardGroup,CardDeck } from \"react-bootstrap\";\r\n// import {MDBIcon} from 'react/jsx'\r\nimport { SiApachesolr,SiAtAndT,SiAdobecreativecloud,SiCoffeescript } from \"react-icons/si\";\r\n\r\nconst Dashboard = (props) => {\r\n  useEffect(() => {\r\n    props.fetchDashboradRecord();\r\n    console.log(props.singleDashboard);\r\n  },[props.fetchDashboradRecord]);\r\n\r\n  // render: function() {\r\n    return (\r\n      <>\r\n      <div >\r\n      <CardDeck style={{    display: \"flex\"}}>\r\n    <Card border=\"Primary\" style={{ width: '18rem',backgroundColor:\"#1e9ee8\",color:\"White\",padding:\"20px\",\r\n    marginLeft: \"20px\" }} >\r\n      <Card.Header>Total State</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title></Card.Title>\r\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}>{props.singleDashboard.States}</Card.Text>\r\n        <SiCoffeescript style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>\r\n      </Card.Body>\r\n    </Card>\r\n    <Card border=\"Success\" style={{ width: '18rem',backgroundColor:\"#b9ad16\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\r\n      <Card.Header>Total City</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title></Card.Title>\r\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}>{props.singleDashboard.Citys}</Card.Text>\r\n        <SiAtAndT style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>  \r\n      </Card.Body>\r\n    </Card>\r\n    <Card border=\"Success\" style={{ width: '18rem',backgroundColor:\"#25b125\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\r\n      <Card.Header>Total Movies</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title></Card.Title>\r\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}>{props.singleDashboard.Movies}</Card.Text>\r\n        <SiApachesolr style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>        \r\n      </Card.Body>\r\n    </Card>\r\n    <Card bg=\"danger\" style={{ width: '18rem',backgroundColor:\"#f52e2e\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\r\n      <Card.Header>Total Theater</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title></Card.Title>\r\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}>{props.singleDashboard.Theaters}</Card.Text>\r\n        <SiAdobecreativecloud style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>  \r\n      </Card.Body>\r\n    </Card>\r\n    </CardDeck>\r\n    </div>\r\n     </>\r\n    );\r\n}\r\nconst mapStateToProps =  (state) => ({\r\n  err:state.userReducer.error,\r\n  Loading:state.userReducer.loading,\r\n  singleDashboard:state.userReducer.singleDashboard,\r\n})\r\nconst mapDispatchToProps = dispatch =>{\r\n  return{\r\n    fetchDashboradRecord:()=>dispatch(fetchDashboradRecord())\r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Dashboard);","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\State_All_Form\\stateList.js",["276","277","278","279","280","281"],"import React, { useState, useEffect } from 'react';\r\n// import {  Modal } from 'react-bootstrap';\r\nimport { fetchstatedata, deletestatedata, updatestatedata, singlestateDataFetch } from '../../store/action/stateAction';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { BiPlusMedical, BiSearch } from 'react-icons/bi';\r\nimport { FiAlignJustify } from \"react-icons/fi\";\r\nimport { Table,Space,Button,Breadcrumb,Card,Form,Modal,Input } from 'antd';\r\nimport '../state.css';\r\n\r\nconst StateList = (props) => {\r\n  const [obj, setMyObj1] = useState({\r\n    _id: \"\",\r\n    state_name: \"\",\r\n  })\r\n\r\n  const [ids, setIds] = useState(\"\");\r\n  const [error,setError] = useState({\r\n    state_nameError:'',\r\n    IsValid:false\r\n})\r\n  useEffect(() => {\r\n    props.fetchstatedata();\r\n    if (props.singlestate.state_name) {\r\n      console.log(props.singlestate.state_name)\r\n      let olddata={...obj};\r\n      olddata.state_name = props.singlestate.state_name;\r\n      olddata._id = props.singlestate._id;\r\n      setMyObj1(olddata);\r\n    }\r\n  }, [props.fetchstatedata,props.singlestate])\r\n\r\n  const deleteHandler = async (id) => {\r\n    await props.deletestatedata(id);\r\n    setShow(false);\r\n  }\r\n\r\n  const SingleSubmit = async () => {\r\n    // let categoryData = {...obj}\r\n    let errors = { ...error, IsValid : true };\r\n    if(!obj.state_name || obj.state_name === \"\")\r\n    {\r\n        errors.IsValid = false;\r\n        errors.state_nameError = \"StateName Is Required \"\r\n    }\r\n    else\r\n        errors.state_nameError = \"\"\r\n    setError(errors);\r\n    if(errors.IsValid==true){\r\n      await props.updatestatedata(obj._id, obj);\r\n      usetShow(false);\r\n      obj.state_name = \"\";\r\n      props.singlestate.state_name = \"\";\r\n    }\r\n  }\r\n\r\n  const [show, setShow] = useState(false);\r\n  const [ushow, usetShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = (id) => {\r\n    setShow(true);\r\n    setIds(id);\r\n  }\r\n\r\n  const SingleClose = () => {\r\n    setError({\r\n      state_nameError:\"\",\r\n      IsValid:true\r\n    })\r\n    obj.state_name = \"\";\r\n    props.singlestate.state_name = \"\";\r\n    usetShow(false)\r\n  };\r\n\r\n  // if (props.singlestate.state_name && !obj.state_name) {\r\n  //   obj.state_name = props.singlestate.state_name;\r\n  //   obj._id = props.singlestate._id;\r\n  // }\r\n  const handleUpdate = async (_id) => {\r\n    await props.singlestateDataFetch(_id);\r\n    usetShow(true);\r\n  }\r\n  // const renderTableData = () => {\r\n  //   return props.states.map((stateslist, index) => {\r\n  //     const { _id, state_name } = stateslist\r\n  //     return (\r\n  //       <tr key={_id}>\r\n  //         <td>{index + 1}</td>\r\n  //         <td>{state_name}</td>\r\n  //         <td><Button onClick={() => handleUpdate(_id)} >UPDATE</Button></td>\r\n  //         <td><Button variant=\"danger\" onClick={() => handleShow(_id)} >Delete</Button></td>\r\n  //       </tr>\r\n  //     )\r\n  //   })\r\n  // }\r\n  const columns = [\r\n    {\r\n      title: 'state_Name',\r\n      dataIndex: 'state_name',\r\n      key: 'state_name',\r\n      defaultSortOrder: 'descend',\r\n      sorter: (a, b) => a.state_name.length - b.state_name.length,\r\n    },{\r\n      title: 'Update',\r\n      key: 'Update',\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Button onClick={() => handleUpdate(record._id)} type=\"primary\">UPDATE</Button>\r\n        </Space>\r\n      ),\r\n    },{\r\n      title: 'Delete',\r\n      key: 'Delete',\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Button type=\"danger\" onClick={() => handleShow(record._id)} style={{backgroundColor:\"Red\",borderBlockColor:\"Black\",color:\"White\"}}>Delete</Button>\r\n        </Space>\r\n      ),\r\n    }\r\n  ];\r\n  // }\r\n  const HandleChange = (e, name) => {\r\n    let olddata = { ...obj };\r\n    olddata[name] = e.target.value;    \r\n    setMyObj1(olddata);\r\n  }\r\n  return (\r\n    <>\r\n          <Breadcrumb style={{ marginTop: \"-29px\",textAlign:\"right\",marginBottom:\"29px\" }} key=\"sdsgf\">\r\n              <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n              <Breadcrumb.Item>State</Breadcrumb.Item>\r\n              <Breadcrumb.Item>View State List</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n            <div className=\"site-card-border-less-wrapper\" key=\"sdsbhdcb\">\r\n              <Card title=\"View State List\" bordered={false} style={{ width: \"auto\" }} key=\"sdkbjse\">\r\n                <Table columns={columns} dataSource={props.states} pagination={{ pageSize: 4 }} key=\"mvseuiwi\"/>\r\n              </Card>\r\n            </div>\r\n      {/* Update Record */}\r\n       <Modal title=\"Update State\"\r\n       key=\"ssd\"\r\n        visible={ushow}\r\n        onOk={() => SingleSubmit()}\r\n        onCancel={() =>SingleClose()}>\r\n            <Form>\r\n                <Input type=\"hidden\" name=\"_id\" value={obj._id} onChange={(e) => HandleChange(e, \"_id\")} placeholder=\"Enter state name ...\" />\r\n                <Form.Item label=\"Enter State Name:-\"\r\n                hasFeedback\r\n                validateStatus={(error.state_nameError)?\"error\":\"success\"}\r\n                help={error.state_nameError}>                  \r\n                    <Input type=\"text\" style={{ backgroundColor: \"#e2e2e2\", color: \"#463334\" }} name=\"state_name\" value={obj.state_name} onChange={(e) => HandleChange(e, \"state_name\")} placeholder=\"Enter state name ...\" />\r\n                </Form.Item>\r\n            </Form>\r\n      </Modal>\r\n\r\n      {/* Delete Record  */}\r\n       <Modal title=\"Are you sure!\"\r\n       key=\"sdsfd\"\r\n        visible={show}\r\n        onOk={() => deleteHandler(ids)}\r\n        onCancel={() =>handleClose()}>\r\n              Do you want to delete this state?\r\n      </Modal> \r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  err: state.stateReducer.error,\r\n  Loading: state.stateReducer.loading,\r\n  states: state.stateReducer.states,\r\n  singlestate: state.stateReducer.singlestate,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchstatedata: () => dispatch(fetchstatedata()),\r\n    deletestatedata: (_id) => dispatch(deletestatedata(_id)),\r\n    updatestatedata: (postdata, put) => dispatch(updatestatedata(postdata, put)),\r\n    singlestateDataFetch: (id) => dispatch(singlestateDataFetch(id))\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StateList);\r\n","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\State_All_Form\\addForm.js",["282"],"import React,{useState} from 'react';\r\nimport {addstatedata} from '../../store/action/stateAction';\r\nimport {connect} from 'react-redux';\r\nimport { Breadcrumb,Card } from 'antd';\r\nimport \"../state.css\";\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button\r\n} from 'antd';\r\n\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 4,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n  },\r\n};\r\nconst formTailLayout = {\r\n  labelCol: {\r\n    span: 4,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n    offset: 4,\r\n  },\r\n};\r\n\r\nconst AddForm = (props) => {\r\n  const [form] = Form.useForm();\r\n  const [obj,setMyObj]= useState({\r\n    state_name:\"\"\r\n  })\r\n\r\n  const handleSubmit = async () =>{\r\n    try {\r\n      const values = await form.validateFields();\r\n     await props.addstatedata(obj);\r\n     props.history.replace(\"/state\");\r\n    } catch (errorInfo) {\r\n      console.log('Failed:', errorInfo);\r\n    }\r\n  }\r\n\r\n  const HandleChange = (e,name) =>{\r\n     let olddata = {...obj};\r\n     olddata[name] = e.target.value;\r\n     setMyObj(olddata);\r\n  }\r\n\r\n  return (\r\n    <>    \r\n          <div className={\"Title\"} style={{marginTop: \"-29px\" }}>\r\n          </div>\r\n          <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"30px\"  }}>\r\n              <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n              <Breadcrumb.Item>State</Breadcrumb.Item>\r\n              <Breadcrumb.Item>Add State</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n              <Card title=\"Add State Form\" bordered={false} style={{ width: \"auto\" }}>\r\n                      <Form form={form} name=\"AddForm\">\r\n                          <Form.Item {...formItemLayout} name=\"state_name\" label=\"Enter State Name:-\" rules={[{ required: true, message: 'Please required State!' }]}>\r\n                              <Input type=\"text\" name=\"state_name\" onChange={(e)=>{HandleChange(e,\"state_name\")}} placeholder=\"Enter state name ...\" style={{maxWidth : \"300px\"}}/>\r\n                          </Form.Item>\r\n                          <Form.Item {...formTailLayout} label=\"\">\r\n                              <Button type=\"primary\" onClick={handleSubmit}>Add State</Button>\r\n                          </Form.Item>\r\n                      </Form>\r\n              </Card>\r\n            </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n  return{\r\n    addstatedata: (postdata) => dispatch(addstatedata(postdata))\r\n  }\r\n}\r\nexport default connect(null,mapDispatchToProps)(AddForm);\r\n","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\City_All_Form\\cityList.js",["283","284","285","286"],"import React, { useState, useEffect } from 'react';\r\nimport { fetchcitiesdata, deletecitiesdata, updatecitiesdata, singlecitiesDataFetch } from '../../store/action/cityAction';\r\nimport { fetchstatedata } from '../../store/action/stateAction';\r\nimport { connect } from 'react-redux';\r\nimport '../state.css';\r\nimport { Table, Space, Button, Breadcrumb, Card, Form, Modal, Input, Select } from 'antd';\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 10,\r\n  },\r\n};\r\n\r\nconst CityList = (props) => {\r\n  const { Option } = Select;\r\n  const [form] = Form.useForm();\r\n  const [error,setError] = useState({\r\n    state_nameError:'',\r\n    IsValid:false,\r\n    city_nameError:\"\"\r\n})\r\n  const [obj, setMyObj1] = useState({\r\n    _id: \"\",\r\n    city_name: \"\",\r\n    state_id: \"\"\r\n  })\r\n  const [op,setOp] = useState(true);\r\n  const [ids, setIds] = useState(\"\");\r\n  const [show, setShow] = useState(false);\r\n  const [ushow, usetShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    props.fetchcitiesdata();\r\n    props.fetchstatedata();\r\n    if (props.singlecities.city_name) {\r\n      console.log(props.singlecities.city_name)\r\n      let olddata={...obj};\r\n      olddata.city_name = props.singlecities.city_name;\r\n      olddata._id = props.singlecities._id;\r\n      olddata.state_id=props.singlecities.state_id;\r\n      setMyObj1(olddata);\r\n    }\r\n  }, [props.fetchcitiesdata, props.fetchstatedata,props.singlecities])\r\n\r\n  const deleteHandler = async (id) => {\r\n    await props.deletecitiesdata(id);\r\n    setShow(false);\r\n  }\r\n\r\n  const SingleSubmit = async () => {\r\n    let errors = { ...error, IsValid : true };\r\n    if(!obj.state_id || obj.state_id === \"\" || !obj.city_name || obj.city_name === \"\")\r\n    {\r\n      if(!obj.state_id || obj.state_id === \"\"){\r\n        errors.IsValid = false;\r\n        errors.state_nameError = \"StateName Is Required \"\r\n      }\r\n      if(!obj.city_name || obj.city_name === \"\"){\r\n        errors.IsValid = false;\r\n        errors.city_nameError = \"cityname Is Required \"\r\n      }\r\n\r\n    }else{\r\n        errors.state_nameError = \"\"\r\n        errors.city_nameError = \"\"\r\n    }\r\n      setError(errors);\r\n      if(errors.IsValid==true){\r\n        await props.updatecitiesdata(obj._id, obj);\r\n        setOp(true);\r\n        usetShow(false);\r\n        obj._id = props.singlecities._id;\r\n        obj.city_name = \"\";\r\n      }\r\n    \r\n  }\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = (id) => {\r\n    setOp(true);\r\n    setShow(true);\r\n    setIds(id);\r\n  }\r\n\r\n  const SingleClose = () => {\r\n    setOp(true);\r\n    obj.city_name = \"\";\r\n    props.singlecities.city_name = \"\";\r\n    usetShow(false)\r\n  };\r\n\r\n  // if (props.singlecities.city_name && !obj.city_name) {\r\n  //   if(op!=false){\r\n  //     console.log(op);\r\n  //     setMyObj1(props.singlecities)\r\n  //   }\r\n  // }\r\n  const handleUpdate = async (_id) => {\r\n    await props.singlecitiesDataFetch(_id);\r\n    usetShow(true);\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: 'city_Name',\r\n      dataIndex: 'city_name',\r\n      key: 'city_name',\r\n      defaultSortOrder: 'descend',\r\n      sorter: (a, b) => a.city_name.length - b.city_name.length,\r\n    }, {\r\n      title: 'state_name',\r\n      key: 'state_id',\r\n      defaultSortOrder: 'descend',\r\n      render: s => s.state_id.state_name,\r\n      sorter: (a, b) => a.state_id.state_name.length - b.state_id.state_name.length,\r\n    }, {\r\n      title: 'Update',\r\n      key: 'Update',\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Button onClick={() => handleUpdate(record._id)} type=\"primary\">UPDATE</Button>\r\n        </Space>\r\n      ),\r\n    }, {\r\n      title: 'Delete',\r\n      key: 'Delete',\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Button type=\"danger\" onClick={() => handleShow(record._id)} style={{ backgroundColor: \"Red\", borderBlockColor: \"Black\", color: \"White\" }}>Delete</Button>\r\n        </Space>\r\n      ),\r\n    }\r\n  ];\r\n\r\n  const HandleChange = (e, name) => {\r\n    let olddata = { ...obj };\r\n    if (name != \"state_id\") {\r\n      olddata[name] = e.target.value;\r\n    } else {\r\n      olddata[name] = e;\r\n    }\r\n    setOp(false);\r\n    setMyObj1(olddata);\r\n  }\r\n\r\n  const optionTemplate = () => {\r\n    return props.states.map((stateslist) => {\r\n      const { _id, state_name } = stateslist;\r\n      return (\r\n        <Option value={_id} key={_id}>{state_name}</Option>\r\n      )\r\n    })\r\n  }\r\n  return (\r\n    <>\r\n      <div className={\"Title\"} style={{ marginTop: \"-29px\"}}>\r\n        {/* City List */}\r\n          </div>\r\n      <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"29px\" }}>\r\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item>City</Breadcrumb.Item>\r\n        <Breadcrumb.Item>View City List</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <div className=\"site-card-border-less-wrapper\">\r\n        <Card title=\"View City List\" bordered={true} style={{ width: \"auto\",border:\"5px\" }}>\r\n          <Table columns={columns} dataSource={props.cities} pagination={{ pageSize: 4 }} />\r\n        </Card>\r\n      </div>\r\n      {/* Update Record */}\r\n      <Modal title=\"Update State\"\r\n        visible={ushow}\r\n        onOk={() => SingleSubmit()}\r\n        onCancel={() => SingleClose()}>\r\n        <Form form={form} name=\"CityList\">\r\n          <Input type=\"hidden\" name=\"_id\" value={obj._id} onChange={(e) => HandleChange(e, \"_id\")} />\r\n          <Form.Item {...formItemLayout} label=\"Enter City Name:-\" \r\n                hasFeedback\r\n                validateStatus={(error.city_nameError)?\"error\":\"success\"}\r\n                help={error.city_nameError}>\r\n            <Input type=\"text\" name=\"city_name\" value={obj.city_name || \" \"} onChange={(e) => { HandleChange(e, \"city_name\") }} placeholder=\"Enter city name ...\" />\r\n          </Form.Item>\r\n          <Form.Item {...formItemLayout} label=\"Select State :-\" \r\n                hasFeedback\r\n                validateStatus={(error.state_nameError)?\"error\":\"success\"}\r\n                help={error.state_nameError}>\r\n            <Select name=\"state_id\" value={obj.state_id} onChange={(e) => HandleChange(e, \"state_id\")} placeholder=\"------ Select State-----\">\r\n              {optionTemplate()}\r\n            </Select>\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n\r\n      {/* Delete Record  */}\r\n      <Modal title=\"Are you sure!\"\r\n        visible={show}\r\n        onOk={() => deleteHandler(ids)}\r\n        onCancel={() => handleClose()}>\r\n        Do you want to delete this state?\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  err: state.cityReducer.error,\r\n  cities: state.cityReducer.cities,\r\n  states: state.stateReducer.states,\r\n  singlecities: state.cityReducer.singlecities\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchstatedata: () => dispatch(fetchstatedata()),\r\n    fetchcitiesdata: () => dispatch(fetchcitiesdata()),\r\n    deletecitiesdata: (_id) => dispatch(deletecitiesdata(_id)),\r\n    updatecitiesdata: (postdata, put) => dispatch(updatecitiesdata(postdata, put)),\r\n    singlecitiesDataFetch: (id) => dispatch(singlecitiesDataFetch(id))\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CityList);\r\n","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\Movie_All_Form\\addMovie.js",["287","288","289","290","291","292","293","294"],"import React, { useState } from 'react';\r\nimport { addmoviedata } from \"../../store/action/movieAction\";\r\nimport { connect } from 'react-redux';\r\nimport { Breadcrumb,Card,Row,Col,DatePicker,Select } from 'antd';\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Switch\r\n} from 'antd';\r\n// import { Row } from 'react-bootstrap';\r\nconst {Option} = Select;\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    // span: 5,\r\n  },\r\n  wrapperCol: {\r\n    span: 10,\r\n  },\r\n};\r\nconst formTailLayout = {\r\n  labelCol: {\r\n    span: 4,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n    offset: 4,\r\n  },\r\n};\r\n\r\nconst AddMovie = (props) => {\r\n  const { RangePicker } = DatePicker;\r\n  const [form] = Form.useForm();\r\n  const [obj, setMyObj] = useState({\r\n    moviename: \"\",\r\n    releasedate: \"\",\r\n    movie_languages:\"\",\r\n    movie_status: \"\",\r\n    movie_category: \"\",\r\n    director_name: \"\",\r\n    Actors_name: \"\",\r\n    movie_description: \"\",\r\n    movie_type: \"\",\r\n    movie_logo: \"\",\r\n    booking_status: \"\"\r\n  })\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n        const values = await form.validateFields();\r\n        // console.log(obj);\r\n        if(obj.booking_status==\"\" || obj.movie_status==\"\"){\r\n          if(obj.movie_status==\"\"){\r\n            obj.booking_status=false;\r\n          }if(obj.booking_status==\"\"){\r\n            obj.movie_status=false;\r\n          }\r\n        }\r\n        const formdata = new FormData();\r\n        formdata.append(\"moviename\",obj.moviename);\r\n        formdata.append(\"releasedate\",obj.releasedate);\r\n        formdata.append(\"movie_status\",obj.movie_status);\r\n        formdata.append(\"movie_category\",obj.movie_category);\r\n        formdata.append(\"director_name\",obj.director_name);\r\n        formdata.append(\"Actors_name\",obj.Actors_name);\r\n        formdata.append(\"movie_description\",obj.movie_description);\r\n        formdata.append(\"movie_type\",obj.movie_type);\r\n        formdata.append(\"movie_languages\",obj.movie_languages);\r\n        formdata.append(\"movie_logo\",obj.movie_logo);\r\n        formdata.append(\"booking_status\",obj.booking_status);\r\n      \r\n        console.log(obj.moviename);\r\n        await props.addmoviedata(formdata);\r\n        props.history.replace(\"/movie\");\r\n    } catch (errorInfo) {\r\n    }\r\n  }\r\n\r\n  const HandleChange = (e, name) => {\r\n    let olddata = { ...obj };\r\n    if (name == \"movie_logo\") {\r\n      const { target: { files } } = e\r\n      olddata[name] = files.length === 1 ? files[0] : files\r\n      olddata[name] = e.target.files[0];\r\n    }else if(name == \"releasedate\"){\r\n      if(e!=null){\r\n        olddata[name] = new Date(e._d).toLocaleDateString();\r\n      }\r\n    }else if((name === \"movie_type\") || (name === \"movie_category\") || (name === \"booking_status\") || (name === \"movie_status\") || (name=== \"movie_languages\")){\r\n        olddata[name] = e;\r\n    }else\r\n    {\r\n      olddata[name] = e.target.value;\r\n    }\r\n    setMyObj(olddata);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={\"Title\"} style={{marginTop: \"-29px\" }}>\r\n          </div>\r\n          <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"30px\"  }}>\r\n              <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n              <Breadcrumb.Item>Movie</Breadcrumb.Item>\r\n              <Breadcrumb.Item>Add Movie</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n              <Card title=\"Add Movie Form\" bordered={false} style={{ width: \"auto\" }}>\r\n                      <Form form={form} name=\"AddMovie\">\r\n                      <Row gutter={0}>\r\n                          <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Name:-\" name=\"moviename\" rules={[{ required: true, message: 'Please required movie name!' }]}>\r\n                              <Input type=\"text\" name=\"moviename\" onChange={(e) => { HandleChange(e, \"moviename\") }} placeholder=\"Enter moviename ...\" style={{maxWidth : \"300px\", width:\"100%\"}}/>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Category:-\" name=\"movie_category\" rules={[{ required: true, message: 'Please required movie category!' }]}>\r\n                                  <Select name=\"movie_category\" onChange={(e)=>HandleChange(e,\"movie_category\")} placeholder=\"------ Select Movie Category-----\" allowClear style={{maxWidth : \"300px\"}}>\r\n                                      <Option value=\"A\" key={\"A\"}>A</Option>\r\n                                      <Option value=\"B\" key={\"B\"}>B</Option>\r\n                                      <Option value=\"C\" key={\"C\"}>C</Option>\r\n                                      <Option value=\"D\" key={\"D\"}>D</Option>\r\n                                  </Select>\r\n                              {/* <Input type=\"text\" name=\"movie_category\" onChange={(e) => { HandleChange(e, \"movie_category\") }} placeholder=\"Enter movie_category ...\" style={{maxWidth : \"300px\", width:\"100%\"}}/> */}\r\n                          </Form.Item>\r\n                      </Col>\r\n                    </Row>\r\n                      <Row gutter={0}>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Release Date:-\" name=\"releasedate\" rules={[{ required: true, message: 'Please required Releasedate!' }]}>\r\n                              <DatePicker onChange={(e) => { HandleChange(e, \"releasedate\") }} format={\"YYYY/MM/DD\"}/>\r\n                          </Form.Item>\r\n                      </Col>\r\n                        <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Director Name:-\" name=\"director_name\" rules={[{ required: true, message: 'Please required director name!' }]}>\r\n                              <Input type=\"text\" name=\"director_name\" onChange={(e) => { HandleChange(e, \"director_name\") }} placeholder=\"Enter director_name ...\" style={{maxWidth : \"300px\"}}/>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      </Row>\r\n                      <Row gutter={0}>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Actors Name:-\" name=\"Actors_name\" rules={[{ required: true, message: 'Please required actors name!' }]}>\r\n                              <Input type=\"text\" name=\"Actors_name\" onChange={(e) => { HandleChange(e, \"Actors_name\") }} placeholder=\"Enter Actors ...\" style={{maxWidth : \"300px\"}}/>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Description:-\" name=\"movie_description\" rules={[{ required: true, message: 'Please required movie description!' }]}>\r\n                              <Input type=\"text\" name=\"movie_description\" onChange={(e) => { HandleChange(e, \"movie_description\") }} placeholder=\"Enter movie_description ...\" style={{maxWidth : \"300px\"}}/>\r\n                          </Form.Item>\r\n                          </Col>\r\n                      </Row>\r\n                      <Row gutter={0}>\r\n                        <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Type:-\" name=\"movie_type\" rules={[{ required: true, message: 'Please required movie type!' }]}>\r\n                                  <Select name=\"movie_type\" onChange={(e)=>HandleChange(e,\"movie_type\")} placeholder=\"------ Select Movie Type-----\" allowClear style={{maxWidth : \"300px\"}}>\r\n                                      <Option value=\"Action\" key={\"Action\"}>Action</Option>\r\n                                      <Option value=\"Comedy\" key={\"Comedy\"}>Comedy</Option>\r\n                                      <Option value=\"Drama\" key={\"Drama\"}>Drama</Option>\r\n                                      <Option value=\"Fantasy\" key={\"Fantasy\"}>Fantasy</Option>\r\n                                      <Option value=\"Horror\" key={\"Horror\"}>Horror</Option>\r\n                                      <Option value=\"Mystery\" key={\"Mystery\"}>Mystery</Option>\r\n                                      <Option value=\"Romance\" key={\"Romance\"}>Romance</Option>\r\n                                      <Option value=\"Thriller\" key={\"Thriller\"}>Thriller</Option>\r\n                                      <Option value=\"Western\" key={\"Western\"}>Western</Option>\r\n                                      <Option value=\"Crime Film\" key={\"Crime Film\"}>Crime Film</Option>\r\n                                      <Option value=\"Romantic Comedy\" key={\"Romantic Comedy\"}>Romantic Comedy</Option>\r\n                                      <Option value=\"Documentary\" key={\"Documentary\"}>Documentary</Option>\r\n                                  </Select>\r\n                              {/* <Input type=\"text\" name=\"movie_type\" onChange={(e) => { HandleChange(e, \"movie_type\") }} placeholder=\"Enter movie_type...\" style={{maxWidth : \"300px\"}}/> */}\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Choice Movie Logo:-\" name=\"movie_logo\" rules={[{ required: true, message: 'Please required movie logo!' }]}>\r\n                              <Input type=\"file\" name=\"movie_logo\" onChange={(e)=>{HandleChange(e,\"movie_logo\")}} placeholder=\"Enter movie_logo ...\" style={{maxWidth : \"300px\"}}/>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      </Row>\r\n                      <Row gutter={0}>\r\n                        <Col span={12}>\r\n                        <Form.Item {...formItemLayout} label=\"Movie Languages:-\" name=\"movie_languages\" rules={[{ required: true, message: 'Please required movie Languages !' }]}>\r\n                                  <Select name=\"movie_languages\" onChange={(e)=>HandleChange(e,\"movie_languages\")} placeholder=\"------ Select Movie Languages Type-----\" allowClear style={{maxWidth : \"300px\"}}>\r\n                                      <Option value=\"English\" key={\"English\"}>English</Option>\r\n                                      <Option value=\"Hindi\" key={\"Hindi\"}>Hindi</Option>\r\n                                      <Option value=\"Tamil\" key={\"Tamil\"}>Tamil</Option>\r\n                                      <Option value=\"Gujarati\" key={\"Gujarati\"}>Gujarati</Option>\r\n                                      <Option value=\"Telugu\" key={\"Telugu\"}>Telugu</Option>\r\n                                      <Option value=\"Bengali\" key={\"Bengali\"}>Bengali</Option>\r\n                                      <Option value=\"Marathi\" key={\"Marathi\"}>Marathi</Option>\r\n                                      <Option value=\"Telugu\" key={\"Telugu\"}>Telugu</Option>\r\n                                      <Option value=\"Bhojpuri\" key={\"Bhojpuri\"}>Bhojpuri</Option>\r\n                                  </Select>\r\n                          </Form.Item>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row gutter={0}>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Select Booking Status:-\" name=\"booking_status\" valuePropName=\"checked\" >\r\n                          {/* <Form.Item label=\"Switch\"> */}\r\n                              <Switch name=\"booking_status\" onChange={(e) => { HandleChange(e, \"booking_status\") }} required/>\r\n                            {/* </Form.Item> */}\r\n                              {/* <Input type=\"text\" name=\"booking_status\" onChange={(e) => { HandleChange(e, \"booking_status\") }} placeholder=\"Enter booking_status ...\" style={{maxWidth : \"300px\"}}/> */}\r\n                          </Form.Item>\r\n                          </Col>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Select Movie Status:-\" name=\"movie_status\">\r\n                          <Switch name=\"movie_status\" onChange={(e) => { HandleChange(e, \"movie_status\") }} />\r\n                              {/* <Input type=\"text\" name=\"movie_status\" onChange={(e) => { HandleChange(e, \"movie_status\") }} placeholder=\"Enter movie_status ...\" style={{ maxWidth: \"300px\" }} /> */}\r\n                          </Form.Item>\r\n                          </Col>\r\n                      </Row>\r\n                        \r\n                           <Form.Item {...formTailLayout} label=\"\"> \r\n                                <Button type=\"primary\" onClick={(e) =>handleSubmit()} loading={props.loading}>Add Movie</Button>\r\n                          </Form.Item>                           \r\n                      </Form>\r\n              </Card>\r\n            </div>\r\n    </>\r\n  );\r\n}\r\nconst mapStateToProps =  (state) => ({\r\n  loading:state.movieReducer.loading,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addmoviedata: (postdata) => dispatch(addmoviedata(postdata))\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddMovie);\r\n","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\City_All_Form\\addForm.js",["295","296","297","298","299","300","301","302","303","304","305","306","307","308","309"],"import React,{useState,useEffect} from 'react';\r\n// import Form from 'react-bootstrap/Form';\r\nimport {Row,Col,Modal,CardGroup} from 'react-bootstrap';\r\n// import Card from 'react-bootstrap/Card';\r\n// import Button from 'react-bootstrap/Button'/;\r\nimport {addcitiesdata} from '../../store/action/cityAction';\r\nimport {fetchstatedata} from '../../store/action/stateAction';\r\nimport {connect} from 'react-redux';\r\nimport { Breadcrumb,Card,Select,Space } from 'antd';\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button\r\n} from 'antd';\r\nconst {Option} = Select;\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 4,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n  },\r\n};\r\nconst formTailLayout = {\r\n  labelCol: {\r\n    span: 4,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n    offset: 4,\r\n  },\r\n};\r\n\r\nconst AddForm = (props) => {\r\n  const [form] = Form.useForm();\r\n    const [obj,setMyObj]= useState({\r\n      city_name:\"\",\r\n      state_id:\"\"\r\n    })\r\n    const [error,setError]=useState({\r\n        city_nameError:\"\",\r\n        isValid:false\r\n    });\r\n    \r\nconst [show, setShow] = useState(false);\r\nconst [ids,setIds] = useState(\"\");\r\n\r\nconst handleClose = () => setShow(false);\r\nconst handleShow = (id) => {setShow(true);\r\n  setIds(id);\r\n}\r\n\r\nconst deleteHandler = async (id) =>{\r\n    await props.deletestatedata(id);\r\n    setShow(false);\r\n  }\r\n    useEffect(()=>{\r\n      form.validateFields(['nickname']);\r\n        props.fetchstatedata();\r\n      // console.log(props.states);\r\n    },[props.fetchstatedata])\r\n    \r\n    const handleSubmit = async () =>{\r\n      try {\r\n        const values = await form.validateFields();\r\n        // console.log('Success:', values);\r\n        await props.addcitiesdata(obj);\r\n        props.history.replace(\"/city\");\r\n        obj.city_name=\"\";\r\n      } catch (errorInfo) {\r\n        console.log('Failed:', errorInfo);\r\n      }\r\n    }\r\n  \r\n\r\n    const HandleChange = (e,name) =>{\r\n      let olddata = {...obj};\r\n      if(name!=\"state_id\"){\r\n        olddata[name] = e.target.value;\r\n        }else{\r\n          olddata[name] = e;\r\n        }\r\n       setMyObj(olddata);\r\n    }\r\n\r\n    const optionTemplate = () => {\r\n      return props.states.map((stateslist) => {\r\n      const { _id, state_name } = stateslist;\r\n      return (\r\n          <Option value={_id} key={_id}>{state_name}</Option>\r\n       )\r\n      })    \r\n    }\r\n  return (\r\n\r\n    <>\r\n     <div className={\"Title\"} style={{marginTop: \"-29px\" }}>\r\n          </div>\r\n          <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"30px\"  }}>\r\n              <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n              <Breadcrumb.Item>City</Breadcrumb.Item>\r\n              <Breadcrumb.Item>Add City</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n              <Card title=\"Add City Form\" bordered={false} style={{ width: \"auto\" }}>\r\n                      <Form form={form} name=\"AddForm\">\r\n                      <Form.Item {...formItemLayout} label=\"Enter City Name:-\" name=\"city_name\" rules={[{ required: true, message: 'Please required City!' }]}>\r\n                              <Input type=\"text\" name=\"city_name\" onChange={(e)=>{HandleChange(e,\"city_name\")}} placeholder=\"Enter city name ...\" style={{maxWidth : \"300px\"}}/>\r\n                          </Form.Item>\r\n                          <Form.Item {...formItemLayout} label=\"Select State :-\" name=\"state_id\" rules={[{ required: true, message: 'Please required State!' }]}>\r\n                                <Select name=\"state_id\" onChange={(e)=>HandleChange(e,\"state_id\")} placeholder=\"------ Select State-----\" allowClear>\r\n                                      {optionTemplate()}\r\n                                  </Select>\r\n                          </Form.Item>\r\n                           <Form.Item {...formTailLayout} label=\"\"> \r\n                                <Button type=\"primary\" onClick={(e) =>handleSubmit()}>Add City</Button>\r\n                          </Form.Item> \r\n                      </Form>\r\n              </Card>\r\n            </div>\r\n    \r\n    </>\r\n  );\r\n}\r\nconst mapStateToProps =  (state) => ({\r\n    err:state.stateReducer.error,\r\n    states:state.stateReducer.states,\r\n  })\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n  return{\r\n    fetchstatedata:()=>dispatch(fetchstatedata()),\r\n    addcitiesdata: (postdata) => dispatch(addcitiesdata(postdata))\r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(AddForm);\r\n","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\Movie_All_Form\\movieList.js",["310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326"],"import React,{useState,useEffect} from 'react';\r\n// import {Button,Card,Table,Modal,Form, Spinner }from 'react-bootstrap';\r\nimport {fetchmoviedata,updatemoviedata,singlemovieDataFetch,deletemoviedata} from '../../store/action/movieAction';\r\nimport {connect} from 'react-redux';\r\nimport '../state.css';\r\nimport { Table, Space, Button, Breadcrumb, Card, Form, Modal, Input, Row, Col,DatePicker,Switch,Select } from 'antd';\r\nimport moment from 'moment';\r\n\r\nconst {Option} = Select;\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 24,\r\n  },\r\n  wrapperCol: {\r\n    span: 12,\r\n  },\r\n};\r\nconst formTailLayout = {\r\n  labelCol: {\r\n    span: 4,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n    offset: 4,\r\n  },\r\n};\r\n\r\nconst MovieList = (props) => {\r\n  const {form} =Form.useForm();\r\n  const [obj,setMyObj1]= useState({\r\n    _id:\"\",\r\n    moviename:\"\",\r\n    releasedate:\"\",\r\n    movie_category:\"\",\r\n    movie_languages:\"\",\r\n    director_name:\"\",\r\n    Actors_name:\"\",\r\n    movie_description:\"\",\r\n    movie_type:\"\",\r\n    movie_logo:\"\",\r\n    movie_status:\"\",\r\n    booking_status:\"\"\r\n  })\r\n  \r\n  const [op,setOp] = useState(true);\r\n  const [ids,setIds] = useState(\"\");\r\n  const [show, setShow] = useState(false);\r\n  const [ushow, usetShow] = useState(false);\r\n  \r\n  const [error,setError] = useState({\r\n    movie_nameError:'',\r\n    IsValid:false,\r\n})\r\n  useEffect(()=>{    \r\n    props.fetchmoviedata();\r\n    if (props.singlemovie.moviename || props.singlemovie.movie_category || props.singlemovie.releasedate) {\r\n      console.log(props.singlemovie.moviename)\r\n      let olddata={...obj};\r\n      olddata.moviename = props.singlemovie.moviename;\r\n      olddata._id = props.singlemovie._id;\r\n      olddata.movie_category=props.singlemovie.movie_category;\r\n      olddata.releasedate=props.singlemovie.releasedate;\r\n      olddata.movie_languages = props.singlemovie.movie_languages;\r\n      olddata.director_name=props.singlemovie.director_name;\r\n      olddata.Actors_name=props.singlemovie.Actors_name;\r\n      olddata.movie_description=props.singlemovie.movie_description;\r\n      olddata.movie_type=props.singlemovie.movie_type;\r\n      olddata.movie_logo=props.singlemovie.movie_logo;\r\n      if(props.singlemovie.movie_status==\"true\"){\r\n        olddata.movie_status=true;\r\n      }else{\r\n        olddata.movie_status=false;        \r\n      }\r\n      if(props.singlemovie.booking_status==\"true\"){\r\n        olddata.booking_status=true;\r\n      }else{\r\n        olddata.booking_status=false;\r\n      }\r\n      setMyObj1(olddata);\r\n    }\r\n  },[props.fetchmoviedata,props.singlemovie])\r\n  \r\n  const deleteHandler = async (id) =>{\r\n      await props.deletemoviedata(id);\r\n      setShow(false);\r\n  }\r\n\r\nconst SingleSubmit = async () =>{\r\n  let errors = { ...error, IsValid : true };\r\n    if(!obj.moviename || obj.moviename === \"\")\r\n    {\r\n      console.log(errors.IsValid);\r\n      if(!obj.moviename || obj.moviename === \"\"){\r\n        errors.IsValid = false;\r\n        errors.movie_nameError = \"moviename Is Required \"\r\n      }\r\n\r\n    }else{\r\n        errors.movie_nameError = \"\"\r\n    }\r\n    setError(errors);\r\n    if(errors.IsValid==true){\r\n      // const values = await form.validateFields();\r\n      console.log(obj);\r\n          const formdata = new FormData();\r\n          formdata.append(\"moviename\",obj.moviename);\r\n          formdata.append(\"releasedate\",obj.releasedate);\r\n          formdata.append(\"movie_status\",obj.movie_status);\r\n          formdata.append(\"movie_category\",obj.movie_category);\r\n          formdata.append(\"movie_languages\",obj.movie_languages);\r\n          formdata.append(\"director_name\",obj.director_name);\r\n          formdata.append(\"Actors_name\",obj.Actors_name);\r\n          formdata.append(\"movie_description\",obj.movie_description);\r\n          formdata.append(\"movie_type\",obj.movie_type);\r\n          formdata.append(\"movie_logo\",obj.movie_logo);\r\n          formdata.append(\"booking_status\",obj.booking_status);\r\n        await props.updatemoviedata(obj._id,formdata);\r\n        // setOp(true);\r\n        usetShow(false);\r\n        obj._id=props.singlemovie._id;\r\n        obj.moviename=\"\";\r\n        props.history.replace(`/movie`);\r\n    }\r\n}\r\n\r\n\r\nconst handleClose = () => setShow(false);\r\nconst handleShow = (id) => {\r\n  let errors = { ...error, IsValid : true };\r\n  setError(errors);\r\n  // setOp(true);\r\n  setShow(true);\r\n  setIds(id);\r\n}\r\n\r\nconst SingleClose = () => {\r\n  let errors = { ...error, IsValid : true }; \r\n  errors.movie_nameError = \"\"\r\n  setError(errors);\r\n  // setOp(true);\r\n  obj.releasedate=\"\";\r\n  obj.booking_status=false;\r\n  obj.moviename=\"\";\r\n  props.singlemovie.moviename = \"\";\r\n  usetShow(false) \r\n};\r\n\r\n// if(props.singlemovie.moviename && !obj.moviename){\r\n//   // if(op!=false){\r\n//     setMyObj1(props.singlemovie)\r\n//   // }\r\n// }\r\nconst handleUpdate = async (_id) => {\r\n  await props.singlemovieDataFetch(_id); \r\n  usetShow(true);\r\n}\r\n const HandleChange = (e,name) =>{\r\n  let olddata = {...obj};\r\n  if (name == \"movie_logo\") {\r\n    console.log(name);\r\n    const { target: { files } } = e\r\n    olddata[name] = files.length === 1 ? files[0] : files\r\n    olddata[name] = e.target.files[0];\r\n  }else if(name == \"releasedate\"){\r\n    if(e!=null){\r\n      olddata[name] = new Date(e._d).toLocaleDateString();\r\n    }\r\n  }else if((name==\"booking_status\") || (name===\"movie_status\") || (name === \"movie_type\")  || (name === \"movie_category\") || (name === \"movie_languages\")){\r\n      olddata[name]=e;\r\n  }else\r\n  {\r\n    olddata[name] = e.target.value;\r\n  }\r\n  // console.log(olddata);\r\n  // setOp(false);\r\n  setMyObj1(olddata);\r\n  console.log(obj);\r\n}\r\nconst columns = [\r\n  {\r\n    title: () => <b>Index</b>,\r\n    key: 'Index',\r\n    fixed:\"left\",\r\n    render : (text, record, index) => index+1,\r\n  },{\r\n    title: () => <b>Movie Name</b>,\r\n    dataIndex: 'moviename',\r\n    key: 'moviename',\r\n    defaultSortOrder: 'descend',\r\n    fixed:\"left\",\r\n    sorter: (a, b) => a.moviename.length - b.moviename.length,\r\n  },{\r\n    title: () => <b>Release Date</b>,\r\n    dataIndex: 'releasedate',\r\n    key: 'releasedate',\r\n    defaultSortOrder: 'descend',\r\n    sorter: (a, b) => a.releasedate.length - b.releasedate.length,\r\n  },{\r\n    title: () => <b>Movie Description</b>,\r\n    dataIndex: 'movie_description',\r\n    key: 'movie_description',\r\n    defaultSortOrder: 'descend',\r\n    sorter: (a, b) => a.movie_description.length - b.movie_description.length,\r\n  },{\r\n    title: () => <b>Director Name</b>,\r\n    dataIndex: 'director_name',\r\n    key: 'director_name',\r\n    defaultSortOrder: 'descend',\r\n    sorter: (a, b) => a.director_name.length - b.director_name.length,\r\n  },{\r\n    title: () => <b>Actors Name</b>,\r\n    dataIndex: 'Actors_name',\r\n    key: 'Actors_name',\r\n    defaultSortOrder: 'descend',\r\n    // sorter: (a, b) => a.Actors_name.length - b.Actors_name.length,\r\n  },{\r\n    title: () => <b>Movie Category</b>,\r\n    dataIndex: 'movie_category',\r\n    key: 'movie_category',\r\n    defaultSortOrder: 'descend',\r\n    sorter: (a, b) => a.movie_category.length - b.movie_category.length,\r\n  },{\r\n    title: () => <b>Movie Languages</b>,\r\n    dataIndex: 'movie_languages',\r\n    key: 'movie_languages',\r\n    defaultSortOrder: 'descend',\r\n    sorter: (a, b) => a.movie_languages.length - b.movie_languages.length,\r\n  },{\r\n    title: () => <b>Movie Type</b>,\r\n    dataIndex: 'movie_type',\r\n    key: 'movie_type',\r\n    defaultSortOrder: 'descend',\r\n    // sorter: (a, b) => a.movie_type.length - b.movie_types.length,\r\n  },{\r\n    title: () => <b>Movie Status</b>,\r\n    render : (text, record, index) => <Switch name=\"movie_status\" checked={text.movie_status==\"true\"} style={{color:\"red\"}}/>,\r\n    key: 'movie_status',\r\n    defaultSortOrder: 'descend',\r\n    sorter: (a, b) => a.movie_status.length - b.movie_status.length,\r\n  },{\r\n    title: () => <b>Booking Status</b>,\r\n    render : (text, record, index) => text.booking_status==\"true\"?<div style={{color:\"Green\"}}>Available</div>:<div style={{color:\"Red\"}}>Not Available</div>,\r\n    key: 'booking_status',\r\n    defaultSortOrder: 'descend',\r\n    sorter: (a, b) => a.movie_status - b.movie_status,\r\n  },{\r\n    title: () => <b>Image</b>,\r\n    dataIndex: \"movie_logo\",\r\n    key: 'movie_logo',\r\n    defaultSortOrder: 'descend',\r\n    render:  (text,record) => <img src={\"http://localhost:3001\"+record.movie_logo} height=\"25px\" width=\"25px\" />\r\n    // sorter: (a, b) => a.movie_status - b.movie_status,\r\n  },{\r\n    title: () => <b>Update</b>,\r\n    key: 'Update',\r\n    fixed:\"right\",\r\n    render: (text, record) => (\r\n      <Space size=\"middle\">\r\n        <Button onClick={() => handleUpdate(record._id)} type=\"primary\">UPDATE</Button>\r\n      </Space>\r\n    ),\r\n  },{\r\n    title: () => <b>Delete</b>,\r\n    key: 'Delete',\r\n    fixed:\"right\",\r\n    render: (text, record) => (\r\n      <Space size=\"middle\">\r\n        <Button type=\"danger\" onClick={() => handleShow(record._id)} style={{backgroundColor:\"Red\",borderBlockColor:\"Black\",color:\"White\"}}>Delete</Button>\r\n      </Space>\r\n    ),\r\n  }\r\n];\r\n\r\n  return (\r\n    <>\r\n      <div className={\"Title\"} style={{ marginTop: \"-29px\"}}>\r\n        {/* City List */}\r\n          </div>\r\n      <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"29px\" }}>\r\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item>Movie</Breadcrumb.Item>\r\n        <Breadcrumb.Item>View Movie List</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <div className=\"site-card-border-less-wrapper\">\r\n        <Card title=\"View Movie List\" bordered={true} style={{ width: \"auto\",border:\"5px\" }}>\r\n          <Table columns={columns} dataSource={props.movies} pagination={{ pageSize: 4 }} scroll={{ x: 1300 }}/>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Update Record */}\r\n      <Modal title=\"Update State\"\r\n        visible={ushow}\r\n        onOk={() => SingleSubmit()}\r\n        onCancel={() => SingleClose()}>\r\n       <Form>\r\n                      <Row gutter={0}>\r\n                          <Col span={12} >\r\n                              <Input type=\"hidden\" name=\"_id\" value={obj._id} onChange={(e) => { HandleChange(e, \"_id\") }}/>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Name:-\" \r\n                                      hasFeedback\r\n                                      validateStatus={(error.movie_nameError)?\"error\":\"success\"}\r\n                                      help={error.movie_nameError}\r\n                                      style={{width: \"400px\"}}>\r\n                              <Input type=\"text\" name=\"moviename\" value={obj.moviename} onChange={(e) => { HandleChange(e, \"moviename\") }} placeholder=\"Enter moviename ...\" style={{maxWidth : \"300px\", width:\"100%\"}}/>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Category:-\" rules={[{ required: true, message: 'Please required movie category!' }]} style={{width: \"400px\"}}>\r\n                                  <Select name=\"movie_category\" value={obj.movie_category} onChange={(e)=>HandleChange(e,\"movie_category\")} placeholder=\"------ Select Movie Category-----\" allowClear style={{maxWidth : \"300px\"}}>\r\n                                      <Option value=\"A\" key={\"A\"}>A</Option>\r\n                                      <Option value=\"B\" key={\"B\"}>B</Option>\r\n                                      <Option value=\"C\" key={\"C\"}>C</Option>\r\n                                      <Option value=\"D\" key={\"D\"}>D</Option>\r\n                                  </Select>\r\n                              {/* <Input type=\"text\" name=\"movie_category\" value={obj.movie_category} onChange={(e) => { HandleChange(e, \"movie_category\") }} placeholder=\"Enter movie_category ...\" style={{maxWidth : \"300px\", width:\"100%\"}}/> */}\r\n                          </Form.Item>\r\n                      </Col>\r\n                    </Row>\r\n                      <Row gutter={0}>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Release Date:-\" rules={[{ required: true, message: 'Please required Releasedate!' }]} style={{width: \"400px\"}}>\r\n                              <DatePicker name=\"releasedate\" onChange={(e) => { HandleChange(e, \"releasedate\") }} value={moment(obj.releasedate,\"MM/DD/ YYYY\")} />\r\n                          </Form.Item>\r\n                      </Col>\r\n                        <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Director Name:-\" rules={[{ required: true, message: 'Please required director name!' }]} style={{width: \"400px\"}}>\r\n                              <Input type=\"text\" name=\"director_name\" value={obj.director_name} onChange={(e) => { HandleChange(e, \"director_name\") }} placeholder=\"Enter director_name ...\" style={{maxWidth : \"300px\"}}/>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      </Row>\r\n                      <Row gutter={0}>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Actors Name:-\" rules={[{ required: true, message: 'Please required actors name!' }]} style={{width: \"400px\"}}>\r\n                              <Input type=\"text\" name=\"Actors_name\" value={obj.Actors_name} onChange={(e) => { HandleChange(e, \"Actors_name\") }} placeholder=\"Enter Actors ...\" style={{maxWidth : \"300px\"}}/>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Description:-\" rules={[{ required: true, message: 'Please required movie description!' }]} style={{width: \"400px\"}}>\r\n                              <Input type=\"text\" name=\"movie_description\" value={obj.movie_description} onChange={(e) => { HandleChange(e, \"movie_description\") }} placeholder=\"Enter movie_description ...\" style={{maxWidth : \"300px\"}}/>\r\n                          </Form.Item>\r\n                          </Col>\r\n                      </Row>\r\n                      <Row gutter={0}>\r\n                        <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Type:-\" rules={[{ required: true, message: 'Please required movie type!' }]} style={{width: \"400px\"}}>\r\n                          <Select name=\"movie_type\" value={obj.movie_type} onChange={(e)=>HandleChange(e,\"movie_type\")} placeholder=\"------ Select Movie Type-----\" allowClear style={{maxWidth : \"300px\"}}>\r\n                                      <Option value=\"Action\" key={\"Action\"}>Action</Option>\r\n                                      <Option value=\"Comedy\" key={\"Comedy\"}>Comedy</Option>\r\n                                      <Option value=\"Drama\" key={\"Drama\"}>Drama</Option>\r\n                                      <Option value=\"Fantasy\" key={\"Fantasy\"}>Fantasy</Option>\r\n                                      <Option value=\"Horror\" key={\"Horror\"}>Horror</Option>\r\n                                      <Option value=\"Mystery\" key={\"Mystery\"}>Mystery</Option>\r\n                                      <Option value=\"Romance\" key={\"Romance\"}>Romance</Option>\r\n                                      <Option value=\"Thriller\" key={\"Thriller\"}>Thriller</Option>\r\n                                      <Option value=\"Western\" key={\"Western\"}>Western</Option>\r\n                                      <Option value=\"Crime Film\" key={\"Crime Film\"}>Crime Film</Option>\r\n                                      <Option value=\"Romantic Comedy\" key={\"Romantic Comedy\"}>Romantic Comedy</Option>\r\n                                      <Option value=\"Documentary\" key={\"Documentary\"}>Documentary</Option>\r\n                                  </Select>\r\n                              {/* <Input type=\"text\" name=\"movie_type\" value={obj.movie_type} onChange={(e) => { HandleChange(e, \"movie_type\") }} placeholder=\"Enter movie_type...\" style={{maxWidth : \"300px\"}}/> */}\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Choice Movie Logo:-\" style={{width: \"400px\"}}>\r\n                              <Input type=\"file\" name=\"movie_logo\"  onChange={(e)=>{HandleChange(e,\"movie_logo\")}} placeholder=\"Enter movie_logo ...\" style={{maxWidth : \"100px\"}}>\r\n                              </Input>\r\n                          </Form.Item>\r\n                                <img src={\"http://localhost:3001\"+obj.movie_logo} height=\"25px\" width=\"25px\" />\r\n                          \r\n                      </Col>\r\n                      </Row>\r\n                      <Row gutter={0}>\r\n                        <Col span={12}>\r\n                        <Form.Item {...formItemLayout} label=\"Movie Languages:-\" rules={[{ required: true, message: 'Please required movie Languages !' }]}>\r\n                                  <Select name=\"movie_languages\" value={obj.movie_languages} onChange={(e)=>HandleChange(e,\"movie_languages\")} placeholder=\"------ Select Movie Languages Type-----\" allowClear style={{maxWidth : \"300px\"}}>\r\n                                      <Option value=\"English\" key={\"English\"}>English</Option>\r\n                                      <Option value=\"Hindi\" key={\"Hindi\"}>Hindi</Option>\r\n                                      <Option value=\"Tamil\" key={\"Tamil\"}>Tamil</Option>\r\n                                      <Option value=\"Gujarati\" key={\"Gujarati\"}>Gujarati</Option>\r\n                                      <Option value=\"Telugu\" key={\"Telugu\"}>Telugu</Option>\r\n                                      <Option value=\"Bengali\" key={\"Bengali\"}>Bengali</Option>\r\n                                      <Option value=\"Marathi\" key={\"Marathi\"}>Marathi</Option>\r\n                                      <Option value=\"Telugu\" key={\"Telugu\"}>Telugu</Option>\r\n                                      <Option value=\"Bhojpuri\" key={\"Bhojpuri\"}>Bhojpuri</Option>\r\n                                  </Select>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      </Row>\r\n                      \r\n                      <Row gutter={0}>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Status:-\">\r\n                          <Switch name=\"movie_status\" checked={Boolean(obj.movie_status)==true} onChange={(e) => { HandleChange(e, \"movie_status\") }}  style={{ maxWidth: \"300px\" }}/>\r\n                              {/* <Input type=\"text\" name=\"movie_status\" value={obj.movie_status} onChange={(e) => { HandleChange(e, \"movie_status\") }} placeholder=\"Enter movie_status ...\" style={{ maxWidth: \"300px\" }} /> */}\r\n                          </Form.Item>\r\n                          </Col>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Booking Status:-\">\r\n                            <Switch name=\"booking_status\" checked={Boolean(obj.booking_status)==true} onChange={(e) => { HandleChange(e, \"booking_status\") }}  style={{ maxWidth: \"300px\" }}>\r\n                                \r\n                            </Switch>\r\n                              {/* <Input type=\"text\" name=\"booking_status\" value={obj.booking_status} onChange={(e) => { HandleChange(e, \"booking_status\") }} placeholder=\"Enter booking_status ...\" style={{maxWidth : \"300px\"}}/> */}\r\n                          </Form.Item>\r\n                          </Col>\r\n                      </Row>                          \r\n                      </Form>\r\n      </Modal>\r\n\r\n      {/* Delete Record  */}\r\n      <Modal title=\"Are you sure!\"\r\n        visible={show}\r\n        onOk={() => deleteHandler(ids)}\r\n        onCancel={() => handleClose()}>\r\n        Do you want to delete this state?\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps =  (state) => ({\r\n  err:state.movieReducer.error,\r\n  Loading:state.movieReducer.loading,\r\n  movies:state.movieReducer.movies,\r\n  singlemovie:state.movieReducer.singlemovie,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n  return{\r\n    fetchmoviedata:()=>dispatch(fetchmoviedata()),\r\n    deletemoviedata:(_id)=>dispatch(deletemoviedata(_id)),\r\n    updatemoviedata:(postdata,put) => dispatch(updatemoviedata(postdata,put)),\r\n    singlemovieDataFetch:(id)=>dispatch(singlemovieDataFetch(id))\r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(MovieList);","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\common\\Header.js",["327","328","329","330","331","332"],"import React,{useState, useEffect} from 'react';\r\nimport { logout} from '../../store/action/userAction';\r\nimport { Link } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport Logo from '../../Movie_logo/logo1.png'\r\nimport { Layout, Menu,Dropdown,Modal,Form,Input } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport {changepassword} from '../../store/action/userAction';\r\n\r\nimport {\r\n  MenuUnfoldOutlined,\r\n  MenuFoldOutlined,\r\n  UserOutlined,\r\n  PieChartOutlined,LockOutlined,LogoutOutlined\r\n} from '@ant-design/icons';\r\n\r\nconst { Header, Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nconst SiderDemo = (props) => {\r\n  \r\n    const [active,setActive] =useState(false);\r\n    \r\n      const [error,setError] =useState({\r\n        IsValid:true,        \r\n        confirmError:\"\",\r\n        newError:\"\",\r\n        passwordError:\"\"\r\n      });\r\n      const [show, setShow] = useState(false);\r\n\r\n      useEffect(() =>{\r\n        if(props.err.length!=0)\r\n        {\r\n          setError({\r\n            passwordError:props.err,\r\n          })\r\n          setActive(true);\r\n          console.log(active);\r\n        }\r\n      },[props.err])\r\n\r\n      const [obj,setMyObj1] =useState({\r\n        password:\"\",\r\n        new_password:\"\",\r\n        confirm_password:\"\"\r\n      });      \r\n      \r\n      const handleClose = () => {\r\n        setShow(false);\r\n      }\r\n      const handleShow = async () => {\r\n        setShow(true);\r\n      }\r\n      \r\n      const changePassword = async()=>{\r\n          let errors = { ...error, IsValid : true };\r\n            if(!obj.new_password || !obj.password || !obj.confirm_password ){\r\n              errors.confirmError = \"\";\r\n              errors.newError = \"\";\r\n              errors.passwordError = \"\";\r\n              if(!obj.new_password){\r\n                errors.IsValid = false;\r\n                errors.newError = \"Please enter new password !!\"\r\n              }\r\n              if(!obj.password){\r\n                errors.IsValid = false;\r\n                errors.passwordError = \"Please enter old password !!\"\r\n              }\r\n              if(!obj.confirm_password){\r\n                errors.IsValid = false;\r\n                errors.confirmError = \"Please enter confirm password !!\"\r\n              }\r\n            }else if(obj.new_password!=obj.confirm_password){\r\n                    errors.newError = \"\";\r\n                    errors.passwordError = \"\";\r\n                  if(obj.new_password!=obj.confirm_password){\r\n                    errors.IsValid = false;\r\n                    errors.confirmError = \"Confirm Password Is Not Matched\"\r\n                  }\r\n            }else{\r\n              errors.confirmError = \"\";\r\n              errors.newError = \"\";\r\n              errors.passwordError = \"\";\r\n              errors.IsValid=true;\r\n            }\r\n            setError(errors);\r\n            if(errors.IsValid==true){\r\n              try {\r\n                await props.changepassword(obj.password,obj.new_password);\r\n                setShow(false);\r\n              } catch {\r\n\r\n              }\r\n            }   \r\n      }\r\n      \r\n      const HandleChange = (e, name) => {\r\n        let olddata = { ...obj };\r\n        olddata[name] = e.target.value;    \r\n        setMyObj1(olddata);\r\n      }\r\n\r\n      const HandleLogOut = async () =>{\r\n        await props.logout();\r\n      }\r\n      const[collapsed,setCollapsed] = useState(false);\r\n      \r\n      const toggle = () => {\r\n        setCollapsed(!collapsed);\r\n      };\r\n      \r\n      const userMenu = (\r\n        <Menu>\r\n          <Menu.Item key=\"admin\"><h4><UserOutlined /> Welcome, Admin</h4></Menu.Item>  \r\n          <Menu.Item key=\"/admin/changepassword\" onClick={() => handleShow()}><LockOutlined />Change Password</Menu.Item>\r\n          <Menu.Divider />\r\n          <Menu.Item key=\"/admin/logout\" onClick={() => HandleLogOut()}><LogoutOutlined />Logout</Menu.Item>\r\n        </Menu>\r\n      );\r\n    return (\r\n      <Layout style={{minHeight:\"100vh\"}}>\r\n          <Sider trigger={null} collapsible collapsed={collapsed}>\r\n              <div className=\"logo\"><img src={Logo} style={{height: \"60px\",width: \"60px\",marginLeft:\"05px\"}}/></div>\r\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\r\n          <Menu.Item key=\"/dashboard\" icon={<PieChartOutlined />}>\r\n          <Link to=\"/dashboard\">Dashboard</Link>\r\n            </Menu.Item>\r\n            <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"State\">\r\n              <Menu.Item key=\"/state/stateAdd\"><Link to=\"/state/stateAdd\">Add State</Link></Menu.Item>\r\n              <Menu.Item key=\"/state\"><Link to=\"/state\">View State</Link></Menu.Item>\r\n            </SubMenu>\r\n            <SubMenu key=\"sub2\" icon={<UserOutlined />} title=\"City\">\r\n              <Menu.Item key=\"/city/cityAdd\"><Link to=\"/city/cityAdd\">Add City</Link></Menu.Item>\r\n              <Menu.Item key=\"/city\"><Link to=\"/city\">View City</Link></Menu.Item>\r\n            </SubMenu>\r\n            <SubMenu key=\"sub3\" icon={<UserOutlined />} title=\"Movie\">\r\n              <Menu.Item key=\"/movie/movieAdd\"><Link to=\"/movie/movieAdd\">Add Movie</Link></Menu.Item>\r\n              <Menu.Item key=\"/movie\"><Link to=\"/movie\">View Movies</Link></Menu.Item>\r\n            </SubMenu>\r\n            <SubMenu key=\"sub4\" icon={<UserOutlined />} title=\"User/Theater\">\r\n              <Menu.Item key=\"/users\"><Link to=\"/users\">View Users</Link></Menu.Item>\r\n              <Menu.Item key=\"/theaters\"><Link to=\"/theaters\">View Theater</Link></Menu.Item>\r\n            </SubMenu>\r\n          </Menu>\r\n        </Sider>\r\n       \r\n        <Layout className=\"site-layout\">\r\n          <Header className=\"site-layout-background\" style={{ padding: 0,color: \"white\" }}>\r\n            {React.createElement(collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\r\n              className: 'trigger',\r\n              onClick: toggle,color:\"red\"\r\n            })}\r\n          <Dropdown.Button\r\n                style={{ float: 'right',marginTop: \"20px\", marginRight: \"13px\" }}\r\n                overlay={userMenu}\r\n                icon={\r\n                  <UserOutlined\r\n                  style={{\r\n                    marginTop: \"-3px\",\r\n                    fontSize: '28px',\r\n                    backgroundColor: '#f0f0f0',\r\n                    borderRadius: '50%',\r\n                  }}\r\n                  />\r\n                }\r\n                ></Dropdown.Button>;\r\n          </Header>\r\n            {props.content}\r\n          </Layout>\r\n              <Modal title=\"Are you sure!\"\r\n              visible={show}\r\n              onOk={() => changePassword()}\r\n              onCancel={() => handleClose()}>\r\n                \r\n                  <Form>\r\n                    <Form.Item label=\"Enter Old Password:-\"\r\n                        hasFeedback\r\n                        style={{    marginLeft:\"30px\"}}\r\n                        validateStatus={(error.passwordError)?\"error\":\"success\"}\r\n                        help={error.passwordError}>                  \r\n                          <Input type=\"password\" style={{ backgroundColor: \"#e2e2e2\", color: \"#463334\" }} name=\"password\"  onChange={(e) => HandleChange(e, \"password\")} placeholder=\"Enter old password ...\" />\r\n                        </Form.Item>\r\n                    <Form.Item label=\"Enter New Password:-\"\r\n                        hasFeedback\r\n                        style={{    marginLeft:\"24px\"}}\r\n                        validateStatus={(error.newError)?\"error\":\"success\"}\r\n                        help={error.newError}>                  \r\n                        <Input type=\"password\" style={{ backgroundColor: \"#e2e2e2\", color: \"#463334\" }} name=\"new_password\"  onChange={(e) => HandleChange(e, \"new_password\")} placeholder=\"Enter New password ...\" />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Enter Confirm Password:-       \"\r\n                        hasFeedback\r\n                        style={{    marginLeft:\"4px\"}}\r\n                        validateStatus={(error.confirmError)?\"error\":\"success\"}\r\n                        help={error.confirmError}>                  \r\n                        <Input type=\"password\" style={{ backgroundColor: \"#e2e2e2\", color: \"#463334\" }} name=\"confirm_password\"  onChange={(e) => HandleChange(e, \"confirm_password\")} placeholder=\"Enter Confirm password ...\" />\r\n                    </Form.Item>\r\n                </Form>\r\n              </Modal>\r\n          </Layout>\r\n          \r\n    );\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  err: state.userReducer.error1,\r\n  Loading: state.userReducer.loading,\r\n  singleuser2: state.userReducer.singleuser2,\r\n})\r\nconst mapDispatchToProps = dispatch =>{\r\n  return{\r\n    logout:()=>dispatch(logout()),\r\n    changepassword:(pass,newpass)=> dispatch(changepassword(pass,newpass))\r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(SiderDemo);","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\common\\HeaderTheater.js",["333","334","335","336","337","338","339","340","341","342"],"import React,{useState,useEffect} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport { Layout, Menu,Dropdown,Modal,Form,Input,Breadcrumb } from 'antd';\r\nimport { logout} from '../../store/action/userAction';\r\nimport {changepassword} from '../../store/action/userAction';\r\nimport {\r\n  DesktopOutlined,\r\n  PieChartOutlined,\r\n  FileOutlined,\r\n  TeamOutlined,\r\n  UserOutlined,\r\n  LockOutlined,\r\n  LogoutOutlined\r\n} from '@ant-design/icons';\r\nimport Logo from '../../Movie_logo/logo1.png'\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nconst TheaterHeader = (props) => {\r\n\r\n  \r\n  const [active,setActive] =useState(false);\r\n    \r\n      const [error,setError] =useState({\r\n        IsValid:true,        \r\n        confirmError:\"\",\r\n        newError:\"\",\r\n        passwordError:\"\"\r\n      });\r\n      const [show, setShow] = useState(false);\r\n\r\n      useEffect(() =>{\r\n        if(props.err.length!=0)\r\n        {\r\n          setError({\r\n            passwordError:props.err,\r\n          })\r\n          setActive(true);\r\n          console.log(active);\r\n        }\r\n      },[props.err])\r\n\r\n      const [obj,setMyObj1] =useState({\r\n        password:\"\",\r\n        new_password:\"\",\r\n        confirm_password:\"\"\r\n      });      \r\n      \r\n      const handleClose = () => {\r\n        setShow(false);\r\n      }\r\n      const handleShow = async () => {\r\n        setShow(true);\r\n      }\r\n      \r\n      const changePassword = async()=>{\r\n          let errors = { ...error, IsValid : true };\r\n            if(!obj.new_password || !obj.password || !obj.confirm_password ){\r\n              errors.confirmError = \"\";\r\n              errors.newError = \"\";\r\n              errors.passwordError = \"\";\r\n              if(!obj.new_password){\r\n                errors.IsValid = false;\r\n                errors.newError = \"Please enter new password !!\"\r\n              }\r\n              if(!obj.password){\r\n                errors.IsValid = false;\r\n                errors.passwordError = \"Please enter old password !!\"\r\n              }\r\n              if(!obj.confirm_password){\r\n                errors.IsValid = false;\r\n                errors.confirmError = \"Please enter confirm password !!\"\r\n              }\r\n            }else if(obj.new_password!=obj.confirm_password){\r\n                    errors.newError = \"\";\r\n                    errors.passwordError = \"\";\r\n                  if(obj.new_password!=obj.confirm_password){\r\n                    errors.IsValid = false;\r\n                    errors.confirmError = \"Confirm Password Is Not Matched\"\r\n                  }\r\n            }else{\r\n              errors.confirmError = \"\";\r\n              errors.newError = \"\";\r\n              errors.passwordError = \"\";\r\n              errors.IsValid=true;\r\n            }\r\n            setError(errors);\r\n            if(errors.IsValid==true){\r\n              try {\r\n                await props.changepassword(obj.password,obj.new_password);\r\n                setShow(false);\r\n              } catch {\r\n\r\n              }\r\n            }   \r\n      }\r\n      \r\n      const HandleChange = (e, name) => {\r\n        let olddata = { ...obj };\r\n        olddata[name] = e.target.value;    \r\n        setMyObj1(olddata);\r\n      }\r\n\r\n      const HandleLogOut = async () =>{\r\n        await props.logout();\r\n      }\r\n      const[collapsed,setCollapsed] = useState(false);\r\n      \r\n    // const toggle = () => {\r\n    //   setCollapsed(!collapsed);\r\n    // };\r\n\r\n    const onCollapse=() =>{\r\n        if(collapsed==true){\r\n            setCollapsed(false);\r\n        }else{\r\n            setCollapsed(true);\r\n        }\r\n    }\r\n\r\n    const userMenu = (\r\n      <Menu>\r\n        <Menu.Item key=\"admin\"><h4><UserOutlined /> Welcome, Admin</h4></Menu.Item>  \r\n        <Menu.Item key=\"/theater/changepassword\" onClick={() => handleShow()}><LockOutlined />Change Password</Menu.Item>\r\n        <Menu.Divider />\r\n        <Menu.Item key=\"/theater/logout\" onClick={() => HandleLogOut()}><LogoutOutlined />Logout</Menu.Item>\r\n      </Menu>\r\n    );\r\n\r\n    return (\r\n        <Layout style={{ minHeight: '100vh',backgroundColor:\"#287688\" }}>\r\n        <Sider collapsible collapsed={collapsed} onCollapse={()=>onCollapse()} style={{backgroundColor:\"#800000\"}}>\r\n          <div className=\"logo\" /><img src={Logo} height=\"80px\" width=\"50px\"></img>\r\n          <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\" style={{backgroundColor:\"#800000\"}}>\r\n            <Menu.Item key=\"/theater/dashboard\"  icon={<PieChartOutlined />} >\r\n                <Link to=\"/theater/dashboard\">Dashboard</Link>\r\n            </Menu.Item>\r\n            <SubMenu key=\"Screen\" icon={<UserOutlined />} title=\"Screen\">\r\n              <Menu.Item key=\"4\"><Link to=\"/theater/addScreen\">Add Scrren</Link></Menu.Item>\r\n              <Menu.Item key=\"3\"><Link to=\"/theater/screenList\">View Screen</Link></Menu.Item>\r\n            </SubMenu>\r\n            <SubMenu key=\"sub2\" icon={<TeamOutlined />} title=\"Theater Screen\">\r\n              <Menu.Item key=\"6\"><Link to=\"/theater/addtscreen\">Add Theater Screen</Link></Menu.Item>\r\n              <Menu.Item key=\"8\"><Link to=\"/theater/tscreenList\">View Theater Screen</Link></Menu.Item>\r\n            </SubMenu>\r\n            <Menu.Item key=\"9\" icon={<FileOutlined />}>\r\n              Files\r\n            </Menu.Item>\r\n          </Menu>\r\n        </Sider>\r\n        <Layout className=\"site-layout\">\r\n          <Header className=\"site-layout-background\" style={{ padding: 0,backgroundColor:\"#d06a6a\" }} >\r\n          <Dropdown.Button\r\n                style={{ float: 'right',marginTop: \"20px\", marginRight: \"13px\" }}\r\n                overlay={userMenu}\r\n                icon={\r\n                  <UserOutlined\r\n                  style={{\r\n                    marginTop: \"-3px\",\r\n                    fontSize: '28px',\r\n                    backgroundColor: '#f0f0f0',\r\n                    borderRadius: '50%',\r\n                  }}\r\n                  />\r\n                }\r\n                ></Dropdown.Button>\r\n          </Header>\r\n          {props.content};\r\n          <Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>\r\n        </Layout>\r\n        <Modal title=\"Are you sure!\"\r\n              visible={show}\r\n              onOk={() => changePassword()}\r\n              onCancel={() => handleClose()}>\r\n                  <Form>\r\n                    <Form.Item label=\"Enter Old Password:-\"\r\n                        hasFeedback\r\n                        style={{    marginLeft:\"30px\"}}\r\n                        validateStatus={(error.passwordError)?\"error\":\"success\"}\r\n                        help={error.passwordError}>                  \r\n                          <Input type=\"password\" style={{ backgroundColor: \"#e2e2e2\", color: \"#463334\" }} name=\"password\"  onChange={(e) => HandleChange(e, \"password\")} placeholder=\"Enter old password ...\" />\r\n                        </Form.Item>\r\n                    <Form.Item label=\"Enter New Password:-\"\r\n                        hasFeedback\r\n                        style={{    marginLeft:\"24px\"}}\r\n                        validateStatus={(error.newError)?\"error\":\"success\"}\r\n                        help={error.newError}>                  \r\n                        <Input type=\"password\" style={{ backgroundColor: \"#e2e2e2\", color: \"#463334\" }} name=\"new_password\"  onChange={(e) => HandleChange(e, \"new_password\")} placeholder=\"Enter New password ...\" />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Enter Confirm Password:-       \"\r\n                        hasFeedback\r\n                        style={{    marginLeft:\"4px\"}}\r\n                        validateStatus={(error.confirmError)?\"error\":\"success\"}\r\n                        help={error.confirmError}>                  \r\n                        <Input type=\"password\" style={{ backgroundColor: \"#e2e2e2\", color: \"#463334\" }} name=\"confirm_password\"  onChange={(e) => HandleChange(e, \"confirm_password\")} placeholder=\"Enter Confirm password ...\" />\r\n                    </Form.Item>\r\n                </Form>\r\n              </Modal>\r\n      </Layout>\r\n        );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  err: state.userReducer.error1,\r\n  Loading: state.userReducer.loading,\r\n  singleuser2: state.userReducer.singleuser2,\r\n})\r\nconst mapDispatchToProps = dispatch =>{\r\n  return{\r\n    logout:()=>dispatch(logout()),\r\n    changepassword:(pass,newpass)=> dispatch(changepassword(pass,newpass))\r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TheaterHeader);","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\Users_Theater_List\\allUsersList.js",["343","344","345","346","347"],"import React,{useEffect,useState} from 'react';\r\nimport {getAllUser,fetchProfile,updateProfile} from '../../store/action/userAction';\r\nimport {connect} from 'react-redux';\r\nimport '../state.css';\r\nimport { Table, Breadcrumb, Card,Space,Button,Modal } from 'antd';\r\nconst AllUsersList = (props) => {\r\n  \r\n  const [show, setShow] = useState(false);\r\n  const [ids, setIds] = useState(false);  \r\n  useEffect(()=>{  \r\n      props.getAllUser();\r\n    },[props.getAllUser,props.singleuser1])\r\n\r\n  const [obj,setMyObj] = useState({\r\n    user_name:\"\",\r\n    password:\"\",\r\n    email:\"\",\r\n    gender:\"Male\",\r\n    photo1:\"\",\r\n    state_id:\"\",\r\n    city_id:\"\",\r\n    group_id:\"\",\r\n    is_active:\"\"\r\n  });\r\n  if(ids==true){\r\n        setIds(false);\r\n  }\r\n\r\n  if (obj.user_name!=\"\"){\r\n  }\r\n  const deleteHandler = async (id) => {\r\n    if(props.singleuser1.user_name){\r\n        let olddata={...obj};\r\n        olddata._id=props.singleuser1._id;\r\n        olddata.user_name = props.singleuser1.user_name;\r\n        olddata.password = props.singleuser1.password;\r\n        olddata.email = props.singleuser1.email;\r\n        olddata.gender = props.singleuser1.gender;\r\n        olddata.state_id = props.singleuser1.state_id;\r\n        olddata.photo1 = props.singleuser1.photo1;\r\n        olddata.city_id = props.singleuser1.city_id;\r\n        olddata.group_id = props.singleuser1.group_id;\r\n            if(props.singleuser1.is_active==\"1\"){ \r\n              olddata.is_active = \"0\";\r\n            }else{\r\n              olddata.is_active = \"1\";\r\n            }\r\n            setMyObj(olddata);\r\n            console.log(olddata);\r\n            props.updateProfile(olddata._id,olddata);\r\n    }\r\n    setShow(false);\r\n  }\r\n\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = async (id) => {\r\n    await props.fetchProfile(id);\r\n    setShow(true);\r\n    setIds(id);\r\n  }\r\n\r\nconst columns = [\r\n  {\r\n    title: () => <b>Index</b>,\r\n    key: 'Index',\r\n    fixed:\"left\",\r\n    render : (text, record, index) => index+1,\r\n  },{\r\n    title: () => <b>User Name</b>,\r\n    dataIndex: 'user_name',\r\n    key: 'user_name',\r\n    defaultSortOrder: 'descend',\r\n    fixed:\"left\",\r\n    sorter: (a, b) => a.user_name.length - b.user_name.length,\r\n  },{\r\n    title: () => <b>Email</b>,\r\n    dataIndex: 'email',\r\n    key: 'email',\r\n    defaultSortOrder: 'descend',\r\n    sorter: (a, b) => a.email.length - b.email.length,\r\n  },{\r\n    title: () => <b>Gender</b>,\r\n    dataIndex: 'gender',\r\n    key: 'gender',\r\n    defaultSortOrder: 'descend',\r\n    sorter: (a, b) => a.gender.length - b.gender.length,\r\n  },{\r\n      title: () => <b>City Name</b>,\r\n      key: 'city_id',\r\n      defaultSortOrder: 'descend',\r\n      render: s => s.city_id.city_name,\r\n      sorter: (a, b) => a.city_id.city_name.length - b.city_id.city_name.length,\r\n},{\r\n    title: () => <b>State Name</b>,\r\n    key: 'state_id',\r\n    defaultSortOrder: 'descend',\r\n    render: s => s.state_id.state_name,\r\n    sorter: (a, b) => a.state_id.state_name.length - b.state_id.state_name.length,\r\n  },{\r\n    title: () => <b>Status</b>,\r\n    key: 'is_active',\r\n    defaultSortOrder: 'descend',\r\n    // render: ,\r\n    render: (text, record) => (\r\n      <Space size=\"middle\">\r\n        {record.is_active==\"1\"?<Button type='danger' onClick={() => handleShow(record._id)} style={{ backgroundColor: '#005f00', borderBlockColor: 'Black', color: 'White' }}>Active</Button>:<Button type='danger' onClick={() => handleShow(record._id)} style={{ backgroundColor: '#820000', borderBlockColor: 'Black', color: 'White' }}>Block</Button>}\r\n        {/* <Button type=\"danger\" onClick={() => handleShow(record._id)} style={{ backgroundColor: \"Green\", borderBlockColor: \"Black\", color: \"White\" }}>{record.is_active==\"1\"?\"Active\":\"Block\"}</Button> */}\r\n      </Space>\r\n    ),\r\n  }\r\n];\r\n\r\n  return (\r\n    <>\r\n      <div className={\"Title\"} style={{ marginTop: \"-29px\"}}>\r\n          </div>\r\n      <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"29px\" }}>\r\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item>All User</Breadcrumb.Item>\r\n        <Breadcrumb.Item>View Users List</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <div className=\"site-card-border-less-wrapper\">\r\n        <Card title=\"View Users List\" bordered={true} style={{ width: \"auto\",border:\"5px\" }}>\r\n          <Table columns={columns} dataSource={props.users} pagination={{ pageSize: 4 }} />\r\n        </Card>\r\n      </div>\r\n\r\n      <Modal title=\"Are you sure!\"\r\n        visible={show}\r\n        onOk={() => deleteHandler(ids)}\r\n        onCancel={() => handleClose()}>\r\n        Do you want to change this state?\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps =  (state) => ({\r\n  err:state.movieReducer.error,\r\n  users:state.userReducer.users,\r\n  singleuser1:state.userReducer.singleuser1\r\n})\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n  return{\r\n    updateProfile:(_id,put)=>dispatch(updateProfile(_id,put)),\r\n    fetchProfile:(_id)=>dispatch(fetchProfile(_id)),\r\n    getAllUser:()=>dispatch(getAllUser())\r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(AllUsersList);","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\Users_Theater_List\\allTheaterList.js",["348","349","350","351"],"import React,{useEffect,useState} from 'react';\r\nimport {getAllTheater,fetchProfile,updateProfile} from '../../store/action/userAction';\r\nimport {connect} from 'react-redux';\r\nimport '../state.css';\r\nimport { Table, Breadcrumb, Card,Space,Button,Modal } from 'antd';\r\nconst AllUsersList = (props) => {\r\n  \r\n  const [show, setShow] = useState(false);\r\n  const [ids, setIds] = useState(false);  \r\n  useEffect(()=>{  \r\n      props.getAllTheater();\r\n    },[props.getAllTheater,props.singleuser1])\r\n\r\n  const [obj,setMyObj] = useState({\r\n    user_name:\"\",\r\n    password:\"\",\r\n    email:\"\",\r\n    gender:\"Male\",\r\n    photo1:\"\",\r\n    state_id:\"\",\r\n    city_id:\"\",\r\n    group_id:\"\",\r\n    is_active:\"\"\r\n  });\r\n  if(ids==true){\r\n        setIds(false);\r\n  }\r\n\r\n  const deleteHandler = async (id) => {\r\n    if(props.singleuser1.user_name){\r\n        let olddata={...obj};\r\n        olddata._id=props.singleuser1._id;\r\n        olddata.user_name = props.singleuser1.user_name;\r\n        olddata.cinema_name = props.singleuser1.cinema_name;\r\n        olddata.password = props.singleuser1.password;\r\n        olddata.email = props.singleuser1.email;\r\n        olddata.gender = props.singleuser1.gender;\r\n        olddata.state_id = props.singleuser1.state_id;\r\n        olddata.photo1 = props.singleuser1.photo1;\r\n        olddata.city_id = props.singleuser1.city_id;\r\n        olddata.group_id = props.singleuser1.group_id;\r\n            if(props.singleuser1.is_active==\"1\"){ \r\n              olddata.is_active = \"0\";\r\n            }else{\r\n              olddata.is_active = \"1\";\r\n            }\r\n            setMyObj(olddata);\r\n            console.log(olddata);\r\n            props.updateProfile(olddata._id,olddata);\r\n    }\r\n    setShow(false);\r\n  }\r\n\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = async (id) => {\r\n    await props.fetchProfile(id);\r\n    setShow(true);\r\n    setIds(id);\r\n  }\r\n\r\nconst columns = [\r\n  {\r\n    title: () => <b>Index</b>,\r\n    key: 'Index',\r\n    fixed:\"left\",\r\n    render : (text, record, index) => index+1,\r\n  },{\r\n    title: () => <b>Cinema Name</b>,\r\n    dataIndex: 'cinema_name',\r\n    key: 'cinema_name',\r\n    defaultSortOrder: 'descend',\r\n  },{\r\n    title: () => <b>User Name</b>,\r\n    dataIndex: 'user_name',\r\n    key: 'user_name',\r\n    defaultSortOrder: 'descend',\r\n    fixed:\"left\",\r\n    sorter: (a, b) => a.user_name.length - b.user_name.length,\r\n  },{\r\n    title: () => <b>Email</b>,\r\n    dataIndex: 'email',\r\n    key: 'email',\r\n    defaultSortOrder: 'descend',\r\n    sorter: (a, b) => a.email.length - b.email.length,\r\n  },{\r\n    title: () => <b>Gender</b>,\r\n    dataIndex: 'gender',\r\n    key: 'gender',\r\n    defaultSortOrder: 'descend',\r\n    sorter: (a, b) => a.gender.length - b.gender.length,\r\n  },{\r\n      title: () => <b>City Name</b>,\r\n      key: 'city_id',\r\n      defaultSortOrder: 'descend',\r\n      render: s => s.city_id.city_name,\r\n      sorter: (a, b) => a.city_id.city_name.length - b.city_id.city_name.length,\r\n},{\r\n    title: () => <b>State Name</b>,\r\n    key: 'state_id',\r\n    defaultSortOrder: 'descend',\r\n    render: s => s.state_id.state_name,\r\n    sorter: (a, b) => a.state_id.state_name.length - b.state_id.state_name.length,\r\n  },{\r\n    title: () => <b>Status</b>,\r\n    key: 'is_active',\r\n    defaultSortOrder: 'descend',\r\n    // render: ,\r\n    render: (text, record) => (\r\n      <Space size=\"middle\">\r\n        {record.is_active==\"1\"?<Button type='danger' onClick={() => handleShow(record._id)} style={{ backgroundColor: '#005f00', borderBlockColor: 'Black', color: 'White' }}>Active</Button>:<Button type='danger' onClick={() => handleShow(record._id)} style={{ backgroundColor: '#820000', borderBlockColor: 'Black', color: 'White' }}>Block</Button>}\r\n      </Space>\r\n    ),\r\n  }\r\n];\r\n\r\n  return (\r\n    <>\r\n      <div className={\"Title\"} style={{ marginTop: \"-29px\"}}>\r\n          </div>\r\n      <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"29px\" }}>\r\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item>All Theater</Breadcrumb.Item>\r\n        <Breadcrumb.Item>View Theaters List</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <div className=\"site-card-border-less-wrapper\">\r\n        <Card title=\"View Theaters List\" bordered={true} style={{ width: \"auto\",border:\"5px\" }}>\r\n          <Table columns={columns} dataSource={props.users} pagination={{ pageSize: 4 }} />\r\n        </Card>\r\n      </div>\r\n\r\n      <Modal title=\"Are you sure!\"\r\n        visible={show}\r\n        onOk={() => deleteHandler(ids)}\r\n        onCancel={() => handleClose()}>\r\n        Do you want to change this state?\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps =  (state) => ({\r\n  err:state.movieReducer.error,\r\n  users:state.userReducer.users,\r\n  singleuser1:state.userReducer.singleuser1\r\n})\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n  return{\r\n    updateProfile:(_id,put)=>dispatch(updateProfile(_id,put)),\r\n    fetchProfile:(_id)=>dispatch(fetchProfile(_id)),\r\n    getAllTheater:()=>dispatch(getAllTheater())\r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(AllUsersList);","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\TheaterPanel\\dashboard.js",["352","353","354","355","356"],"import React, { Component, useEffect } from \"react\";\r\nimport {connect} from 'react-redux';\r\nimport {fetchDashboradRecord} from '../../store/action/userAction';\r\nimport {  Row, Col,Card, CardGroup,CardDeck } from \"react-bootstrap\";\r\n// import {MDBIcon} from 'react/jsx'\r\nimport { SiApachesolr,SiAtAndT,SiAdobecreativecloud,SiCoffeescript } from \"react-icons/si\";\r\n\r\nconst Dashboard = (props) => {\r\n\r\n  // render: function() {\r\n    return (\r\n      <>\r\n      <div >\r\n      <CardDeck style={{    display: \"flex\"}}>\r\n    <Card border=\"Primary\" style={{ width: '18rem',backgroundColor:\"#1e9ee8\",color:\"White\",padding:\"20px\",\r\n    marginLeft: \"20px\" }} >\r\n      <Card.Header>Total State</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title></Card.Title>\r\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}></Card.Text>\r\n        <SiCoffeescript style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>\r\n      </Card.Body>\r\n    </Card>\r\n    <Card border=\"Success\" style={{ width: '18rem',backgroundColor:\"#b9ad16\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\r\n      <Card.Header>Total City</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title></Card.Title>\r\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}></Card.Text>\r\n        <SiAtAndT style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>  \r\n      </Card.Body>\r\n    </Card>\r\n    <Card border=\"Success\" style={{ width: '18rem',backgroundColor:\"#25b125\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\r\n      <Card.Header>Total Movies</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title></Card.Title>\r\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}></Card.Text>\r\n        <SiApachesolr style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>        \r\n      </Card.Body>\r\n    </Card>\r\n    <Card bg=\"danger\" style={{ width: '18rem',backgroundColor:\"#f52e2e\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\r\n      <Card.Header>Total Theater</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title></Card.Title>\r\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}></Card.Text>\r\n        <SiAdobecreativecloud style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>  \r\n      </Card.Body>\r\n    </Card>\r\n    </CardDeck>\r\n    </div>\r\n     </>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n  return{\r\n    fetchDashboradRecord:()=>dispatch(fetchDashboradRecord())\r\n  }\r\n}\r\nexport default connect(null,mapDispatchToProps)(Dashboard);","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\TheaterPanel\\screenList.js",["357","358"],"import React, { useState, useEffect } from 'react';\r\nimport { singlescreenrecord,updatescreen,deletescreen,getscreen } from '../../store/action/screenAction';\r\nimport { connect } from 'react-redux';\r\nimport '../state.css';\r\nimport { Table, Space, Button, Breadcrumb, Card, Form, Modal, Input } from 'antd';\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 10,\r\n  },\r\n};\r\n\r\nconst ScreenList = (props) => {\r\n  const [form] = Form.useForm();\r\n  const [error,setError] = useState({\r\n    IsValid:false,\r\n    Screen_nameERROR:\"\"\r\n})\r\n  const [obj, setMyObj1] = useState({\r\n    _id: \"\",\r\n    screen_name: \"\",\r\n    rows: \"\",\r\n    cols:\"\"\r\n  })\r\n  const [ids, setIds] = useState(\"\");\r\n  const [show, setShow] = useState(false);\r\n  const [ushow, usetShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    props.getscreen();\r\n    \r\n    console.log(props.singlescreen);\r\n    if (props.singlescreen.screen_name) {\r\n      let olddata={...obj};\r\n      olddata.screen_name = props.singlescreen.screen_name;\r\n      olddata._id = props.singlescreen._id;\r\n      olddata.rows=props.singlescreen.rows;\r\n      olddata.cols=props.singlescreen.cols;\r\n      setMyObj1(olddata);\r\n    }\r\n  }, [props.getscreen,props.singlescreen])\r\n\r\n  const deleteHandler = async (id) => {\r\n    await props.deletescreen(id);\r\n    setShow(false);\r\n  }\r\n\r\n  const SingleSubmit = async () => {\r\n    let errors = { ...error, IsValid : true };\r\n    if(!obj.screen_name || obj.screen_name === \"\")\r\n    {\r\n      \r\n      if(!obj.screen_name || obj.screen_name === \"\"){\r\n        errors.IsValid = false;\r\n        errors.Screen_nameERROR = \"Screenname Is Required \"\r\n      }\r\n\r\n    }else{\r\n        errors.Screen_nameERROR = \"\"\r\n    }\r\n      setError(errors);\r\n      if(errors.IsValid==true){\r\n          console.log(obj);\r\n        await props.updatescreen(obj._id, obj);\r\n        // setOp(true);\r\n        usetShow(false);\r\n        obj._id = props.singlescreen._id;\r\n        obj.screen_name = \"\";\r\n      }\r\n    \r\n  }\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = (id) => {\r\n    setShow(true);\r\n    setIds(id);\r\n  }\r\n\r\n  const SingleClose = () => {\r\n    obj.screen_name = \"\";\r\n    props.singlescreen.screen_name = \"\";\r\n    usetShow(false)\r\n  };\r\n\r\n  const handleUpdate = async (_id) => {\r\n    await props.singlescreenrecord(_id);\r\n    usetShow(true);\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: 'screen_name',\r\n      dataIndex: 'screen_name',\r\n      key: 'screen_name',\r\n      defaultSortOrder: 'descend',\r\n      sorter: (a, b) => a.screen_name.length - b.screen_name.length,\r\n    }, {\r\n      title: 'rows',\r\n      key: 'rows',\r\n      dataIndex: 'rows',\r\n      sorter: (a, b) => a.rows.length - b.rows.length,\r\n    }, {\r\n        title: 'columns',\r\n        key: 'cols',\r\n        dataIndex: 'cols',\r\n        sorter: (a, b) => a.cols.length - b.cols.length,\r\n      }, {\r\n      title: 'Update',\r\n      key: 'Update',\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Button onClick={() => handleUpdate(record._id)} type=\"primary\">UPDATE</Button>\r\n        </Space>\r\n      ),\r\n    }, {\r\n      title: 'Delete',\r\n      key: 'Delete',\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Button type=\"danger\" onClick={() => handleShow(record._id)} style={{ backgroundColor: \"Red\", borderBlockColor: \"Black\", color: \"White\" }}>Delete</Button>\r\n        </Space>\r\n      ),\r\n    }\r\n  ];\r\n\r\n  const HandleChange = (e, name) => {\r\n    let olddata = { ...obj };\r\n      olddata[name] = e.target.value;\r\n    // setOp(false);\r\n    setMyObj1(olddata);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={\"Title\"} style={{ marginTop: \"-29px\"}}>\r\n          </div>\r\n      <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"29px\" }}>\r\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item>Screen</Breadcrumb.Item>\r\n        <Breadcrumb.Item>View Screen List</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <div className=\"site-card-border-less-wrapper\">\r\n        <Card title=\"View Screen List\" bordered={true} style={{ width: \"auto\",border:\"5px\" }}>\r\n          <Table columns={columns} dataSource={props.screens} pagination={{ pageSize: 4 }} />\r\n        </Card>\r\n      </div>\r\n      {/* Update Record */}\r\n      <Modal title=\"Update State\"\r\n        visible={ushow}\r\n        onOk={() => SingleSubmit()}\r\n        onCancel={() => SingleClose()}>\r\n        <Form form={form} name=\"ScreenList\">\r\n          <Input type=\"hidden\" name=\"_id\" value={obj._id} onChange={(e) => HandleChange(e, \"_id\")} />\r\n          <Form.Item {...formItemLayout} label=\"Enter Screen Name:-\" \r\n                hasFeedback\r\n                validateStatus={(error.Screen_nameERROR)?\"error\":\"success\"}\r\n                help={error.Screen_nameERROR}>\r\n            <Input type=\"text\" name=\"screen_name\" value={obj.screen_name || \" \"} onChange={(e) => { HandleChange(e, \"screen_name\") }} placeholder=\"Enter Screen name ...\" />\r\n          </Form.Item>\r\n          <Form.Item {...formItemLayout} label=\"Enter Rows:-\" >\r\n            <Input type=\"number\" name=\"rows\" value={obj.rows || \" \"} onChange={(e) => { HandleChange(e, \"rows\") }} placeholder=\"Enter Rows ...\" min=\"1\" max=\"100\"/>\r\n          </Form.Item>\r\n          <Form.Item {...formItemLayout} label=\"Enter Cols:-\" >\r\n            <Input type=\"number\" name=\"cols\" value={obj.cols || \" \"} onChange={(e) => { HandleChange(e, \"cols\") }} placeholder=\"Enter Cols ...\" min=\"1\" max=\"100\"/>\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n\r\n      {/* Delete Record  */}\r\n      <Modal title=\"Are you sure!\"\r\n        visible={show}\r\n        onOk={() => deleteHandler(ids)}\r\n        onCancel={() => handleClose()}>\r\n        Do you want to delete this state?\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  err: state.screenReducer.error,\r\n  screens: state.screenReducer.screens,\r\n  singlescreen: state.screenReducer.singlescreen\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getscreen: () => dispatch(getscreen()),\r\n    deletescreen: (_id) => dispatch(deletescreen(_id)),\r\n    updatescreen: (postdata, put) => dispatch(updatescreen(postdata, put)),\r\n    singlescreenrecord: (id) => dispatch(singlescreenrecord(id))\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ScreenList);\r\n","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\TheaterPanel\\addScreen.js",["359","360","361","362"],"import React, { useState, useEffect } from 'react';\r\nimport { addscreen } from '../../store/action/screenAction';\r\nimport {login} from '../../store/action/userAction';\r\nimport { connect } from 'react-redux';\r\nimport { Breadcrumb, Card, } from 'antd';\r\nimport {\r\n    Form,\r\n    Input,\r\n    Button\r\n} from 'antd';\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        span: 4,\r\n    },\r\n    wrapperCol: {\r\n        span: 8,\r\n    },\r\n};\r\nconst formTailLayout = {\r\n    labelCol: {\r\n        span: 4,\r\n    },\r\n    wrapperCol: {\r\n        span: 8,\r\n        offset: 4,\r\n    },\r\n};\r\n\r\nconst AddForm = (props) => {\r\n    useEffect(()=>{\r\n        console.log(props.singleuser._id);\r\n        // props.singleuser;\r\n    },[props.singleuser])\r\n    const [form] = Form.useForm();\r\n    const [obj, setMyObj] = useState({\r\n        screen_name: \"\",\r\n        rows: \"\",\r\n        cols: \"\",\r\n        user_id:\"\"\r\n    })\r\n    const [error, setError] = useState({\r\n        screen_nameError: \"\",\r\n        isValid: false\r\n    });\r\n\r\n\r\n    const handleSubmit = async () => {\r\n        try {\r\n            const values = await form.validateFields();\r\n            console.log(props.singleuser._id);\r\n            let olddata = { ...obj };\r\n            olddata[\"user_id\"]=props.singleuser._id;\r\n            setMyObj(olddata);\r\n            await props.addscreen(olddata);\r\n            props.history.replace(\"/theater/screenList\");\r\n        } catch (errorInfo) {\r\n            console.log('Failed:', errorInfo);\r\n        }\r\n    }\r\n\r\n    const HandleChange = (e, name) => {\r\n        let olddata = { ...obj };\r\n        olddata[name] = e.target.value;\r\n        setMyObj(olddata);\r\n    }\r\n\r\n    return (\r\n\r\n        <>\r\n            <div className={\"Title\"} style={{ marginTop: \"-29px\" }}>\r\n            </div>\r\n            <Breadcrumb style={{ marginTop: \"1px\", textAlign: \"right\", marginBottom: \"30px\" }}>\r\n                <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n                <Breadcrumb.Item>Screen</Breadcrumb.Item>\r\n                <Breadcrumb.Item>Add Screen</Breadcrumb.Item>\r\n            </Breadcrumb>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card title=\"Add Screen Form\" bordered={false} style={{ width: \"auto\" }}>\r\n                    <Form form={form} name=\"AddForm\">\r\n                        \r\n                        <Form.Item {...formItemLayout} label=\"Enter Screen Name:-\" name=\"screen_name\" rules={[{ required: true, message: 'Enter Screen Name!' }]}>\r\n                            <Input type=\"text\" name=\"screen_name\" onChange={(e) => { HandleChange(e, \"screen_name\") }} placeholder=\"Enter Screen name ...\" style={{ maxWidth: \"300px\" }} />\r\n                        </Form.Item>\r\n                        <Form.Item {...formItemLayout} label=\"Enter Total Rows:-\" name=\"rows\" rules={[{ required: true, message: 'Please Enter Rows!' }]}>\r\n                            <Input type=\"number\" name=\"rows\" onChange={(e) => { HandleChange(e, \"rows\") }} placeholder=\"rows no ...\" style={{ maxWidth: \"300px\" }} min=\"1\" max=\"100\"/>\r\n                        </Form.Item>\r\n                        <Form.Item {...formItemLayout} label=\"Enter Total Column :-\" name=\"cols\" rules={[{ required: true, message: 'Please Enter Cols!' }]}>\r\n                            <Input type=\"number\" name=\"cols\" onChange={(e) => { HandleChange(e, \"cols\") }} placeholder=\"cols no ...\" style={{ maxWidth: \"300px\" }} min=\"1\" max=\"100\"/>\r\n                        </Form.Item>\r\n                        <Form.Item {...formTailLayout} label=\"\">\r\n                            <Button type=\"primary\" style={{ backgroundColor: \"#058a5f\" }} onClick={(e) => handleSubmit()}>Add Screen</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Card>\r\n            </div>\r\n\r\n        </>\r\n    );\r\n}\r\nconst mapStateToProps =  (state) => ({\r\n    // err:state.userReducer.error,\r\n    // Loading:state.userReducer.loading,\r\n    singleuser:state.userReducer.singleuser,\r\n  })\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addscreen: (postdata) => dispatch(addscreen(postdata)),\r\n        // updateProfile:()=>dispatch(updateProfile())\r\n\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddForm);\r\n","G:\\progs\\Movie_Booking_2\\ui\\src\\store\\action\\stateAction.js",[],"G:\\progs\\Movie_Booking_2\\ui\\src\\store\\action\\cityAction.js",[],"G:\\progs\\Movie_Booking_2\\ui\\src\\store\\action\\movieAction.js",[],"G:\\progs\\Movie_Booking_2\\ui\\src\\store\\action\\screenAction.js",["363"],"import axios from \"axios\";\r\nimport * as actionTypes from \"../screenActionType\";\r\n\r\nexport const getscreen = () => {\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.INIT_FETCH_SCREEN\r\n        })\r\n        try {\r\n            let verifytoken = localStorage.getItem(\"Token\");\r\n            let response = await axios.get(\"http://localhost:3001/getscreen\", {\r\n                headers: { 'Authorization': verifytoken }\r\n            })\r\n            console.log(response.data);\r\n            dispatch({\r\n                type: actionTypes.FETCH_SCREEN_SUCCESS,\r\n                screens: response.data\r\n            })\r\n        } catch (error) {\r\n            console.log(error.response.data.message);\r\n            dispatch({\r\n                type: actionTypes.FETCH_SCREEN_FAILED,\r\n                error: error.response.data.message\r\n            });\r\n            throw new Error();\r\n        }\r\n    }\r\n}\r\n\r\nexport const addscreen = (postdata) => {\r\n    console.log(postdata);\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.INIT_ADD_SCREEN\r\n        })\r\n        try {\r\n            let response = await axios.post(\"http://localhost:3001/addscreen\", postdata)\r\n            dispatch({\r\n                type: actionTypes.ADD_SCREEN_SUCCESS,\r\n                screens: response.data\r\n            })\r\n        } catch (error) {\r\n            console.log(error.response.data.message);\r\n            dispatch({\r\n                type: actionTypes.ADD_SCREEN_FAILED,\r\n                error: error.response.data.message\r\n            });\r\n            throw new Error();\r\n        }\r\n    }\r\n}\r\n\r\nexport const deletescreen = (id) => {\r\n    console.log(id);\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.INIT_DELETE_SCREEN\r\n        })\r\n        try {\r\n            let response = await axios.delete(`http://localhost:3001/deletescreen/${id}`)\r\n            dispatch({\r\n                type: actionTypes.DELETE_SCREEN_SUCCESS,\r\n                id: id\r\n            })\r\n        } catch (error) {\r\n            console.log(error.response.data.message);\r\n            dispatch({\r\n                type: actionTypes.DELETE_SCREEN_FAILED,\r\n                error: error.response.data.message\r\n            });\r\n            throw new Error();\r\n        }\r\n    }\r\n}\r\n\r\nexport const singlescreenrecord = (id) => {\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.INIT_SINGLE_SCREEN\r\n        })\r\n        try {\r\n            let response = await axios.get(`http://localhost:3001/singlescreen/${id}`)\r\n            dispatch({\r\n                type: actionTypes.SINGLE_SCREEN_SUCCESS,\r\n                singlescreen: response.data\r\n            })\r\n        } catch (error) {\r\n            console.log(error.response.data.message);\r\n            dispatch({\r\n                type: actionTypes.SINGLE_SCREEN_FAILED,\r\n                error: error.response.data.message\r\n            });\r\n            throw new Error();\r\n        }\r\n    }\r\n}\r\n\r\nexport const updatescreen = (id, put) => {\r\n    console.log(put);\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.INIT_UPDATE_SCREEN\r\n        })\r\n        try {\r\n            let response = await axios.put(`http://localhost:3001/updatescreen/${id}`, put)\r\n            dispatch({\r\n                type: actionTypes.UPDATE_SCREEN_SUCCESS,\r\n                screens: response.data\r\n            })\r\n        } catch (error) {\r\n            console.log(error.response.data.message);\r\n            dispatch({\r\n                type: actionTypes.UPDATE_SCREEN_FAILED,\r\n                error: error.response.data.message\r\n            });\r\n            throw new Error();\r\n        }\r\n    }\r\n} ","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\TheaterPanel\\theaterscreenlist.js",["364","365","366","367","368","369","370","371","372","373","374","375"],"import React, { useState, useEffect } from 'react';\r\nimport { gettscreen,deletetscreen,updatetscreen,singletscreenrecord } from '../../store/action/theaterscreenAction';\r\nimport { getscreen } from \"../../store/action/screenAction\";\r\nimport { fetchmoviedata } from \"../../store/action/movieAction\"\r\nimport { connect } from 'react-redux';\r\nimport '../state.css';\r\nimport { Table, Space, Button, Breadcrumb, Card, Form, Modal, Input,Col,DatePicker,TimePicker,Row,Select,Switch } from 'antd';\r\nimport moment from 'moment'\r\n\r\nconst {Option} = Select;\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 24,\r\n  },\r\n  wrapperCol: {\r\n    span: 12,\r\n  },\r\n};\r\nconst formTailLayout = {\r\n  labelCol: {\r\n    span: 4,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n    offset: 4,\r\n  },\r\n};\r\nconst TheaterScreenList = (props) => {\r\n  const [form] = Form.useForm();\r\n  const [error,setError] = useState({\r\n    IsValid:false,\r\n    Screen_nameERROR:\"\"\r\n})\r\n  const [obj, setMyObj1] = useState({\r\n    _id: \"\",\r\n    user_id: \"\",\r\n    movie_id: \"\",\r\n    screen_id:\"\",\r\n    screen_time:\"\",\r\n    start_date:\"\",\r\n    end_date:\"\",\r\n    end_time:\"\",\r\n    price:\"\"\r\n  })\r\n  const [ids, setIds] = useState(\"\");\r\n  const [show, setShow] = useState(false);\r\n  const [ushow, usetShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    props.gettscreen();\r\n    props.getscreen();\r\n    props.fetchmoviedata();\r\n    console.log(props.singletscreen);\r\n    if (props.singletscreen.screen_id) {\r\n      let olddata={...obj};\r\n      console.log(props.singletscreen.screen_id)\r\n      olddata.screen_id = props.singletscreen.screen_id;\r\n      olddata._id = props.singletscreen._id;\r\n      olddata.user_id = props.singletscreen.user_id;\r\n      olddata.movie_id=props.singletscreen.movie_id;\r\n      olddata.screen_time=props.singletscreen.screen_time;\r\n      olddata.start_date=props.singletscreen.start_date;\r\n      olddata.end_date=props.singletscreen.end_date;\r\n      olddata.end_time=props.singletscreen.end_time;\r\n      olddata.price=props.singletscreen.price;\r\n      console.log(olddata);\r\n      console.log(obj.start_date)\r\n      setMyObj1(olddata);\r\n    }\r\n  }, [props.gettscreen,props.singletscreen])\r\n\r\n  const deleteHandler = async (id) => {\r\n    await props.deletetscreen(id);\r\n    setShow(false);\r\n  }\r\n\r\n  const SingleSubmit = async () => {\r\n    // let errors = { ...error, IsValid : true };\r\n    // if(!obj.screen_name || obj.screen_name === \"\")\r\n    // {\r\n      \r\n    //   if(!obj.screen_name || obj.screen_name === \"\"){\r\n    //     errors.IsValid = false;\r\n    //     errors.Screen_nameERROR = \"Screenname Is Required \"\r\n    //   }\r\n\r\n    // }else{\r\n    //     errors.Screen_nameERROR = \"\"\r\n    // }\r\n    //   setError(errors);\r\n    //   if(errors.IsValid==true){\r\n    //       console.log(obj);\r\n        await props.updatetscreen(obj._id, obj);\r\n        // setOp(true);\r\n        usetShow(false);\r\n        obj._id = props.singletscreen._id;\r\n        obj.screen_id = \"\";\r\n      // }\r\n    \r\n  }\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = (id) => {\r\n    setShow(true);\r\n    setIds(id);\r\n  }\r\n\r\n  const SingleClose = () => {\r\n    obj.screen_id = \"\";\r\n    props.singletscreen.screen_id = \"\";\r\n    usetShow(false)\r\n  };\r\n\r\n  const handleUpdate = async (_id) => {\r\n    await props.singletscreenrecord(_id);\r\n    usetShow(true);\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Screen_Name',\r\n    //   dataIndex: 'screen_name',\r\n      key: 'screen_id',\r\n      defaultSortOrder: 'descend',\r\n      render: s=>s.screen_id.screen_name,\r\n      sorter: (a, b) => a.screen_id.screen_name.length - b.screen_id.screen_name.length,\r\n    },\r\n     {\r\n      title: 'Movie_Name',\r\n      key: 'movie_id',\r\n    //   dataIndex: 'moviename',\r\n      defaultSortOrder:'descend',\r\n      render: s => s.movie_id.moviename,\r\n      sorter: (a, b) => a.movie_id.moviename.length - b.movie_id.moviename.length,\r\n    }, {\r\n        title: 'screen_time',\r\n        key: 'screen_time',\r\n        dataIndex: 'screen_time',\r\n        sorter: (a, b) => a.screen_time.length - b.screen_time.length,\r\n      },{\r\n        title: 'end_time',\r\n        key: 'end_time',\r\n        dataIndex: 'end_time',\r\n        sorter: (a, b) => a.end_time.length - b.end_time.length,\r\n      },{\r\n        title: 'Start Date',\r\n        key: 'start_date',\r\n        dataIndex: 'start_date',\r\n        sorter: (a, b) => a.start_date.length - b.start_date.length,\r\n      },{\r\n        title: 'End Date',\r\n        key: 'end_date',\r\n        dataIndex: 'end_date',\r\n        sorter: (a, b) => a.end_date.length - b.end_date.length,\r\n      }\r\n    , {\r\n      title: 'Update',\r\n      key: 'Update',\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Button onClick={() => handleUpdate(record._id)} type=\"primary\">UPDATE</Button>\r\n        </Space>\r\n      ),\r\n    }, \r\n    ,{\r\n      title: 'Delete',\r\n      key: 'Delete',\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Button type=\"danger\" onClick={() => handleShow(record._id)} style={{ backgroundColor: \"Red\", borderBlockColor: \"Black\", color: \"White\" }}>Delete</Button>\r\n        </Space>\r\n      ),\r\n    }\r\n  ];\r\n\r\n  const HandleChange = (e, name) => {\r\n    let olddata = {...obj};\r\n    if((name === \"screen_id\") || (name === \"movie_id\"))\r\n    {\r\n      olddata[name] = e;\r\n    }\r\n    else if((name == \"start_date\") || (name == \"end_date\"))\r\n    {\r\n      if(e!=null)\r\n      olddata[name] = new Date(e._d).toLocaleDateString();\r\n    }\r\n    else if((name == \"screen_time\") || (name == \"end_time\"))\r\n    {\r\n      if(e!=null)\r\n      olddata[name] = new Date(e._d).toLocaleTimeString();\r\n    }\r\n    else\r\n    {\r\n      olddata[name] = e.target.value;\r\n    }\r\n    console.log(olddata);\r\n    \r\n    setMyObj1(olddata);\r\n  }\r\n  const optionTemplate = ()=>{\r\n    return props.screens.map((screenlist)=>{\r\n      const{_id,screen_name} = screenlist;\r\n      return(\r\n        <option value={_id} key={_id}>{screen_name}</option>\r\n      )\r\n    })\r\n  }\r\n\r\n  const optionMovieTemplate = ()=>{\r\n   return props.movies.map((movielist)=>{\r\n     const{_id,moviename} = movielist;\r\n     return(\r\n       <option value={_id} key={_id}>{moviename}</option>\r\n     )\r\n   })\r\n }\r\n  return (\r\n    <>\r\n      <div className={\"Title\"} style={{ marginTop: \"-29px\"}}>\r\n          </div>\r\n      <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"29px\" }}>\r\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item>Theater Screen</Breadcrumb.Item>\r\n        <Breadcrumb.Item>View Theater Screen List</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <div className=\"site-card-border-less-wrapper\">\r\n        <Card title=\"View Screen List\" bordered={true} style={{ width: \"auto\",border:\"5px\" }}>\r\n          <Table columns={columns} dataSource={props.tscreens} pagination={{ pageSize: 4 }} />\r\n        </Card>\r\n      </div>\r\n      {/* Update Record */}\r\n      <Modal title=\"Update Theater Screen\"\r\n       visible={ushow}\r\n       onOk={() => SingleSubmit()}\r\n       onCancel={() => SingleClose()}>\r\n      <Form>\r\n      <Row gutter={0}>\r\n                          <Col span={12}>\r\n                          <Input type=\"hidden\" name=\"_id\" value={obj._id} onChange={(e) => { HandleChange(e, \"_id\") }}/>\r\n                          <Form.Item {...formItemLayout} label=\"SELECT SCREEN:-\"  rules={[{ required: true, message: 'Please Select Screen Name' }]}>\r\n                          <Select name=\"screen_id\" value={obj.screen_id} onChange={(e)=>HandleChange(e,\"screen_id\")} placeholder=\"------ Select Screen-----\" allowClear>\r\n                                      {optionTemplate()}\r\n                                  </Select>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"SELECT MOVIE:-\"  rules={[{ required: true, message: 'Please required movie name!' }]}>\r\n                          <Select name=\"movie_id\" value={obj.movie_id} onChange={(e)=>HandleChange(e,\"movie_id\")} placeholder=\"------ Select Movie-----\" allowClear>\r\n                                      {optionMovieTemplate()}\r\n                                  </Select>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                    </Row>\r\n                      <Row gutter={0}>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Screen Time\" rules={[{ required: true, message: 'Please Select Screen Time' }]}>\r\n                              <TimePicker name=\"screen_time\" value={moment(obj.screen_time,'HH:mm:ss')} onChange={(e) => { HandleChange(e, \"screen_time\") }} placeholder=\"Screen Time\" />\r\n                          </Form.Item>\r\n                      </Col>\r\n                        <Col span={12}>\r\n                        <Form.Item {...formItemLayout} label=\"End Time\"  rules={[{ required: true, message: 'Please Select End Time' }]}>\r\n                              <TimePicker name=\"end_time\" value={moment(obj.end_time,'HH:mm:ss')} onChange={(e) => { HandleChange(e, \"end_time\") }} placeholder=\"End Time\"/>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      </Row>\r\n                      \r\n                      <Row gutter={0}>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Starting Date:-\"  rules={[{ required: true, message: 'Please Select Start Date!' }]}>\r\n                          <DatePicker format=\"DD/MM/yyyy\" value={moment(obj.start_date,'MM/DD/ YYYY')} name=\"start_date\" onChange={(e) => { HandleChange(e, \"start_date\") }} placeholder=\"Start Date\"/>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      <Col span={12}>\r\n                      <Form.Item {...formItemLayout} label=\"Ending Date:-\"  rules={[{ required: true, message: 'Please Select End Date!' }]}>\r\n                          <DatePicker format=\"DD/MM/yyyy\" value={moment(obj.end_date,'MM/DD/ YYYY')} name=\"end_date\" onChange={(e) => { HandleChange(e, \"end_date\") }} placeholder=\"End date\"/>\r\n                          </Form.Item>\r\n                          </Col>\r\n                      </Row>  \r\n                      <Row gutter={0}>\r\n                      <Col span={12}>\r\n                      <Form.Item {...formItemLayout} label=\"Price:-\"  rules={[{ required: true, message: 'Please Select End Date!' }]}>\r\n                      <Input type=\"text\" name=\"price\" value={obj.price} onChange={(e) => { HandleChange(e, \"price\") }}/>\r\n                          </Form.Item>\r\n                          </Col>\r\n                      </Row>                               \r\n      </Form>\r\n      </Modal>\r\n\r\n      {/* Delete Record  */}\r\n      <Modal title=\"Are you sure!\"\r\n        visible={show}\r\n        onOk={() => deleteHandler(ids)}\r\n        onCancel={() => handleClose()}>\r\n        Do you want to delete this state?\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  err: state.theaterscreenReducer.error,\r\n  tscreens:state.theaterscreenReducer.tscreens,\r\n  singletscreen: state.theaterscreenReducer.singletscreen,\r\n  screens:state.screenReducer.screens,\r\n  singleuser:state.userReducer.singleuser,\r\n  movies:state.movieReducer.movies\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    // getscreen: () => dispatch(getscreen()),\r\n    // deletescreen: (_id) => dispatch(deletescreen(_id)),\r\n    updatetscreen: (postdata, put) => dispatch(updatetscreen(postdata, put)),\r\n    singletscreenrecord: (id) => dispatch(singletscreenrecord(id)),\r\n      gettscreen: ()=>dispatch(gettscreen()),\r\n      deletetscreen: (_id)=>dispatch(deletetscreen(_id)),\r\n      getscreen: ()=> dispatch(getscreen()),\r\n      fetchmoviedata:()=>dispatch(fetchmoviedata())\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TheaterScreenList);\r\n","G:\\progs\\Movie_Booking_2\\ui\\src\\components\\TheaterPanel\\addtheaterscreen.js",["376","377","378","379","380","381","382","383","384","385","386","387"],"import React, { useEffect, useState } from 'react';\r\nimport { addtscreen } from \"../../store/action/theaterscreenAction\";\r\nimport { getscreen } from \"../../store/action/screenAction\";\r\nimport { fetchmoviedata } from \"../../store/action/movieAction\"\r\nimport {login} from '../../store/action/userAction';\r\nimport { connect } from 'react-redux';\r\nimport { Breadcrumb,Card,Row,Col,DatePicker,TimePicker,Select } from 'antd';\r\nimport moment from 'moment';\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Switch\r\n} from 'antd';\r\n// import { Row } from 'react-bootstrap';\r\nconst {Option} = Select;\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    // span: 5,\r\n  },\r\n  wrapperCol: {\r\n    span: 10,\r\n  },\r\n};\r\nconst formTailLayout = {\r\n  labelCol: {\r\n    span: 4,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n    offset: 4,\r\n  },\r\n};\r\n\r\nconst AddTScreen = (props) => {\r\n  const { RangePicker } = DatePicker;\r\n  const [form] = Form.useForm();\r\n  const [obj, setMyObj] = useState({\r\n    user_id: \"\",\r\n    movie_id: \"\",\r\n    screen_id: \"\",\r\n    screen_time: \"\",\r\n    start_date: \"\",\r\n    end_date: \"\",\r\n    end_time: \"\",\r\n    price:\"\"\r\n  })\r\n\r\n  useEffect(()=>{\r\n    props.getscreen()\r\n    props.fetchmoviedata()\r\n    console.log(props.singleuser._id);\r\n    // console.log(props.)\r\n  },[props.getscreen,props.fetchmoviedata,props.singleuser])\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      const values = await form.validateFields();\r\n        const formdata = new FormData();\r\n        formdata.append(\"user_id\",props.singleuser._id)\r\n        formdata.append(\"screen_id\",obj.screen_id);\r\n        formdata.append(\"movie_id\",obj.movie_id);\r\n        formdata.append(\"screen_time\",obj.screen_time);\r\n        formdata.append(\"end_time\",obj.end_time);\r\n        formdata.append(\"start_date\",obj.start_date);\r\n        formdata.append(\"end_date\",obj.end_date);\r\n        formdata.append(\"price\",obj.price);\r\n        console.log(obj.screen_time);\r\n        await props.addtscreen(formdata);\r\n        props.history.replace(\"/theater/tscreenList\");\r\n    } catch (errorInfo) {\r\n      console.log('Failed:', errorInfo);\r\n    }\r\n  }\r\n\r\n  const HandleChange = (e, name) => {\r\n    let olddata = {...obj};\r\n    if((name === \"screen_id\") || (name === \"movie_id\"))\r\n    {\r\n      olddata[name] = e;\r\n    }\r\n    else if((name == \"start_date\") || (name == \"end_date\"))\r\n    {\r\n      if(e!=null)\r\n      olddata[name] = new Date(e._d).toLocaleDateString();\r\n    }\r\n    else if((name == \"screen_time\") || (name == \"end_time\"))\r\n    {\r\n      if(e!=null)\r\n      olddata[name] = new Date(e._d).toLocaleTimeString();\r\n    }\r\n    else\r\n    {\r\n      olddata[name] = e.target.value;\r\n    }\r\n    console.log(olddata);\r\n    setMyObj(olddata);\r\n  }\r\n\r\n   const optionTemplate = ()=>{\r\n     return props.screens.map((screenlist)=>{\r\n       const{_id,screen_name} = screenlist;\r\n       return(\r\n         <option value={_id} key={_id}>{screen_name}</option>\r\n       )\r\n     })\r\n   }\r\n\r\n   const optionMovieTemplate = ()=>{\r\n    return props.movies.map((movielist)=>{\r\n      const{_id,moviename} = movielist;\r\n      return(\r\n        <option value={_id} key={_id}>{moviename}</option>\r\n      )\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={\"Title\"} style={{marginTop: \"-29px\" }}>\r\n          </div>\r\n          <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"30px\"  }}>\r\n              <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n              <Breadcrumb.Item>Theater</Breadcrumb.Item>\r\n              <Breadcrumb.Item>Add Theater Screen</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n              <Card title=\"Add Theater Screen Form\" bordered={false} style={{ width: \"auto\" }}>\r\n                      <Form form={form} name=\"AddTScreen\">\r\n                      <Row gutter={0}>\r\n                          <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"SELECT SCREEN:-\" name=\"screenname\" rules={[{ required: true, message: 'Please Select Screen Name' }]}>\r\n                          <Select name=\"screen_id\" onChange={(e)=>HandleChange(e,\"screen_id\")} placeholder=\"------ Select Screen-----\" allowClear>\r\n                                      {optionTemplate()}\r\n                                  </Select>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"SELECT MOVIE:-\" name=\"moviename\" rules={[{ required: true, message: 'Please required movie name!' }]}>\r\n                          <Select name=\"movie_id\" onChange={(e)=>HandleChange(e,\"movie_id\")} placeholder=\"------ Select Movie-----\" allowClear>\r\n                                      {optionMovieTemplate()}\r\n                                  </Select>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                    </Row>\r\n                      <Row gutter={0}>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Screen Time\" name=\"screen_time\" rules={[{ required: true, message: 'Please Select Screen Time' }]}>\r\n                              <TimePicker name=\"screen_time\" onChange={(e) => { HandleChange(e, \"screen_time\") }} placeholder=\"Screen Time\" />\r\n                          </Form.Item>\r\n                      </Col>\r\n                        <Col span={12}>\r\n                        <Form.Item {...formItemLayout} label=\"End Time\" name=\"end_time\" rules={[{ required: true, message: 'Please Select End Time' }]}>\r\n                              <TimePicker name=\"end_time\" onChange={(e) => { HandleChange(e, \"end_time\") }} placeholder=\"End Time\"/>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      </Row>\r\n                      \r\n                      <Row gutter={0}>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Starting Date:-\" name=\"start_date\" rules={[{ required: true, message: 'Please Select Start Date!' }]}>\r\n                          <DatePicker format=\"DD/MM/yyyy\" name=\"start_date\" onChange={(e) => { HandleChange(e, \"start_date\") }} placeholder=\"Start Date\"/>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      <Col span={12}>\r\n                      <Form.Item {...formItemLayout} label=\"Ending Date:-\" name=\"end_date\" rules={[{ required: true, message: 'Please Select End Date!' }]}>\r\n                          <DatePicker format=\"DD/MM/yyyy\" name=\"end_date\" onChange={(e) => { HandleChange(e, \"end_date\") }} placeholder=\"End date\"/>\r\n                          </Form.Item>\r\n                          </Col>\r\n                      </Row>\r\n                      <Row gutter={0}>\r\n                      <Col span={12}>\r\n                      <Form.Item {...formItemLayout} label=\"Price:-\"  rules={[{ required: true, message: 'Please Select End Date!' }]}>\r\n                      <Input type=\"text\" name=\"price\" value={obj._id} onChange={(e) => { HandleChange(e, \"price\") }} placeholder=\"Price\"/>\r\n                          </Form.Item>\r\n                          </Col>\r\n                      </Row>  \r\n                        \r\n                           <Form.Item {...formTailLayout} label=\"\"> \r\n                                <Button type=\"primary\" onClick={(e) =>handleSubmit()} loading={props.loading}>Add Theater Screen</Button>\r\n                          </Form.Item>                           \r\n                      </Form>\r\n              </Card>\r\n            </div>\r\n    </>\r\n  );\r\n}\r\nconst mapStateToProps =  (state) => ({\r\n   screens:state.screenReducer.screens,\r\n   error:state.screenReducer.error,\r\n   movies:state.movieReducer.movies,\r\n   error:state.movieReducer.error,\r\n   singleuser:state.userReducer.singleuser\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addtscreen: (postdata) => dispatch(addtscreen(postdata)),\r\n    getscreen: ()=> dispatch(getscreen()),\r\n    fetchmoviedata:()=>dispatch(fetchmoviedata())\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTScreen);\r\n","G:\\progs\\Movie_Booking_2\\ui\\src\\store\\action\\theaterscreenAction.js",["388"],"import axios from 'axios';\r\nimport * as actionTypes from '../theaterscreenActionType';\r\n\r\nexport const gettscreen = () => {\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.INIT_FETCH_THEATER_SCREEN\r\n        })\r\n        try {\r\n            let response = await axios.get(\"http://localhost:3001/gettscreen\")\r\n            dispatch({\r\n                type: actionTypes.FETCH_SCREEN_THEATER_SUCCESS,\r\n                theaterscreens: response.data\r\n            })\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            dispatch({\r\n                type: actionTypes.FETCH_SCREEN_THEATER_FAILED,\r\n                error: error.message\r\n            });\r\n            throw new Error();\r\n        }\r\n    }\r\n}\r\n\r\nexport const addtscreen = (postdata) =>{\r\n    return async(dispatch)=>{\r\n        dispatch({\r\n            type:actionTypes.INIT_ADD_THEATER_SCREEN\r\n        })\r\n        try\r\n        {\r\n            let response = await axios.post(\"http://localhost:3001/addtscreen\",postdata)\r\n            dispatch({\r\n                type:actionTypes.ADD_SCREEN_THEATER_SUCCESS,\r\n                theaterscreens:response.data\r\n            })\r\n        }\r\n        catch(error)\r\n        {\r\n            dispatch({\r\n                type:actionTypes.ADD_SCREEN_THEATER_FAILED,\r\n                error:error.response.data.message\r\n            });\r\n            throw new Error();\r\n        }\r\n    }\r\n}\r\n\r\nexport const deletetscreen = (id) => {\r\n    console.log(id);\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.INIT_DELETE_THEATER_SCREEN\r\n        })\r\n        try {\r\n            let response = await axios.delete(`http://localhost:3001/deletetscreen/${id}`)\r\n            dispatch({\r\n                type: actionTypes.DELETE_SCREEN_THEATER_SUCCESS,\r\n                id: id\r\n            })\r\n        } catch (error) {\r\n            console.log(error.response.data.message);\r\n            dispatch({\r\n                type: actionTypes.DELETE_SCREEN_THEATER_FAILED,\r\n                error: error.response.data.message\r\n            });\r\n            throw new Error();\r\n        }\r\n    }\r\n}\r\n\r\nexport const singletscreenrecord = (id) => {\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.INIT_SINGLE_THEATER_SCREEN\r\n        })\r\n        try {\r\n            let response = await axios.get(`http://localhost:3001/singletscreen/${id}`)\r\n            dispatch({\r\n                type: actionTypes.SINGLE_SCREEN_THEATER_SUCCESS,\r\n                singletscreen: response.data\r\n            })\r\n        } catch (error) {\r\n            console.log(error.response.data.message);\r\n            dispatch({\r\n                type: actionTypes.SINGLE_SCREEN_THEATERFAILED,\r\n                error: error.response.data.message\r\n            });\r\n            throw new Error();\r\n        }\r\n    }\r\n}\r\n\r\nexport const updatetscreen = (id, put) => {\r\n    console.log(put);\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.INIT_UPDATE_THEATER_SCREEN\r\n        })\r\n        try {\r\n            let response = await axios.put(`http://localhost:3001/updatetscreen/${id}`, put)\r\n            dispatch({\r\n                type: actionTypes.UPDATE_SCREEN_THEATER_SUCCESS,\r\n                tscreens: response.data\r\n            })\r\n        } catch (error) {\r\n            console.log(error.response.data.message);\r\n            dispatch({\r\n                type: actionTypes.UPDATE_SCREEN_THEATER_FAILED,\r\n                error: error.response.data.message\r\n            });\r\n            throw new Error();\r\n        }\r\n    }\r\n} ",["389","390"],"G:\\progs\\Movie_Booking_2\\ui\\src\\store\\theaterscreenActionType.js",[],"G:\\progs\\Movie_Booking_2\\ui\\src\\store\\reducer\\theaterscreenReducer.js",["391"],"import * as actionTypes from '../theaterscreenActionType';\r\nconst initialstore = {\r\n    tscreens:[],\r\n    singletscreen:{},\r\n    loading:false,\r\n    error:\"\"\r\n}\r\n\r\nconst store = (state=initialstore,action)=>{\r\n    switch(action.type)\r\n    {\r\n        case actionTypes.INIT_FETCH_THEATER_SCREEN:\r\n            return{\r\n                ...state,\r\n                loading:true\r\n            }\r\n        case actionTypes.FETCH_SCREEN_THEATER_SUCCESS:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                tscreens:action.theaterscreens\r\n            }\r\n        case actionTypes.FETCH_SCREEN_THEATER_FAILED:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                error:action.error\r\n            }\r\n        case actionTypes.INIT_ADD_THEATER_SCREEN:\r\n            return{\r\n                ...state,\r\n                loading:true\r\n            }\r\n        case actionTypes.ADD_SCREEN_THEATER_SUCCESS:\r\n            return{\r\n                ...state,\r\n                loading:false                  \r\n            }\r\n        case actionTypes.ADD_SCREEN_THEATER_FAILED:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                error:action.error\r\n            }\r\n        \r\n        case actionTypes.INIT_DELETE_THEATER_SCREEN:\r\n            return{\r\n                ...state,\r\n                loading:true\r\n            }\r\n        case actionTypes.DELETE_SCREEN_THEATER_SUCCESS:\r\n            let tscreeens = state.tscreens.filter(tscren => tscren._id !== action.id);\r\n            return{\r\n                ...state,\r\n                loading:false,           \r\n                tscreens:tscreeens    \r\n            }\r\n        case actionTypes.DELETE_SCREEN_THEATER_FAILED:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                error:action.error\r\n            }\r\n        case actionTypes.INIT_SINGLE_THEATER_SCREEN:\r\n                return {\r\n                    ...state,\r\n                    loading: true,\r\n                };\r\n        case actionTypes.SINGLE_SCREEN_THEATER_SUCCESS:\r\n                console.log(action.singletscreen)\r\n                return {\r\n                    ...state,\r\n                    loading: false,\r\n                    singletscreen: action.singletscreen\r\n                }\r\n        case actionTypes.SINGLE_SCREEN_THEATERFAILED:\r\n                return {\r\n                    ...state,\r\n                    loading: false,\r\n                    error: action.error\r\n                }\r\n        case actionTypes.INIT_UPDATE_THEATER_SCREEN:\r\n                    return {\r\n                        ...state,\r\n                        loading: true,\r\n                    };\r\n        case actionTypes.UPDATE_SCREEN_THEATER_SUCCESS:\r\n                    console.log(action.tscreens);\r\n                    let tscreensTemp1 = [...state.tscreens];\r\n                    tscreensTemp1.map(order => {\r\n                        if (order._id === action.tscreens._id) {\r\n                                order.user_id = action.tscreens.user_id;\r\n                                order.movie_id = action.tscreens.movie_id;\r\n                                order.screen_id = action.tscreens.screen_id;\r\n                                order.start_date = action.tscreens.start_date;\r\n                                order.end_date = action.tscreens.end_date;\r\n                                order.screen_time = action.tscreens.screen_time;\r\n                                order.end_time = action.tscreens.end_time;\r\n                        }\r\n                    });\r\n                    return {\r\n                        ...state,\r\n                        loading: false,\r\n                        tscreens: tscreensTemp1\r\n                    }\r\n        case actionTypes.UPDATE_SCREEN_THEATER_FAILED:\r\n                    return {\r\n                        ...state,\r\n                        loading: false,\r\n                        error: action.error\r\n                    }\r\n     \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default store;",{"ruleId":"392","replacedBy":"393"},{"ruleId":"394","replacedBy":"395"},{"ruleId":"396","severity":1,"message":"397","line":91,"column":32,"nodeType":"398","messageId":"399","endLine":91,"endColumn":34},{"ruleId":"396","severity":1,"message":"397","line":89,"column":32,"nodeType":"398","messageId":"399","endLine":89,"endColumn":34},{"ruleId":"396","severity":1,"message":"397","line":91,"column":36,"nodeType":"398","messageId":"399","endLine":91,"endColumn":38},{"ruleId":"396","severity":1,"message":"397","line":90,"column":36,"nodeType":"398","messageId":"399","endLine":90,"endColumn":38},{"ruleId":"400","severity":1,"message":"401","line":20,"column":8,"nodeType":"402","endLine":20,"endColumn":66,"suggestions":"403"},{"ruleId":"404","severity":1,"message":"405","line":30,"column":109,"nodeType":"406","messageId":"407","endLine":30,"endColumn":111},{"ruleId":"404","severity":1,"message":"405","line":52,"column":108,"nodeType":"406","messageId":"407","endLine":52,"endColumn":110},{"ruleId":"404","severity":1,"message":"405","line":63,"column":109,"nodeType":"406","messageId":"407","endLine":63,"endColumn":111},{"ruleId":"400","severity":1,"message":"401","line":12,"column":5,"nodeType":"402","endLine":12,"endColumn":27,"suggestions":"408"},{"ruleId":"404","severity":1,"message":"405","line":50,"column":21,"nodeType":"406","messageId":"407","endLine":50,"endColumn":23},{"ruleId":"404","severity":1,"message":"405","line":50,"column":42,"nodeType":"406","messageId":"407","endLine":50,"endColumn":44},{"ruleId":"404","severity":1,"message":"405","line":50,"column":65,"nodeType":"406","messageId":"407","endLine":50,"endColumn":67},{"ruleId":"404","severity":1,"message":"405","line":50,"column":87,"nodeType":"406","messageId":"407","endLine":50,"endColumn":89},{"ruleId":"404","severity":1,"message":"405","line":50,"column":106,"nodeType":"406","messageId":"407","endLine":50,"endColumn":108},{"ruleId":"404","severity":1,"message":"409","line":50,"column":125,"nodeType":"406","messageId":"407","endLine":50,"endColumn":127},{"ruleId":"404","severity":1,"message":"409","line":50,"column":149,"nodeType":"406","messageId":"407","endLine":50,"endColumn":151},{"ruleId":"404","severity":1,"message":"405","line":51,"column":23,"nodeType":"406","messageId":"407","endLine":51,"endColumn":25},{"ruleId":"404","severity":1,"message":"405","line":55,"column":22,"nodeType":"406","messageId":"407","endLine":55,"endColumn":24},{"ruleId":"404","severity":1,"message":"405","line":59,"column":24,"nodeType":"406","messageId":"407","endLine":59,"endColumn":26},{"ruleId":"404","severity":1,"message":"405","line":63,"column":23,"nodeType":"406","messageId":"407","endLine":63,"endColumn":25},{"ruleId":"404","severity":1,"message":"405","line":67,"column":20,"nodeType":"406","messageId":"407","endLine":67,"endColumn":22},{"ruleId":"404","severity":1,"message":"405","line":71,"column":26,"nodeType":"406","messageId":"407","endLine":71,"endColumn":28},{"ruleId":"404","severity":1,"message":"409","line":75,"column":20,"nodeType":"406","messageId":"407","endLine":75,"endColumn":22},{"ruleId":"404","severity":1,"message":"405","line":91,"column":22,"nodeType":"406","messageId":"407","endLine":91,"endColumn":24},{"ruleId":"404","severity":1,"message":"405","line":112,"column":14,"nodeType":"406","messageId":"407","endLine":112,"endColumn":16},{"ruleId":"410","severity":1,"message":"411","line":170,"column":19,"nodeType":"412","endLine":170,"endColumn":180},{"ruleId":"410","severity":1,"message":"411","line":173,"column":19,"nodeType":"412","endLine":173,"endColumn":141},{"ruleId":"410","severity":1,"message":"411","line":255,"column":126,"nodeType":"412","endLine":255,"endColumn":218},{"ruleId":"413","severity":1,"message":"414","line":4,"column":21,"nodeType":"415","messageId":"416","endLine":4,"endColumn":35},{"ruleId":"413","severity":1,"message":"417","line":7,"column":10,"nodeType":"415","messageId":"416","endLine":7,"endColumn":22},{"ruleId":"413","severity":1,"message":"418","line":7,"column":24,"nodeType":"415","messageId":"416","endLine":7,"endColumn":30},{"ruleId":"413","severity":1,"message":"419","line":7,"column":32,"nodeType":"415","messageId":"416","endLine":7,"endColumn":38},{"ruleId":"413","severity":1,"message":"420","line":7,"column":40,"nodeType":"415","messageId":"416","endLine":7,"endColumn":46},{"ruleId":"413","severity":1,"message":"421","line":7,"column":48,"nodeType":"415","messageId":"416","endLine":7,"endColumn":55},{"ruleId":"413","severity":1,"message":"422","line":7,"column":57,"nodeType":"415","messageId":"416","endLine":7,"endColumn":65},{"ruleId":"400","severity":1,"message":"401","line":13,"column":5,"nodeType":"402","endLine":13,"endColumn":27,"suggestions":"423"},{"ruleId":"404","severity":1,"message":"405","line":48,"column":21,"nodeType":"406","messageId":"407","endLine":48,"endColumn":23},{"ruleId":"404","severity":1,"message":"405","line":48,"column":42,"nodeType":"406","messageId":"407","endLine":48,"endColumn":44},{"ruleId":"404","severity":1,"message":"405","line":48,"column":65,"nodeType":"406","messageId":"407","endLine":48,"endColumn":67},{"ruleId":"404","severity":1,"message":"405","line":48,"column":87,"nodeType":"406","messageId":"407","endLine":48,"endColumn":89},{"ruleId":"404","severity":1,"message":"405","line":48,"column":106,"nodeType":"406","messageId":"407","endLine":48,"endColumn":108},{"ruleId":"404","severity":1,"message":"409","line":48,"column":125,"nodeType":"406","messageId":"407","endLine":48,"endColumn":127},{"ruleId":"404","severity":1,"message":"405","line":49,"column":23,"nodeType":"406","messageId":"407","endLine":49,"endColumn":25},{"ruleId":"404","severity":1,"message":"405","line":53,"column":22,"nodeType":"406","messageId":"407","endLine":53,"endColumn":24},{"ruleId":"404","severity":1,"message":"405","line":57,"column":24,"nodeType":"406","messageId":"407","endLine":57,"endColumn":26},{"ruleId":"404","severity":1,"message":"405","line":61,"column":23,"nodeType":"406","messageId":"407","endLine":61,"endColumn":25},{"ruleId":"404","severity":1,"message":"405","line":65,"column":20,"nodeType":"406","messageId":"407","endLine":65,"endColumn":22},{"ruleId":"404","severity":1,"message":"409","line":69,"column":20,"nodeType":"406","messageId":"407","endLine":69,"endColumn":22},{"ruleId":"404","severity":1,"message":"405","line":84,"column":22,"nodeType":"406","messageId":"407","endLine":84,"endColumn":24},{"ruleId":"404","severity":1,"message":"405","line":104,"column":14,"nodeType":"406","messageId":"407","endLine":104,"endColumn":16},{"ruleId":"410","severity":1,"message":"411","line":163,"column":19,"nodeType":"412","endLine":163,"endColumn":135},{"ruleId":"410","severity":1,"message":"411","line":166,"column":19,"nodeType":"412","endLine":166,"endColumn":186},{"ruleId":"410","severity":1,"message":"411","line":239,"column":126,"nodeType":"412","endLine":239,"endColumn":218},{"ruleId":"413","severity":1,"message":"424","line":1,"column":17,"nodeType":"415","messageId":"416","endLine":1,"endColumn":26},{"ruleId":"413","severity":1,"message":"425","line":1,"column":28,"nodeType":"415","messageId":"416","endLine":1,"endColumn":37},{"ruleId":"413","severity":1,"message":"426","line":4,"column":11,"nodeType":"415","messageId":"416","endLine":4,"endColumn":14},{"ruleId":"413","severity":1,"message":"427","line":4,"column":16,"nodeType":"415","messageId":"416","endLine":4,"endColumn":19},{"ruleId":"413","severity":1,"message":"428","line":4,"column":26,"nodeType":"415","messageId":"416","endLine":4,"endColumn":35},{"ruleId":"400","severity":1,"message":"429","line":14,"column":5,"nodeType":"402","endLine":14,"endColumn":18,"suggestions":"430"},{"ruleId":"431","severity":1,"message":"432","line":42,"column":62,"nodeType":"412","endLine":42,"endColumn":256},{"ruleId":"410","severity":1,"message":"411","line":81,"column":67,"nodeType":"412","endLine":81,"endColumn":153},{"ruleId":"413","severity":1,"message":"424","line":1,"column":17,"nodeType":"415","messageId":"416","endLine":1,"endColumn":26},{"ruleId":"413","severity":1,"message":"426","line":4,"column":11,"nodeType":"415","messageId":"416","endLine":4,"endColumn":14},{"ruleId":"413","severity":1,"message":"427","line":4,"column":16,"nodeType":"415","messageId":"416","endLine":4,"endColumn":19},{"ruleId":"413","severity":1,"message":"428","line":4,"column":26,"nodeType":"415","messageId":"416","endLine":4,"endColumn":35},{"ruleId":"400","severity":1,"message":"401","line":12,"column":5,"nodeType":"402","endLine":12,"endColumn":33,"suggestions":"433"},{"ruleId":"413","severity":1,"message":"434","line":5,"column":10,"nodeType":"415","messageId":"416","endLine":5,"endColumn":14},{"ruleId":"413","severity":1,"message":"435","line":6,"column":10,"nodeType":"415","messageId":"416","endLine":6,"endColumn":23},{"ruleId":"413","severity":1,"message":"436","line":6,"column":25,"nodeType":"415","messageId":"416","endLine":6,"endColumn":33},{"ruleId":"413","severity":1,"message":"437","line":7,"column":10,"nodeType":"415","messageId":"416","endLine":7,"endColumn":24},{"ruleId":"400","severity":1,"message":"438","line":31,"column":6,"nodeType":"402","endLine":31,"endColumn":46,"suggestions":"439"},{"ruleId":"404","severity":1,"message":"405","line":49,"column":22,"nodeType":"406","messageId":"407","endLine":49,"endColumn":24},{"ruleId":"413","severity":1,"message":"440","line":39,"column":13,"nodeType":"415","messageId":"416","endLine":39,"endColumn":19},{"ruleId":"413","severity":1,"message":"441","line":30,"column":10,"nodeType":"415","messageId":"416","endLine":30,"endColumn":12},{"ruleId":"400","severity":1,"message":"438","line":46,"column":6,"nodeType":"402","endLine":46,"endColumn":70,"suggestions":"442"},{"ruleId":"404","severity":1,"message":"405","line":71,"column":24,"nodeType":"406","messageId":"407","endLine":71,"endColumn":26},{"ruleId":"404","severity":1,"message":"409","line":140,"column":14,"nodeType":"406","messageId":"407","endLine":140,"endColumn":16},{"ruleId":"413","severity":1,"message":"443","line":32,"column":11,"nodeType":"415","messageId":"416","endLine":32,"endColumn":22},{"ruleId":"413","severity":1,"message":"440","line":50,"column":15,"nodeType":"415","messageId":"416","endLine":50,"endColumn":21},{"ruleId":"404","severity":1,"message":"405","line":52,"column":30,"nodeType":"406","messageId":"407","endLine":52,"endColumn":32},{"ruleId":"404","severity":1,"message":"405","line":52,"column":54,"nodeType":"406","messageId":"407","endLine":52,"endColumn":56},{"ruleId":"404","severity":1,"message":"405","line":53,"column":30,"nodeType":"406","messageId":"407","endLine":53,"endColumn":32},{"ruleId":"404","severity":1,"message":"405","line":55,"column":33,"nodeType":"406","messageId":"407","endLine":55,"endColumn":35},{"ruleId":"404","severity":1,"message":"405","line":81,"column":14,"nodeType":"406","messageId":"407","endLine":81,"endColumn":16},{"ruleId":"404","severity":1,"message":"405","line":85,"column":19,"nodeType":"406","messageId":"407","endLine":85,"endColumn":21},{"ruleId":"413","severity":1,"message":"426","line":3,"column":9,"nodeType":"415","messageId":"416","endLine":3,"endColumn":12},{"ruleId":"413","severity":1,"message":"427","line":3,"column":13,"nodeType":"415","messageId":"416","endLine":3,"endColumn":16},{"ruleId":"413","severity":1,"message":"444","line":3,"column":17,"nodeType":"415","messageId":"416","endLine":3,"endColumn":22},{"ruleId":"413","severity":1,"message":"428","line":3,"column":23,"nodeType":"415","messageId":"416","endLine":3,"endColumn":32},{"ruleId":"413","severity":1,"message":"445","line":9,"column":33,"nodeType":"415","messageId":"416","endLine":9,"endColumn":38},{"ruleId":"413","severity":1,"message":"446","line":41,"column":12,"nodeType":"415","messageId":"416","endLine":41,"endColumn":17},{"ruleId":"413","severity":1,"message":"447","line":41,"column":18,"nodeType":"415","messageId":"416","endLine":41,"endColumn":26},{"ruleId":"413","severity":1,"message":"448","line":46,"column":8,"nodeType":"415","messageId":"416","endLine":46,"endColumn":12},{"ruleId":"413","severity":1,"message":"449","line":47,"column":8,"nodeType":"415","messageId":"416","endLine":47,"endColumn":11},{"ruleId":"413","severity":1,"message":"450","line":49,"column":7,"nodeType":"415","messageId":"416","endLine":49,"endColumn":18},{"ruleId":"413","severity":1,"message":"451","line":50,"column":7,"nodeType":"415","messageId":"416","endLine":50,"endColumn":17},{"ruleId":"413","severity":1,"message":"452","line":54,"column":7,"nodeType":"415","messageId":"416","endLine":54,"endColumn":20},{"ruleId":"400","severity":1,"message":"453","line":62,"column":7,"nodeType":"402","endLine":62,"endColumn":29,"suggestions":"454"},{"ruleId":"413","severity":1,"message":"440","line":66,"column":15,"nodeType":"415","messageId":"416","endLine":66,"endColumn":21},{"ruleId":"404","severity":1,"message":"409","line":79,"column":14,"nodeType":"406","messageId":"407","endLine":79,"endColumn":16},{"ruleId":"413","severity":1,"message":"455","line":18,"column":7,"nodeType":"415","messageId":"416","endLine":18,"endColumn":21},{"ruleId":"413","severity":1,"message":"456","line":29,"column":10,"nodeType":"415","messageId":"416","endLine":29,"endColumn":14},{"ruleId":"413","severity":1,"message":"441","line":45,"column":10,"nodeType":"415","messageId":"416","endLine":45,"endColumn":12},{"ruleId":"413","severity":1,"message":"457","line":45,"column":13,"nodeType":"415","messageId":"416","endLine":45,"endColumn":18},{"ruleId":"404","severity":1,"message":"405","line":69,"column":40,"nodeType":"406","messageId":"407","endLine":69,"endColumn":42},{"ruleId":"404","severity":1,"message":"405","line":74,"column":42,"nodeType":"406","messageId":"407","endLine":74,"endColumn":44},{"ruleId":"400","severity":1,"message":"438","line":81,"column":5,"nodeType":"402","endLine":81,"endColumn":45,"suggestions":"458"},{"ruleId":"404","severity":1,"message":"405","line":102,"column":22,"nodeType":"406","messageId":"407","endLine":102,"endColumn":24},{"ruleId":"404","severity":1,"message":"405","line":159,"column":12,"nodeType":"406","messageId":"407","endLine":159,"endColumn":14},{"ruleId":"404","severity":1,"message":"405","line":164,"column":17,"nodeType":"406","messageId":"407","endLine":164,"endColumn":19},{"ruleId":"404","severity":1,"message":"405","line":168,"column":17,"nodeType":"406","messageId":"407","endLine":168,"endColumn":19},{"ruleId":"404","severity":1,"message":"405","line":236,"column":93,"nodeType":"406","messageId":"407","endLine":236,"endColumn":95},{"ruleId":"404","severity":1,"message":"405","line":242,"column":58,"nodeType":"406","messageId":"407","endLine":242,"endColumn":60},{"ruleId":"431","severity":1,"message":"432","line":251,"column":31,"nodeType":"412","endLine":251,"endColumn":113},{"ruleId":"431","severity":1,"message":"432","line":372,"column":33,"nodeType":"412","endLine":372,"endColumn":112},{"ruleId":"404","severity":1,"message":"405","line":398,"column":89,"nodeType":"406","messageId":"407","endLine":398,"endColumn":91},{"ruleId":"404","severity":1,"message":"405","line":404,"column":95,"nodeType":"406","messageId":"407","endLine":404,"endColumn":97},{"ruleId":"404","severity":1,"message":"409","line":33,"column":28,"nodeType":"406","messageId":"407","endLine":33,"endColumn":30},{"ruleId":"400","severity":1,"message":"459","line":41,"column":9,"nodeType":"402","endLine":41,"endColumn":20,"suggestions":"460"},{"ruleId":"404","severity":1,"message":"409","line":74,"column":38,"nodeType":"406","messageId":"407","endLine":74,"endColumn":40},{"ruleId":"404","severity":1,"message":"409","line":77,"column":38,"nodeType":"406","messageId":"407","endLine":77,"endColumn":40},{"ruleId":"404","severity":1,"message":"405","line":88,"column":30,"nodeType":"406","messageId":"407","endLine":88,"endColumn":32},{"ruleId":"431","severity":1,"message":"432","line":124,"column":37,"nodeType":"412","endLine":124,"endColumn":111},{"ruleId":"413","severity":1,"message":"461","line":4,"column":49,"nodeType":"415","messageId":"416","endLine":4,"endColumn":59},{"ruleId":"413","severity":1,"message":"462","line":8,"column":3,"nodeType":"415","messageId":"416","endLine":8,"endColumn":18},{"ruleId":"413","severity":1,"message":"463","line":18,"column":17,"nodeType":"415","messageId":"416","endLine":18,"endColumn":24},{"ruleId":"404","severity":1,"message":"409","line":35,"column":28,"nodeType":"406","messageId":"407","endLine":35,"endColumn":30},{"ruleId":"400","severity":1,"message":"459","line":43,"column":9,"nodeType":"402","endLine":43,"endColumn":20,"suggestions":"464"},{"ruleId":"404","severity":1,"message":"409","line":76,"column":38,"nodeType":"406","messageId":"407","endLine":76,"endColumn":40},{"ruleId":"404","severity":1,"message":"409","line":79,"column":38,"nodeType":"406","messageId":"407","endLine":79,"endColumn":40},{"ruleId":"404","severity":1,"message":"405","line":90,"column":30,"nodeType":"406","messageId":"407","endLine":90,"endColumn":32},{"ruleId":"404","severity":1,"message":"405","line":116,"column":21,"nodeType":"406","messageId":"407","endLine":116,"endColumn":23},{"ruleId":"431","severity":1,"message":"432","line":135,"column":35,"nodeType":"412","endLine":135,"endColumn":78},{"ruleId":"400","severity":1,"message":"401","line":12,"column":7,"nodeType":"402","endLine":12,"endColumn":43,"suggestions":"465"},{"ruleId":"404","severity":1,"message":"405","line":25,"column":9,"nodeType":"406","messageId":"407","endLine":25,"endColumn":11},{"ruleId":"404","severity":1,"message":"409","line":29,"column":20,"nodeType":"406","messageId":"407","endLine":29,"endColumn":22},{"ruleId":"404","severity":1,"message":"405","line":43,"column":43,"nodeType":"406","messageId":"407","endLine":43,"endColumn":45},{"ruleId":"404","severity":1,"message":"405","line":107,"column":26,"nodeType":"406","messageId":"407","endLine":107,"endColumn":28},{"ruleId":"400","severity":1,"message":"401","line":12,"column":7,"nodeType":"402","endLine":12,"endColumn":46,"suggestions":"466"},{"ruleId":"404","severity":1,"message":"405","line":25,"column":9,"nodeType":"406","messageId":"407","endLine":25,"endColumn":11},{"ruleId":"404","severity":1,"message":"405","line":42,"column":43,"nodeType":"406","messageId":"407","endLine":42,"endColumn":45},{"ruleId":"404","severity":1,"message":"405","line":111,"column":26,"nodeType":"406","messageId":"407","endLine":111,"endColumn":28},{"ruleId":"413","severity":1,"message":"424","line":1,"column":17,"nodeType":"415","messageId":"416","endLine":1,"endColumn":26},{"ruleId":"413","severity":1,"message":"425","line":1,"column":28,"nodeType":"415","messageId":"416","endLine":1,"endColumn":37},{"ruleId":"413","severity":1,"message":"426","line":4,"column":11,"nodeType":"415","messageId":"416","endLine":4,"endColumn":14},{"ruleId":"413","severity":1,"message":"427","line":4,"column":16,"nodeType":"415","messageId":"416","endLine":4,"endColumn":19},{"ruleId":"413","severity":1,"message":"428","line":4,"column":26,"nodeType":"415","messageId":"416","endLine":4,"endColumn":35},{"ruleId":"400","severity":1,"message":"438","line":44,"column":6,"nodeType":"402","endLine":44,"endColumn":42,"suggestions":"467"},{"ruleId":"404","severity":1,"message":"405","line":65,"column":24,"nodeType":"406","messageId":"407","endLine":65,"endColumn":26},{"ruleId":"413","severity":1,"message":"468","line":3,"column":9,"nodeType":"415","messageId":"416","endLine":3,"endColumn":14},{"ruleId":"413","severity":1,"message":"446","line":42,"column":12,"nodeType":"415","messageId":"416","endLine":42,"endColumn":17},{"ruleId":"413","severity":1,"message":"447","line":42,"column":19,"nodeType":"415","messageId":"416","endLine":42,"endColumn":27},{"ruleId":"413","severity":1,"message":"440","line":50,"column":19,"nodeType":"415","messageId":"416","endLine":50,"endColumn":25},{"ruleId":"413","severity":1,"message":"469","line":60,"column":17,"nodeType":"415","messageId":"416","endLine":60,"endColumn":25},{"ruleId":"413","severity":1,"message":"470","line":7,"column":106,"nodeType":"415","messageId":"416","endLine":7,"endColumn":112},{"ruleId":"413","severity":1,"message":"471","line":10,"column":8,"nodeType":"415","messageId":"416","endLine":10,"endColumn":14},{"ruleId":"413","severity":1,"message":"455","line":19,"column":7,"nodeType":"415","messageId":"416","endLine":19,"endColumn":21},{"ruleId":"413","severity":1,"message":"456","line":29,"column":10,"nodeType":"415","messageId":"416","endLine":29,"endColumn":14},{"ruleId":"413","severity":1,"message":"446","line":30,"column":10,"nodeType":"415","messageId":"416","endLine":30,"endColumn":15},{"ruleId":"413","severity":1,"message":"447","line":30,"column":16,"nodeType":"415","messageId":"416","endLine":30,"endColumn":24},{"ruleId":"400","severity":1,"message":"438","line":70,"column":6,"nodeType":"402","endLine":70,"endColumn":44,"suggestions":"472"},{"ruleId":"473","severity":1,"message":"474","line":119,"column":19,"nodeType":"402","messageId":"475","endLine":174,"endColumn":4},{"ruleId":"404","severity":1,"message":"405","line":182,"column":19,"nodeType":"406","messageId":"407","endLine":182,"endColumn":21},{"ruleId":"404","severity":1,"message":"405","line":182,"column":45,"nodeType":"406","messageId":"407","endLine":182,"endColumn":47},{"ruleId":"404","severity":1,"message":"405","line":187,"column":19,"nodeType":"406","messageId":"407","endLine":187,"endColumn":21},{"ruleId":"404","severity":1,"message":"405","line":187,"column":46,"nodeType":"406","messageId":"407","endLine":187,"endColumn":48},{"ruleId":"413","severity":1,"message":"468","line":5,"column":9,"nodeType":"415","messageId":"416","endLine":5,"endColumn":14},{"ruleId":"413","severity":1,"message":"476","line":8,"column":8,"nodeType":"415","messageId":"416","endLine":8,"endColumn":14},{"ruleId":"413","severity":1,"message":"470","line":13,"column":3,"nodeType":"415","messageId":"416","endLine":13,"endColumn":9},{"ruleId":"413","severity":1,"message":"471","line":16,"column":8,"nodeType":"415","messageId":"416","endLine":16,"endColumn":14},{"ruleId":"413","severity":1,"message":"443","line":36,"column":11,"nodeType":"415","messageId":"416","endLine":36,"endColumn":22},{"ruleId":"400","severity":1,"message":"401","line":54,"column":5,"nodeType":"402","endLine":54,"endColumn":60,"suggestions":"477"},{"ruleId":"413","severity":1,"message":"440","line":58,"column":13,"nodeType":"415","messageId":"416","endLine":58,"endColumn":19},{"ruleId":"404","severity":1,"message":"405","line":82,"column":19,"nodeType":"406","messageId":"407","endLine":82,"endColumn":21},{"ruleId":"404","severity":1,"message":"405","line":82,"column":45,"nodeType":"406","messageId":"407","endLine":82,"endColumn":47},{"ruleId":"404","severity":1,"message":"405","line":87,"column":19,"nodeType":"406","messageId":"407","endLine":87,"endColumn":21},{"ruleId":"404","severity":1,"message":"405","line":87,"column":46,"nodeType":"406","messageId":"407","endLine":87,"endColumn":48},{"ruleId":"478","severity":1,"message":"479","line":196,"column":4,"nodeType":"480","messageId":"407","endLine":196,"endColumn":9},{"ruleId":"413","severity":1,"message":"469","line":57,"column":17,"nodeType":"415","messageId":"416","endLine":57,"endColumn":25},{"ruleId":"392","replacedBy":"481"},{"ruleId":"394","replacedBy":"482"},{"ruleId":"396","severity":1,"message":"397","line":90,"column":45,"nodeType":"398","messageId":"399","endLine":90,"endColumn":47},"no-native-reassign",["483"],"no-negated-in-lhs",["484"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["485"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["486"],"Expected '!==' and instead saw '!='.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'fetchusersdata' is defined but never used.","Identifier","unusedVar","'MDBContainer' is defined but never used.","'MDBRow' is defined but never used.","'MDBCol' is defined but never used.","'MDBBtn' is defined but never used.","'MDBCard' is defined but never used.","'MDBInput' is defined but never used.",["487"],"'Component' is defined but never used.","'useEffect' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'CardGroup' is defined but never used.","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["488"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["489"],"'Link' is defined but never used.","'BiPlusMedical' is defined but never used.","'BiSearch' is defined but never used.","'FiAlignJustify' is defined but never used.","React Hook useEffect has missing dependencies: 'obj' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["490"],"'values' is assigned a value but never used.","'op' is assigned a value but never used.",["491"],"'RangePicker' is assigned a value but never used.","'Modal' is defined but never used.","'Space' is defined but never used.","'error' is assigned a value but never used.","'setError' is assigned a value but never used.","'show' is assigned a value but never used.","'ids' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'handleShow' is assigned a value but never used.","'deleteHandler' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'form' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["492"],"'formTailLayout' is assigned a value but never used.","'form' is assigned a value but never used.","'setOp' is assigned a value but never used.",["493"],"React Hook useEffect has a missing dependency: 'active'. Either include it or remove the dependency array.",["494"],"'Breadcrumb' is defined but never used.","'DesktopOutlined' is defined but never used.","'Content' is assigned a value but never used.",["495"],["496"],["497"],["498"],"'login' is defined but never used.","'response' is assigned a value but never used.","'Switch' is defined but never used.","'Option' is assigned a value but never used.",["499"],"no-sparse-arrays","Unexpected comma in middle of array.","unexpectedSparseArray","'moment' is defined but never used.",["500"],"no-dupe-keys","Duplicate key 'error'.","ObjectExpression",["483"],["484"],"no-global-assign","no-unsafe-negation",{"desc":"501","fix":"502"},{"desc":"503","fix":"504"},{"desc":"503","fix":"505"},{"desc":"506","fix":"507"},{"desc":"508","fix":"509"},{"desc":"510","fix":"511"},{"desc":"512","fix":"513"},{"desc":"514","fix":"515"},{"desc":"516","fix":"517"},{"desc":"518","fix":"519"},{"desc":"518","fix":"520"},{"desc":"521","fix":"522"},{"desc":"523","fix":"524"},{"desc":"525","fix":"526"},{"desc":"527","fix":"528"},{"desc":"529","fix":"530"},"Update the dependencies array to be: [props.location.pathname, props.autoCheckLogin, props.token, props]",{"range":"531","text":"532"},"Update the dependencies array to be: [props, props.fetchstatedata]",{"range":"533","text":"534"},{"range":"535","text":"534"},"Update the dependencies array to be: [props.history, props.token]",{"range":"536","text":"537"},"Update the dependencies array to be: [props, props.fetchDashboradRecord]",{"range":"538","text":"539"},"Update the dependencies array to be: [obj, props, props.fetchstatedata, props.singlestate]",{"range":"540","text":"541"},"Update the dependencies array to be: [obj, props, props.fetchcitiesdata, props.fetchstatedata, props.singlecities]",{"range":"542","text":"543"},"Update the dependencies array to be: [form, props, props.fetchstatedata]",{"range":"544","text":"545"},"Update the dependencies array to be: [obj, props, props.fetchmoviedata, props.singlemovie]",{"range":"546","text":"547"},"Update the dependencies array to be: [active, props.err]",{"range":"548","text":"549"},{"range":"550","text":"549"},"Update the dependencies array to be: [props, props.getAllUser, props.singleuser1]",{"range":"551","text":"552"},"Update the dependencies array to be: [props, props.getAllTheater, props.singleuser1]",{"range":"553","text":"554"},"Update the dependencies array to be: [obj, props, props.getscreen, props.singlescreen]",{"range":"555","text":"556"},"Update the dependencies array to be: [obj, props, props.gettscreen, props.singletscreen]",{"range":"557","text":"558"},"Update the dependencies array to be: [props.getscreen, props.fetchmoviedata, props.singleuser, props]",{"range":"559","text":"560"},[846,904],"[props.location.pathname, props.autoCheckLogin, props.token, props]",[449,471],"[props, props.fetchstatedata]",[549,571],[430,443],"[props.history, props.token]",[498,526],"[props, props.fetchDashboradRecord]",[1065,1105],"[obj, props, props.fetchstatedata, props.singlestate]",[1372,1436],"[obj, props, props.fetchcitiesdata, props.fetchstatedata, props.singlecities]",[1453,1475],"[form, props, props.fetchstatedata]",[2508,2548],"[obj, props, props.fetchmoviedata, props.singlemovie]",[1125,1136],"[active, props.err]",[1140,1151],[446,482],"[props, props.getAllUser, props.singleuser1]",[452,491],"[props, props.getAllTheater, props.singleuser1]",[1206,1242],"[obj, props, props.getscreen, props.singlescreen]",[2116,2154],"[obj, props, props.gettscreen, props.singletscreen]",[1259,1314],"[props.getscreen, props.fetchmoviedata, props.singleuser, props]"]