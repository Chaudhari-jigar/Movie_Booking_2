[{"D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\index.js":"1","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\App.js":"2","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\reportWebVitals.js":"3","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\reducer\\cityReducer.js":"4","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\reducer\\stateReducer.js":"5","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\reducer\\theaterscreenReducer.js":"6","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\reducer\\movieReducer.js":"7","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\reducer\\screenReducer.js":"8","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\reducer\\userReducer.js":"9","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\registerTask.js":"10","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\actionTypes.js":"11","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\cityActionTypes.js":"12","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\movieActionTypes.js":"13","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\theaterscreenActionType.js":"14","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\screenActionType.js":"15","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\userActionTypes.js":"16","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\TheaterTask.js":"17","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\stateTask.js":"18","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\All Registration form\\Temp.js":"19","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\All Registration form\\loginForm.js":"20","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\action\\userAction.js":"21","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\All Registration form\\userRegistration.js":"22","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\All Registration form\\theaterRegistration.js":"23","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\All Registration form\\dashboard.js":"24","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\TheaterPanel\\addScreen.js":"25","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\TheaterPanel\\dashboard.js":"26","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\TheaterPanel\\screenList.js":"27","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\TheaterPanel\\addtheaterscreen.js":"28","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\State_All_Form\\addForm.js":"29","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\TheaterPanel\\theaterscreenlist.js":"30","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\common\\Header.js":"31","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\common\\HeaderTheater.js":"32","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\State_All_Form\\stateList.js":"33","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\City_All_Form\\addForm.js":"34","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\City_All_Form\\cityList.js":"35","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\Movie_All_Form\\addMovie.js":"36","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\Movie_All_Form\\movieList.js":"37","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\Users_Theater_List\\allUsersList.js":"38","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\Users_Theater_List\\allTheaterList.js":"39","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\action\\stateAction.js":"40","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\action\\cityAction.js":"41","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\action\\screenAction.js":"42","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\action\\movieAction.js":"43","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\action\\theaterscreenAction.js":"44","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\index.js":"45","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\App.js":"46","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\reportWebVitals.js":"47","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\reducer\\stateReducer.js":"48","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\reducer\\cityReducer.js":"49","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\reducer\\screenReducer.js":"50","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\reducer\\theaterscreenReducer.js":"51","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\reducer\\movieReducer.js":"52","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\reducer\\userReducer.js":"53","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\registerTask.js":"54","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\actionTypes.js":"55","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\screenActionType.js":"56","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\cityActionTypes.js":"57","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\theaterscreenActionType.js":"58","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\movieActionTypes.js":"59","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\userActionTypes.js":"60","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\TheaterTask.js":"61","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\stateTask.js":"62","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\action\\userAction.js":"63","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\All Registration form\\loginForm.js":"64","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\All Registration form\\Temp.js":"65","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\All Registration form\\userRegistration.js":"66","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\All Registration form\\theaterRegistration.js":"67","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\All Registration form\\dashboard.js":"68","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\TheaterPanel\\dashboard.js":"69","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\TheaterPanel\\screenList.js":"70","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\TheaterPanel\\addScreen.js":"71","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\TheaterPanel\\bookingDetails.js":"72","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\TheaterPanel\\addtheaterscreen.js":"73","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\State_All_Form\\addForm.js":"74","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\TheaterPanel\\theaterscreenlist.js":"75","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\State_All_Form\\stateList.js":"76","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\common\\Header.js":"77","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\common\\HeaderTheater.js":"78","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\City_All_Form\\addForm.js":"79","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\City_All_Form\\cityList.js":"80","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\Users_Theater_List\\allUsersList.js":"81","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\Users_Theater_List\\allTheaterList.js":"82","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\Movie_All_Form\\addMovie.js":"83","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\Movie_All_Form\\movieList.js":"84","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\action\\stateAction.js":"85","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\action\\cityAction.js":"86","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\action\\screenAction.js":"87","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\action\\theaterscreenAction.js":"88","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\action\\movieAction.js":"89","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\reducer\\moviereviewReducer.js":"90","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\Users_Theater_List\\movieReviewList.js":"91","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\moviereviewActionTypes.js":"92","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\action\\moviereviewAction.js":"93"},{"size":1441,"mtime":1609593460875,"results":"94","hashOfConfig":"95"},{"size":323,"mtime":1609593460852,"results":"96","hashOfConfig":"95"},{"size":375,"mtime":1609593460876,"results":"97","hashOfConfig":"95"},{"size":4284,"mtime":1609593460881,"results":"98","hashOfConfig":"95"},{"size":3671,"mtime":1609593460882,"results":"99","hashOfConfig":"95"},{"size":4161,"mtime":1610379869916,"results":"100","hashOfConfig":"95"},{"size":4271,"mtime":1610113690287,"results":"101","hashOfConfig":"95"},{"size":3385,"mtime":1609593460881,"results":"102","hashOfConfig":"95"},{"size":8513,"mtime":1610380547037,"results":"103","hashOfConfig":"95"},{"size":4045,"mtime":1610367397426,"results":"104","hashOfConfig":"95"},{"size":1098,"mtime":1609593460879,"results":"105","hashOfConfig":"95"},{"size":1130,"mtime":1609593460879,"results":"106","hashOfConfig":"95"},{"size":872,"mtime":1609593460880,"results":"107","hashOfConfig":"95"},{"size":1110,"mtime":1609593460883,"results":"108","hashOfConfig":"95"},{"size":872,"mtime":1609593460883,"results":"109","hashOfConfig":"95"},{"size":2525,"mtime":1610369742751,"results":"110","hashOfConfig":"95"},{"size":1476,"mtime":1610367596674,"results":"111","hashOfConfig":"95"},{"size":1777,"mtime":1609593460876,"results":"112","hashOfConfig":"95"},{"size":2501,"mtime":1609593460864,"results":"113","hashOfConfig":"95"},{"size":3802,"mtime":1609593460865,"results":"114","hashOfConfig":"95"},{"size":8002,"mtime":1610380962645,"results":"115","hashOfConfig":"95"},{"size":12120,"mtime":1609593460866,"results":"116","hashOfConfig":"95"},{"size":12947,"mtime":1609593460865,"results":"117","hashOfConfig":"95"},{"size":3203,"mtime":1610114678616,"results":"118","hashOfConfig":"95"},{"size":4271,"mtime":1610382855436,"results":"119","hashOfConfig":"95"},{"size":3170,"mtime":1610117285255,"results":"120","hashOfConfig":"95"},{"size":6379,"mtime":1610382870273,"results":"121","hashOfConfig":"95"},{"size":9076,"mtime":1610115747624,"results":"122","hashOfConfig":"95"},{"size":2526,"mtime":1610115632902,"results":"123","hashOfConfig":"95"},{"size":12690,"mtime":1610367238063,"results":"124","hashOfConfig":"95"},{"size":9318,"mtime":1610116486758,"results":"125","hashOfConfig":"95"},{"size":8582,"mtime":1610367481777,"results":"126","hashOfConfig":"95"},{"size":5791,"mtime":1609593460869,"results":"127","hashOfConfig":"95"},{"size":4472,"mtime":1610115902605,"results":"128","hashOfConfig":"95"},{"size":7251,"mtime":1610119219543,"results":"129","hashOfConfig":"95"},{"size":13179,"mtime":1610115853019,"results":"130","hashOfConfig":"95"},{"size":20521,"mtime":1610113972643,"results":"131","hashOfConfig":"95"},{"size":5137,"mtime":1610115810094,"results":"132","hashOfConfig":"95"},{"size":5118,"mtime":1610115796388,"results":"133","hashOfConfig":"95"},{"size":2845,"mtime":1609593460878,"results":"134","hashOfConfig":"95"},{"size":3614,"mtime":1609593460877,"results":"135","hashOfConfig":"95"},{"size":3735,"mtime":1609593460878,"results":"136","hashOfConfig":"95"},{"size":3047,"mtime":1609593460878,"results":"137","hashOfConfig":"95"},{"size":3833,"mtime":1610345831163,"results":"138","hashOfConfig":"95"},{"size":1510,"mtime":1611711907938,"results":"139","hashOfConfig":"140"},{"size":311,"mtime":1610335264000,"results":"141","hashOfConfig":"140"},{"size":362,"mtime":1610335264000,"results":"142","hashOfConfig":"140"},{"size":3558,"mtime":1610335264000,"results":"143","hashOfConfig":"140"},{"size":4153,"mtime":1610335264000,"results":"144","hashOfConfig":"140"},{"size":3273,"mtime":1610335264000,"results":"145","hashOfConfig":"140"},{"size":4043,"mtime":1610335264000,"results":"146","hashOfConfig":"140"},{"size":4150,"mtime":1610335264000,"results":"147","hashOfConfig":"140"},{"size":8235,"mtime":1611721456390,"results":"148","hashOfConfig":"140"},{"size":4022,"mtime":1611712238006,"results":"149","hashOfConfig":"140"},{"size":1074,"mtime":1610335264000,"results":"150","hashOfConfig":"140"},{"size":854,"mtime":1610335264000,"results":"151","hashOfConfig":"140"},{"size":1108,"mtime":1610335264000,"results":"152","hashOfConfig":"140"},{"size":1092,"mtime":1610335264000,"results":"153","hashOfConfig":"140"},{"size":854,"mtime":1610335264000,"results":"154","hashOfConfig":"140"},{"size":2476,"mtime":1611721449291,"results":"155","hashOfConfig":"140"},{"size":1438,"mtime":1610335264000,"results":"156","hashOfConfig":"140"},{"size":1883,"mtime":1611712156773,"results":"157","hashOfConfig":"140"},{"size":7559,"mtime":1611721398397,"results":"158","hashOfConfig":"140"},{"size":3705,"mtime":1610335264000,"results":"159","hashOfConfig":"140"},{"size":2442,"mtime":1610335264000,"results":"160","hashOfConfig":"140"},{"size":11856,"mtime":1611642431002,"results":"161","hashOfConfig":"140"},{"size":12667,"mtime":1611642402767,"results":"162","hashOfConfig":"140"},{"size":3137,"mtime":1610335264000,"results":"163","hashOfConfig":"140"},{"size":3107,"mtime":1610335264000,"results":"164","hashOfConfig":"140"},{"size":6182,"mtime":1610335264000,"results":"165","hashOfConfig":"140"},{"size":4158,"mtime":1610335264000,"results":"166","hashOfConfig":"140"},{"size":4258,"mtime":1611721697667,"results":"167","hashOfConfig":"140"},{"size":8856,"mtime":1610335264000,"results":"168","hashOfConfig":"140"},{"size":2443,"mtime":1610335264000,"results":"169","hashOfConfig":"140"},{"size":12353,"mtime":1610335264000,"results":"170","hashOfConfig":"140"},{"size":5622,"mtime":1611414826648,"results":"171","hashOfConfig":"140"},{"size":8401,"mtime":1611712271549,"results":"172","hashOfConfig":"140"},{"size":8372,"mtime":1610335264000,"results":"173","hashOfConfig":"140"},{"size":4335,"mtime":1610335264000,"results":"174","hashOfConfig":"140"},{"size":7028,"mtime":1610335264000,"results":"175","hashOfConfig":"140"},{"size":4986,"mtime":1610335264000,"results":"176","hashOfConfig":"140"},{"size":4964,"mtime":1610335264000,"results":"177","hashOfConfig":"140"},{"size":12944,"mtime":1610335264000,"results":"178","hashOfConfig":"140"},{"size":19973,"mtime":1611714227399,"results":"179","hashOfConfig":"140"},{"size":2749,"mtime":1610335264000,"results":"180","hashOfConfig":"140"},{"size":3495,"mtime":1610335264000,"results":"181","hashOfConfig":"140"},{"size":3617,"mtime":1610335264000,"results":"182","hashOfConfig":"140"},{"size":3713,"mtime":1610335264000,"results":"183","hashOfConfig":"140"},{"size":2945,"mtime":1610335264000,"results":"184","hashOfConfig":"140"},{"size":1436,"mtime":1611712296655,"results":"185","hashOfConfig":"140"},{"size":4502,"mtime":1611715987287,"results":"186","hashOfConfig":"140"},{"size":390,"mtime":1611711766362,"results":"187","hashOfConfig":"140"},{"size":1218,"mtime":1611712183640,"results":"188","hashOfConfig":"140"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},"jp33ap",{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"191"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"191"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"191"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"191"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"191"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"191"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"191"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"191"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"191"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"249","messages":"250","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"191"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"254","messages":"255","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"191"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"191"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"191"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"191"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"268","messages":"269","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"191"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"191"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"191"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"191"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"191"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"191"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"191"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"191"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},"12bgwkd",{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"302"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"302"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"302"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"302"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"302"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"302"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"302"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"302"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"302"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"302"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"302"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"302"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"302"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"302"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"302"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"302"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"302"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"302"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"302"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"302"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"302"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"302"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"302"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"302"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"302"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"302"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"302"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"302"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"302"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"422","usedDeprecatedRules":"302"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"425","usedDeprecatedRules":"302"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\index.js",[],["430","431"],"D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\App.js",[],"D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\reportWebVitals.js",[],"D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\reducer\\cityReducer.js",["432"],"import * as actionTypes from \"../cityActionTypes\";\r\nconst initalstore ={\r\n    cities:[],\r\n    singlecities:{},\r\n    loading:false,\r\n    error:\"\",\r\n}\r\n\r\nconst store = (state = initalstore,action) =>{\r\n    switch(action.type){\r\n        case actionTypes.INIT_FETCH_CITIES:\r\n            return{\r\n                ...state,\r\n                loading:true,\r\n            }\r\n        case actionTypes.FETCH_CITIES_SUCCESS:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                cities:action.cities\r\n            }\r\n\r\n        case actionTypes.FETCH_CITIES_FAILED:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                error:action.error,\r\n            }\r\n        case actionTypes.INIT_ADD_CITIES:\r\n                    return{\r\n                        ...state,\r\n                        loading:true,\r\n                    };\r\n        case actionTypes.ADD_CITIES_SUCCESS:\r\n\r\n                return{\r\n                    ...state,\r\n                    loading:false                  \r\n                }\r\n        case actionTypes.ADD_CITIES_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n        case actionTypes.INIT_DELETE_CITIES:\r\n                    return{\r\n                        ...state,\r\n                        loading:true,\r\n    \r\n                    };\r\n        case actionTypes.DELETE_CITIES_SUCCESS:\r\n                let citiest = state.cities.filter(statese => statese._id !== action.id);\r\n                // let studentst = state.states.filter(student => student._id !== action.id);\r\n                return{\r\n                    ...state,\r\n                    loading:false,   \r\n                    cities:citiest,\r\n                }\r\n        case actionTypes.DELETE_CITIES_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n        case actionTypes.INIT_SINGLE_CITIES:\r\n                    return{\r\n                        ...state,\r\n                        loading:true,    \r\n                    };\r\n        case actionTypes.SINGLE_CITIES_SUCCESS:\r\n            // console.log(ac)\r\n                return{\r\n                    ...state,\r\n                    loading:false, \r\n                    singlecities:action.singlecities             \r\n                }\r\n        case actionTypes.SINGLE_CITIES_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n        case actionTypes.INIT_UPDATE_CITIES:\r\n                    return{\r\n                        ...state,\r\n                        loading:true,\r\n                    };\r\n        case actionTypes.UPDATE_CITIES_SUCCESS:\r\n                let statesst = [...state.cities];\r\n                statesst.map(order => {\r\n                    if(order._id === action.cities._id)\r\n                    {\r\n                        order.city_name = action.cities.city_name\r\n                        order.state_id = action.cities.state_id;\r\n                    }\r\n                });  \r\n                // console.log(action.cities.state_id);          \r\n                return{\r\n                    ...state,\r\n                    loading:false, \r\n                    cities:statesst\r\n                }\r\n        case actionTypes.UPDATE_CITIES_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n        case actionTypes.INIT_FETCHSTATESBYCITYID_CITIES:\r\n            return{\r\n                ...state,\r\n                loading:true,\r\n            }\r\n        case actionTypes.FETCHSTATESBYCITYID_CITIES_SUCCESS:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                cities:action.cities\r\n            }\r\n        case actionTypes.FETCHSTATESBYCITYID_CITIES_FAILED:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                error:action.error,\r\n            }\r\n            default :\r\n                return state;\r\n    }\r\n}\r\n\r\nexport default store;","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\reducer\\stateReducer.js",["433"],"import * as actionTypes from \"../actionTypes\";\r\nconst initalstore ={\r\n    states:[],\r\n    singlestate:{},\r\n    loading:false,\r\n    error:\"\",\r\n}\r\n\r\nconst store = (state = initalstore,action) =>{\r\n    switch(action.type){\r\n        case actionTypes.INIT_FETCH_STATES:\r\n            return{\r\n                ...state,\r\n                loading:true,\r\n            }\r\n        case actionTypes.FETCH_STATES_SUCCESS:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                states:action.states\r\n            }\r\n\r\n        case actionTypes.FETCH_STATES_FAILED:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                error:action.error,\r\n            }\r\n        case actionTypes.INIT_ADD_STATES:\r\n                    return{\r\n                        ...state,\r\n                        loading:true,\r\n                    };\r\n        case actionTypes.ADD_STATES_SUCCESS:\r\n\r\n                return{\r\n                    ...state,\r\n                    loading:false                  \r\n                }\r\n        case actionTypes.ADD_STATES_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n        case actionTypes.INIT_DELETE_STATES:\r\n                    return{\r\n                        ...state,\r\n                        loading:true,\r\n    \r\n                    };\r\n        case actionTypes.DELETE_STATES_SUCCESS:\r\n                let statees = state.states.filter(statese => statese._id !== action.id);\r\n                // let studentst = state.states.filter(student => student._id !== action.id);\r\n                return{\r\n                    ...state,\r\n                    loading:false,   \r\n                    states:statees,\r\n                }\r\n        case actionTypes.DELETE_STATES_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n        case actionTypes.INIT_SINGLE_STATES:\r\n                    return{\r\n                        ...state,\r\n                        loading:true,    \r\n                    };\r\n        case actionTypes.SINGLE_STATES_SUCCESS:\r\n            console.log(action.singlestate)\r\n                return{\r\n                    ...state,\r\n                    loading:false, \r\n                    singlestate:action.singlestate             \r\n                }\r\n        case actionTypes.SINGLE_STATES_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n        case actionTypes.INIT_UPDATE_STATES:\r\n                    return{\r\n                        ...state,\r\n                        loading:true,\r\n                    };\r\n        case actionTypes.UPDATE_STATES_SUCCESS:\r\n            let statesst = [...state.states];\r\n            statesst.map(order => {\r\n                if(order._id === action.states._id)\r\n                {\r\n                    order.state_name = action.states.state_name                    \r\n                }\r\n            });\r\n            // console.log(action.singlestates);\r\n                return{\r\n                    ...state,\r\n                    loading:false, \r\n                    states:statesst             \r\n                }\r\n        case actionTypes.UPDATE_STATES_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n            default :\r\n                return state;\r\n    }\r\n}\r\n\r\nexport default store;","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\reducer\\theaterscreenReducer.js",["434"],"D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\reducer\\movieReducer.js",["435"],"import * as actionTypes from \"../movieActionTypes\";\r\nconst initalstore ={\r\n    movies:[],\r\n    singlemovie:{},\r\n    loading:false,\r\n    error:\"\",\r\n}\r\n\r\nconst store = (state = initalstore,action) =>{\r\n    switch(action.type){\r\n        case actionTypes.INIT_FETCH_MOVIES:\r\n            return{\r\n                ...state,\r\n                loading:true,\r\n            }\r\n        case actionTypes.FETCH_MOVIES_SUCCESS:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                movies:action.movies\r\n            }\r\n\r\n        case actionTypes.FETCH_MOVIES_FAILED:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                error:action.error,\r\n            }\r\n        case actionTypes.INIT_ADD_MOVIES:\r\n                    return{\r\n                        ...state,\r\n                        loading:true,\r\n                    };\r\n        case actionTypes.ADD_MOVIES_SUCCESS:\r\n                return{\r\n                    ...state,\r\n                    loading:false                  \r\n                }\r\n        case actionTypes.ADD_MOVIES_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n        case actionTypes.INIT_DELETE_MOVIES:\r\n                    return{\r\n                        ...state,\r\n                        loading:true,\r\n    \r\n                    };\r\n        case actionTypes.DELETE_MOVIES_SUCCESS:\r\n                let moviessd= state.movies.filter(movies1 => movies1._id !== action.id);\r\n                return{\r\n                    ...state,\r\n                    loading:false,   \r\n                    movies:moviessd,\r\n                }\r\n        case actionTypes.DELETE_MOVIES_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n        case actionTypes.INIT_SINGLE_MOVIES:\r\n                    return{\r\n                        ...state,\r\n                        loading:true,    \r\n                    };\r\n        case actionTypes.SINGLE_MOVIES_SUCCESS:\r\n            console.log(action.singlemovie)\r\n                return{\r\n                    ...state,\r\n                    loading:false, \r\n                    singlemovie:action.singlemovie             \r\n                }\r\n        case actionTypes.SINGLE_MOVIES_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n        case actionTypes.INIT_UPDATE_MOVIES:\r\n                    return{\r\n                        ...state,\r\n                        loading:true,\r\n                    };\r\n        case actionTypes.UPDATE_MOVIES_SUCCESS:\r\n            let statesst = [...state.movies];\r\n            statesst.map(order => {\r\n                if(order._id === action.movies._id)\r\n                {\r\n                    order.moviename = action.movies.moviename;\r\n                    order.movie_category=action.movies.movie_category;\r\n                    order.releasedate=action.movies.releasedate;\r\n                    order.director_name=action.movies.director_name;\r\n                    order.Actors_name=action.movies.Actors_name; \r\n                    order.movie_languages =action.movies.movie_languages;\r\n                    order.movie_description=action.movies.movie_description;\r\n                    order.movie_type=action.movies.movie_type;\r\n                    order.movie_logo=action.movies.movie_logo;\r\n                    order.movie_status=action.movies.movie_status;\r\n                    order.booking_status=action.movies.booking_status;                   \r\n                }\r\n            });\r\n            console.log(action.singlestates);\r\n                return{\r\n                    ...state,\r\n                    loading:false, \r\n                    movies:statesst             \r\n                }\r\n        case actionTypes.UPDATE_MOVIES_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n            default :\r\n                return state;\r\n    }\r\n}\r\n\r\nexport default store;","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\reducer\\screenReducer.js",["436"],"import * as actionTypes from \"../screenActionType\";\r\nconst initalstore = {\r\n    screens: [],\r\n    singlescreen: {},\r\n    loading: false,\r\n    error: \"\",\r\n}\r\n\r\nconst store = (state = initalstore, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.INIT_FETCH_SCREEN:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            }\r\n        case actionTypes.FETCH_SCREEN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                screens: action.screens\r\n            }\r\n\r\n        case actionTypes.FETCH_SCREEN_FAILED:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.error,\r\n            }\r\n        case actionTypes.INIT_ADD_SCREEN:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            };\r\n        case actionTypes.ADD_SCREEN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false\r\n            }\r\n        case actionTypes.ADD_SCREEN_FAILED:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.error\r\n            }\r\n        case actionTypes.INIT_DELETE_SCREEN:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n\r\n            };\r\n        case actionTypes.DELETE_SCREEN_SUCCESS:\r\n            let screensTemp = state.screens.filter(screen => screen._id !== action.id);\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                screens: screensTemp,\r\n            }\r\n        case actionTypes.DELETE_SCREEN_FAILED:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.error\r\n            }\r\n        case actionTypes.INIT_SINGLE_SCREEN:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            };\r\n        case actionTypes.SINGLE_SCREEN_SUCCESS:\r\n            console.log(action.singlescreen)\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                singlescreen: action.singlescreen\r\n            }\r\n        case actionTypes.SINGLE_SCREEN_FAILED:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.error\r\n            }\r\n        case actionTypes.INIT_UPDATE_SCREEN:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            };\r\n        case actionTypes.UPDATE_SCREEN_SUCCESS:\r\n            console.log(action.screens);\r\n            let screensTemp1 = [...state.screens];\r\n            screensTemp1.map(order => {\r\n                if (order._id === action.screens._id) {\r\n                        order.screen_name = action.screens.screen_name;\r\n                        order.rows = action.screens.rows;\r\n                        order.cols = action.screens.cols;\r\n                }\r\n            });\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                screens: screensTemp1\r\n            }\r\n        case actionTypes.UPDATE_SCREEN_FAILED:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.error\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default store;","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\reducer\\userReducer.js",[],"D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\registerTask.js",["437","438","439","440"],"D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\actionTypes.js",[],"D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\cityActionTypes.js",[],"D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\movieActionTypes.js",[],"D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\theaterscreenActionType.js",[],"D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\screenActionType.js",[],"D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\userActionTypes.js",[],"D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\TheaterTask.js",[],"D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\stateTask.js",[],"D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\All Registration form\\Temp.js",["441","442","443","444","445"],"import React, { Component, useEffect } from \"react\";\r\nimport {connect} from 'react-redux';\r\nimport {fetchDashboradRecord} from '../../store/action/userAction';\r\nimport {  Row, Col,Card, CardGroup,CardDeck } from \"react-bootstrap\";\r\n// import {MDBIcon} from 'react/jsx'\r\nimport { SiApachesolr,SiAtAndT,SiAdobecreativecloud,SiCoffeescript } from \"react-icons/si\";\r\n\r\nconst Dashboard = (props) => {\r\n\r\n  // render: function() {\r\n    return (\r\n      <>\r\n      <div >\r\n      <CardDeck style={{    display: \"flex\"}}>\r\n    <Card border=\"Primary\" style={{ width: '18rem',backgroundColor:\"#1e9ee8\",color:\"White\",padding:\"20px\",\r\n    marginLeft: \"20px\" }} >\r\n      <Card.Header>Total State</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title></Card.Title>\r\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}></Card.Text>\r\n        <SiCoffeescript style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>\r\n      </Card.Body>\r\n    </Card>\r\n    <Card border=\"Success\" style={{ width: '18rem',backgroundColor:\"#b9ad16\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\r\n      <Card.Header>Total City</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title></Card.Title>\r\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}></Card.Text>\r\n        <SiAtAndT style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>  \r\n      </Card.Body>\r\n    </Card>\r\n    <Card border=\"Success\" style={{ width: '18rem',backgroundColor:\"#25b125\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\r\n      <Card.Header>Total Movies</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title></Card.Title>\r\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}></Card.Text>\r\n        <SiApachesolr style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>        \r\n      </Card.Body>\r\n    </Card>\r\n    <Card bg=\"danger\" style={{ width: '18rem',backgroundColor:\"#f52e2e\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\r\n      <Card.Header>Total Theater</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title></Card.Title>\r\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}></Card.Text>\r\n        <SiAdobecreativecloud style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>  \r\n      </Card.Body>\r\n    </Card>\r\n    </CardDeck>\r\n    </div>\r\n     </>\r\n    );\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n  return{\r\n    fetchDashboradRecord:()=>dispatch(fetchDashboradRecord())\r\n  }\r\n}\r\nexport default connect(null,mapDispatchToProps)(Dashboard);","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\All Registration form\\loginForm.js",["446","447","448"],"import React,{useState,useEffect} from 'react';\r\nimport  \"./../css/login.css\";\r\nimport {connect} from 'react-redux';\r\nimport {login} from '../../store/action/userAction';\r\nimport {Form,Button,Input} from \"antd\";\r\nimport Logo from '../../Movie_logo/Admin3.jpg'\r\n\r\nconst NewComponent = (props) => {\r\n  const [form] = Form.useForm();\r\n  useEffect(()=>{\r\n    if(props.token===true){\r\n      props.history.replace(\"/city\");\r\n    }\r\n  },[props.token])\r\n  const [obj,setMyObj] = useState({\r\n    email:\"\",\r\n    password:\"\",\r\n  });\r\n  const [error,setError]=useState(false);\r\n  const handleSubmit = async () =>{\r\n    await props.login(obj.email,obj.password);\r\n    if(props.token!==true && obj.email && obj.password){\r\n     setError(true);\r\n    }\r\n  }\r\n\r\n    const signUp = () =>{\r\n        props.history.replace(\"/userreg\");\r\n    }\r\n\r\n    const HandleChange = (e,name) =>{\r\n      let olddata = {...obj};\r\n        olddata[name] = e.target.value;\r\n      setMyObj(olddata)\r\n    }\r\n      return (  \r\n        <Form className=\"login\" style={{marginLeft: \"500px\",marginTop:\"90px\",borderBottomLeftRadius: \"50px\",\r\n        borderBottomRightRadius: \"50px\",\r\n        borderTopLeftRadius: \"50px\",\r\n        borderTopRightRadius: \"50px\"}} form={form}\r\n        name=\"register\">\r\n          <header style={{marginTop:\"35px\",color:'#0ec78b'}}><img src={Logo} style={{height: \"60px\",width: \"60px\",marginLeft:\"05px\",borderBottomLeftRadius: \"43px\",borderBottomRightRadius: \"43px\",borderTopLeftRadius: \"43px\",borderTopRightRadius: \"43px\"}}/> Movie Login</header>\r\n          <div className=\"field\">\r\n              <span className=\"fa fa-user\" />\r\n              <Form.Item\r\n                  name=\"email\"\r\n                  style={{marginLeft:\"45px\",width:\"280px\"}}\r\n                  rules={[\r\n                    {\r\n                      type: 'email',\r\n                      message: 'The input is not valid E-mail!',\r\n                    },\r\n                    {\r\n                      required: true,\r\n                      message: 'Please input your E-mail!',\r\n                    },\r\n                  ]}\r\n                ><Input placeholder=\"Enter Your email\" style={{height:\"55px\"}} onChange={(e) => {HandleChange(e,\"email\")}}/></Form.Item>\r\n          </div>\r\n          <div className=\"field\">\r\n              <span className=\"fa fa-lock\" />\r\n              <Form.Item\r\n                  style={{width:\"280px\",marginTop: \"20px\",marginLeft: \"46px\"}}\r\n                  name=\"password\"\r\n                  rules={[\r\n                    {\r\n                      required: true,\r\n                      message: 'Please input your password!',\r\n                    },\r\n                  ]}\r\n                  hasFeedback\r\n                >\r\n                  <Input.Password  placeholder=\"*************\" onChange={(e) => {HandleChange(e,\"password\")}}/>\r\n                </Form.Item>\r\n          </div>\r\n          {(error)?<h4 style={{color:\"red\"}}>You are Not Unable to Login !!</h4>:\"\"}\r\n          <Form.Item>\r\n              <Button type=\"primary\" htmlType=\"submit\" onClick={() =>handleSubmit()}>Login</Button>\r\n            </Form.Item>\r\n          <div className=\"forgot-password\" style={{textAlign:\"center\"}}><a href=\"/\">Forgot password?</a></div>\r\n          <span className=\"logn-form-copy\">Don't have an account? <a onClick={()=>{signUp()}} className=\"login-form__sign-up\" style={{color:\"#0074d9\"}}>Sign Up</a></span>\r\n        </Form>\r\n    );\r\n  }\r\n  \r\n  const mapStateToProps =  (state) => ({\r\n    err1:state.userReducer.error1,\r\n    singleuser:state.userReducer.singleuser,\r\n    token:state.userReducer.token ? true : false\r\n\r\n  })\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n  return{\r\n    login:(email,password)=>dispatch(login(email,password))\r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(NewComponent);","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\action\\userAction.js",[],"D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\All Registration form\\userRegistration.js",["449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473"],"import React, { useState,useEffect } from \"react\";\r\nimport {Form,Col,Button} from \"react-bootstrap\";\r\nimport {connect} from 'react-redux';\r\nimport {adduserdata,fetchusersdata} from '../../store/action/userAction';\r\nimport {fetchstatedata} from '../../store/action/stateAction';\r\nimport {fetchAllStatesBystate_id} from '../../store/action/cityAction';\r\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBCard, MDBInput } from 'mdbreact';\r\nimport '../register.css';\r\n\r\nconst FormPage = (props) => {\r\n  useEffect(()=>{\r\n    props.fetchstatedata();\r\n  },[props.fetchstatedata])\r\n\r\n  const [obj,setMyObj] = useState({\r\n    user_name:\"\",\r\n    password:\"\",\r\n    email:\"\",\r\n    gender:\"Male\",\r\n    photo1:\"\",\r\n    state_id:\"\",\r\n    city_id:\"\",\r\n    group_id:\"\",\r\n    is_active:\"\"\r\n  });\r\n  \r\n  const [error,setError]=useState({\r\n    user_name_nameError:\"\",\r\n    password_nameError:\"\",\r\n    gender_nameError:\"\",\r\n    email_nameError:\"\",\r\n    state_nameError:\"\",\r\n    city_nameError:\"\",\r\n    isValid:false\r\n  });\r\n\r\n  const handleSubmit =async () =>{\r\n    let errors = { ...error,isValid: true };\r\n    obj.group_id=\"5fe49d9efcd4173394b09b42\";\r\n    obj.is_active=\"1\";\r\n    // obj.photo1=\"sds\";\r\n    errors.state_nameError=\"\";\r\n    errors.city_nameError=\"\";\r\n    errors.user_name_nameError=\"\";\r\n    errors.password_nameError=\"\";\r\n    errors.email_nameError=\"\";\r\n    errors.isValid=false;\r\n    if(obj.state_id == \"\" || obj.city_id == \"\" || obj.user_name == \"\" || obj.password == \"\" || obj.email == \"\" || obj.email != \"\"){\r\n      if(obj.state_id == \"\"){\r\n        errors.state_nameError=\"Please atleast one select state !!\"\r\n        errors.isValid=true;\r\n      }\r\n      if(obj.city_id == \"\"){\r\n        errors.city_nameError=\"Please atleast one select city !!\"\r\n        errors.isValid=true;\r\n      }\r\n      if(obj.user_name == \"\"){\r\n        errors.user_name_nameError=\"Please reuired username !!\"\r\n        errors.isValid=true;\r\n      }\r\n      if(obj.password == \"\"){\r\n        errors.password_nameError=\"Please required password !!\"\r\n        errors.isValid=true;\r\n      }\r\n      if(obj.email == \"\"){\r\n        errors.email_nameError=\"Please required email !!\"\r\n        errors.isValid=true;\r\n      }\r\n      if(obj.email != \"\"){\r\n        var pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\r\n        if (!pattern.test(obj.email)) {\r\n          errors.isValid = true;\r\n          errors.email_nameError = \"Please enter valid email address.\";\r\n        }\r\n      }\r\n    }else{\r\n      errors.state_nameError=\"\";\r\n      errors.city_nameError=\"\";\r\n      errors.user_name_nameError=\"\";\r\n      errors.password_nameError=\"\";\r\n      errors.email_nameError=\"\";\r\n      errors.isValid=false;\r\n    }\r\n    if(errors.isValid==false){\r\n      const formdata = new FormData();\r\n      console.log(obj);\r\n      formdata.append(\"user_name\",obj.user_name);\r\n      formdata.append(\"password\",obj.password);\r\n      formdata.append(\"email\",obj.email);\r\n      formdata.append(\"gender\",obj.gender);\r\n      formdata.append(\"photo1\",obj.photo1);\r\n      formdata.append(\"state_id\",obj.state_id);\r\n      formdata.append(\"city_id\",obj.city_id);\r\n      formdata.append(\"group_id\",obj.group_id);\r\n      formdata.append(\"is_active\",obj.is_active);\r\n      console.log(obj.photo1);\r\n      await props.adduserdata(formdata);\r\n      props.history.replace(\"/\");\r\n    }\r\n    setError(errors);\r\n  }\r\n  const HandleChange = (e,name) =>{\r\n    let olddata = {...obj};\r\n    if (name == \"photo1\") {\r\n      const { target: { files } } = e\r\n      olddata[name] = files.length === 1 ? files[0] : files\r\n      olddata[name] = e.target.files[0];\r\n    }\r\n    else\r\n    {\r\n      olddata[name] = e.target.value;\r\n    }\r\n    setMyObj(olddata)\r\n    cityCall(olddata.state_id);\r\n  }\r\n\r\n  const cityCall =async (id) =>{\r\n    await props.fetchAllStatesBystate_id(id);\r\n    // console.log(props.cities);\r\n  }\r\n\r\n  const optionStates = () => {\r\n    return props.states.map((stateslist) => {\r\n    const { _id, state_name } = stateslist;\r\n      return (\r\n          <option value={_id} key={_id}>{state_name}</option>\r\n      )\r\n    })\r\n  }\r\n\r\n  const optioncities = () => {\r\n    return props.cities.map((stateslist) => {\r\n    const { _id, city_name } = stateslist;\r\n      return (\r\n          <option value={_id} key={_id}>{city_name}</option>\r\n      )\r\n    })\r\n  }\r\n\r\n  const backHandler = () => {\r\n    props.history.replace(\"/theaterreg\")\r\n  }\r\n\r\n  const loginHandler = () =>{\r\n    props.history.replace(\"/\")\r\n  }\r\n\r\n    return (\r\n      <div>\r\n        <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\" rel=\"stylesheet\" id=\"bootstrap-css\" />\r\n        {/*---- Include the above in your HEAD tag --------*/}\r\n        <div className=\"container register\" style={{marginTop: \"2px\"}}>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-3 register-left\">\r\n              <img src=\"https://image.ibb.co/n7oTvU/logo_white.png\" alt=\"\" />\r\n              <h3>Welcome</h3>\r\n              <p>You are 30 seconds away farom earning your own money!</p>\r\n              <input type=\"submit\" name defaultValue=\"Login\" disabled/><br />\r\n            </div>\r\n            <div className=\"col-md-9 register-right\">\r\n              <ul className=\"nav nav-tabs nav-justified\" id=\"myTab\" role=\"tablist\">\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link active\" id=\"home-tab\" data-toggle=\"tab\" role=\"tab\" aria-controls=\"home\" aria-selected=\"true\">User</a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link\" variant=\"secondary\" onClick={() => backHandler()}  id=\"profile-tab\" data-toggle=\"tab\" role=\"tab\" aria-controls=\"profile\" aria-selected=\"false\">Theater</a>\r\n                </li>\r\n              </ul>\r\n              <div className=\"tab-content\" id=\"myTabContent\">\r\n                <div className=\"tab-pane fade show active\" id=\"home\" role=\"tabpanel\" aria-labelledby=\"home-tab\">\r\n                  <h3 className=\"register-heading\">Apply as a User</h3>\r\n                  <div className=\"row register-form\">\r\n                  <Form style={{marginLeft: \"100px\"}}>\r\n                  <Form.Row>\r\n                      <Form.Group  as={Col} controlId=\"formGridEmail\">\r\n                        <Form.Label>Enter Username:-</Form.Label>\r\n                        <Form.Control type=\"text\" isInvalid={error.user_name_nameError}  placeholder=\"Enter Username ...\" name=\"user_name\" onChange={(e) => {HandleChange(e,\"user_name\")}} style={{width:\"290px\"}}/>\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {error.user_name_nameError}\r\n                          </Form.Control.Feedback>\r\n                      </Form.Group>\r\n                      <Form.Group as={Col} controlId=\"formGridEmail2\">\r\n                      <Form.Label style={{marginLeft: \"28px\"}}>Enter Password:-</Form.Label>\r\n                      <Form.Control type=\"password\" isInvalid={error.password_nameError} placeholder=\"Enter Password ...\" name=\"password\" onChange={(e) => {HandleChange(e,\"password\")}}  style={{marginLeft: \"28px\",width:\"250px\"}}/>\r\n                      <Form.Control.Feedback type=\"invalid\" style={{marginLeft: \"28px\"}}>\r\n                            {error.password_nameError}\r\n                        </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                  </Form.Row>\r\n                  <Form.Row>\r\n                      <Form.Group  as={Col} controlId=\"formGridEmail\">\r\n                        <Form.Label>Enter Email:-</Form.Label>\r\n                        <Form.Control type=\"email\" isInvalid={error.email_nameError} className=\"form-control\" name=\"email\" onChange={(e) => {HandleChange(e,\"email\")}} onBlur={() => cityCall()} placeholder=\"Enter email ...\"   style={{width:\"290px\"}}/>\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {error.email_nameError}\r\n                        </Form.Control.Feedback>\r\n                      </Form.Group>\r\n                      <Form.Group as={Col} controlId=\"formGridEmail\">\r\n                        <Form.Label style={{marginLeft: \"28px\"}}>Select Gender:-</Form.Label>\r\n                        <Form.Check type=\"radio\" name=\"gender\" value=\"male\" label=\"Male\" style={{marginLeft: \"28px\"}} onChange={(e) => {HandleChange(e,\"gender\")}} checked/>\r\n                        <Form.Check type=\"radio\" name=\"gender\" value=\"female\" label=\"Female\" style={{marginLeft: \"28px\"}} onChange={(e) => {HandleChange(e,\"gender\")}}/>\r\n                      </Form.Group>\r\n                  </Form.Row>\r\n                      \r\n                  <Form.Row>\r\n                      <Form.Group>\r\n                          <Form.Label>Select State:-</Form.Label>\r\n                          <Form.Control isInvalid={error.state_nameError} className=\"form-control\" as=\"select\" name=\"state_id\" onChange={(e) => {HandleChange(e,\"state_id\")}}  style={{width:\"290px\"}} >\r\n                            <option selected disabled>-----Select -----</option>\r\n                              {optionStates()}\r\n                          </Form.Control>\r\n                          <Form.Control.Feedback type=\"invalid\">\r\n                            {error.state_nameError}\r\n                          </Form.Control.Feedback>\r\n                      </Form.Group> \r\n                      <Form.Group>\r\n                          <Form.Label style={{marginLeft: \"50px\"}}>Select city:-</Form.Label>\r\n                          <Form.Control isInvalid={error.city_nameError} className=\"form-control\" as=\"select\" name=\"city_id\" onChange={(e) => {HandleChange(e,\"city_id\")}} style={{marginLeft: \"50px\",width:\"250px\"}} >\r\n                              <option selected disabled>-----Select -----</option>\r\n                              {optioncities()}\r\n                          </Form.Control>\r\n                          <Form.Control.Feedback type=\"invalid\" style={{marginLeft: \"28px\"}}>\r\n                            {error.city_nameError}\r\n                          </Form.Control.Feedback>\r\n                      </Form.Group> \r\n                  </Form.Row>\r\n                  <Form.Row>\r\n                      <Form.Group>\r\n                          <Form.Label>Select User photo:-</Form.Label>\r\n                          {/* <Form.File id=\"exampleFormControlFile1\" />   */}\r\n                          <Form.Control type=\"file\" name=\"photo1\" onChange={(e) => {HandleChange(e,\"photo1\")}} style={{maxWidth : \"300px\"}}/>\r\n                      </Form.Group> \r\n                      <Form.Group as={Col} controlId=\"formGridEmail2\">\r\n                          {/* <input type=\"submit\" /> */}\r\n                          <Button className=\"btnRegister\" defaultValue=\"Register\" style={{marginLeft: \"28px\"}} onClick={handleSubmit}>Submit</Button>\r\n                      </Form.Group>\r\n                  </Form.Row>\r\n                  </Form>\r\n                  <span className=\"logn-form-copy\" style={{ marginLeft: \"262px\",marginTop: \"26px\"}}>Already have an account? <a onClick={()=>{loginHandler()}} className=\"login-form__sign-up\" style={{color:\"#0074d9\"}}>Sign in</a></span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  const mapStateToProps =  (state) => ({\r\n      err:state.stateReducer.error,\r\n      // err:state.userReducer.error1,\r\n      states:state.stateReducer.states,\r\n      cities:state.cityReducer.cities,\r\n    })\r\n  \r\n  const mapDispatchToProps = dispatch =>{\r\n    return{\r\n      fetchstatedata:()=>dispatch(fetchstatedata()),\r\n      // fetchcitiesdata:()=>dispatch(fetchcitiesdata()),\r\n      fetchAllStatesBystate_id:(_id)=>dispatch(fetchAllStatesBystate_id(_id)),\r\n      adduserdata: (postdata) => dispatch(adduserdata(postdata))\r\n    }\r\n  }\r\n  export default connect(mapStateToProps,mapDispatchToProps)(FormPage);\r\n  ","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\All Registration form\\theaterRegistration.js",["474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493"],"import React, { useState,useEffect } from \"react\";\r\nimport {Form,Col,Button} from \"react-bootstrap\";\r\nimport {connect} from 'react-redux';\r\nimport {adduserdata} from '../../store/action/userAction';\r\nimport {fetchstatedata} from '../../store/action/stateAction';\r\nimport {fetchAllStatesBystate_id} from '../../store/action/cityAction';\r\nimport '../register.css';\r\n\r\nconst FormPage = (props) => {\r\n  useEffect(()=>{\r\n    props.fetchstatedata();\r\n  },[props.fetchstatedata])\r\n\r\n  const [obj,setMyObj] = useState({\r\n    user_name:\"\",\r\n    cinema_name:\"\",\r\n    password:\"\",\r\n    email:\"\",\r\n    gender:\"Male\",\r\n    photo1:\"\",\r\n    state_id:\"\",\r\n    city_id:\"\",\r\n    group_id:\"\",\r\n    is_active:\"\"\r\n  });\r\n  \r\n  const [error,setError]=useState({\r\n    user_name_nameError:\"\",\r\n    cinema_nameError:\"\",\r\n    password_nameError:\"\",\r\n    gender_nameError:\"\",\r\n    email_nameError:\"\",\r\n    state_nameError:\"\",\r\n    city_nameError:\"\",\r\n    isValid:false\r\n  });\r\n\r\n  const handleSubmit =async () =>{\r\n    let errors = { ...error,isValid: true };\r\n    obj.group_id=\"5fe49d95fcd4173394b09b40\";\r\n    obj.is_active=\"1\";\r\n    // obj.photo1=\"sds\";\r\n    errors.state_nameError=\"\";\r\n    errors.city_nameError=\"\";\r\n    errors.user_name_nameError=\"\";\r\n    errors.cinema_nameError=\"\";\r\n    errors.password_nameError=\"\";\r\n    errors.email_nameError=\"\";\r\n    errors.isValid=false;\r\n    if(obj.state_id == \"\" || obj.city_id == \"\" || obj.user_name == \"\" || obj.password == \"\" || obj.email == \"\" || obj.email != \"\" || obj.cinema_name!=\"\"){\r\n      if(obj.state_id == \"\"){\r\n        errors.state_nameError=\"Please atleast one select state !!\"\r\n        errors.isValid=true;\r\n      }\r\n      if(obj.city_id == \"\"){\r\n        errors.city_nameError=\"Please atleast one select city !!\"\r\n        errors.isValid=true;\r\n      }\r\n      if(obj.user_name == \"\"){\r\n        errors.user_name_nameError=\"Please reuired username !!\"\r\n        errors.isValid=true;\r\n      }\r\n      if(obj.password == \"\"){\r\n        errors.password_nameError=\"Please required password !!\"\r\n        errors.isValid=true;\r\n      }\r\n      if(obj.email == \"\"){\r\n        errors.email_nameError=\"Please required email !!\"\r\n        errors.isValid=true;\r\n      }\r\n      if(obj.cinema_name == \"\"){\r\n        errors.cinema_nameError=\"Please required cinema name !!\"\r\n        errors.isValid=true;\r\n      }\r\n      if(obj.email != \"\"){\r\n        var pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\r\n        if (!pattern.test(obj.email)) {\r\n          errors.isValid = true;\r\n          errors.email_nameError = \"Please enter valid email address.\";\r\n        }\r\n      }\r\n    }else{\r\n      errors.state_nameError=\"\";\r\n      errors.city_nameError=\"\";\r\n      errors.user_name_nameError=\"\";\r\n      errors.cinema_nameError=\"\";\r\n      errors.password_nameError=\"\";\r\n      errors.email_nameError=\"\";\r\n      errors.isValid=false;\r\n    }\r\n    if(errors.isValid==false){\r\n      const formdata = new FormData();\r\n      console.log(obj);\r\n      formdata.append(\"user_name\",obj.user_name);\r\n      formdata.append(\"cinema_name\",obj.cinema_name);\r\n      formdata.append(\"password\",obj.password);\r\n      formdata.append(\"email\",obj.email);\r\n      formdata.append(\"gender\",obj.gender);\r\n      formdata.append(\"photo1\",obj.photo1);\r\n      formdata.append(\"state_id\",obj.state_id);\r\n      formdata.append(\"city_id\",obj.city_id);\r\n      formdata.append(\"group_id\",obj.group_id);\r\n      formdata.append(\"is_active\",obj.is_active);\r\n      console.log(obj.photo1);\r\n      await props.adduserdata(formdata);\r\n      props.history.replace(\"/\");\r\n    }\r\n    setError(errors);\r\n  }\r\n  const HandleChange = (e,name) =>{\r\n    let olddata = {...obj};\r\n    if (name == \"photo1\") {\r\n      const { target: { files } } = e\r\n      olddata[name] = files.length === 1 ? files[0] : files\r\n      olddata[name] = e.target.files[0];\r\n    }\r\n    else\r\n    {\r\n      olddata[name] = e.target.value;\r\n    }\r\n    setMyObj(olddata)\r\n    cityCall(olddata.state_id);\r\n  }\r\n\r\n  const cityCall =async (id) =>{\r\n    await props.fetchAllStatesBystate_id(id);\r\n  }\r\n\r\n  const optionStates = () => {\r\n    return props.states.map((stateslist) => {\r\n    const { _id, state_name } = stateslist;\r\n      return (\r\n          <option value={_id} key={_id}>{state_name}</option>\r\n      )\r\n    })\r\n  }\r\n\r\n  const optioncities = () => {\r\n    return props.cities.map((stateslist) => {\r\n    const { _id, city_name } = stateslist;\r\n      return (\r\n          <option value={_id} key={_id}>{city_name}</option>\r\n      )\r\n    })\r\n  }\r\n\r\n  const backHandler = () => {\r\n    props.history.replace(\"/userreg\")\r\n  }\r\n\r\n  const loginHandler = () =>{\r\n    props.history.replace(\"/\")\r\n  }\r\n\r\n    return (\r\n              <div>\r\n        <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\" rel=\"stylesheet\" id=\"bootstrap-css\" />\r\n        {/*---- Include the above in your HEAD tag --------*/}\r\n        <div className=\"container register\" style={{marginTop: \"2px\" }}>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-3 register-left\">\r\n              <img src=\"https://image.ibb.co/n7oTvU/logo_white.png\" alt=\"\" />\r\n              <h3>Welcome</h3>\r\n              <p>You are 30 seconds away farom earning your own money!</p>\r\n              <input type=\"submit\" name defaultValue=\"Login\" disabled/><br />\r\n            </div>\r\n            <div className=\"col-md-9 register-right\">\r\n              <ul className=\"nav nav-tabs nav-justified\" id=\"myTab\" role=\"tablist\">\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link \" variant=\"secondary\" onClick={() => backHandler()} id=\"home-tab\" data-toggle=\"tab\" role=\"tab\" aria-controls=\"home\" aria-selected=\"false\">User</a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link active\" id=\"profile-tab\" data-toggle=\"tab\" role=\"tab\" aria-controls=\"profile\" aria-selected=\"true\">Theater</a>\r\n                </li>\r\n              </ul>\r\n              <div className=\"tab-content\" id=\"myTabContent\">\r\n                <div className=\"tab-pane fade show active\" id=\"home\" role=\"tabpanel\" aria-labelledby=\"home-tab\">\r\n                  <h3 className=\"register-heading\">Apply as a Theater</h3>\r\n                  <div className=\"row register-form\">\r\n                  <Form style={{marginLeft: \"100px\"}}>\r\n                  <Form.Row>\r\n                      <Form.Group  as={Col} controlId=\"formGridEmail\">\r\n                        <Form.Label>Enter Username:-</Form.Label>\r\n                        <Form.Control type=\"text\" isInvalid={error.user_name_nameError}  placeholder=\"Enter Username ...\" name=\"user_name\" onChange={(e) => {HandleChange(e,\"user_name\")}} style={{width:\"290px\"}}/>\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {error.user_name_nameError}\r\n                          </Form.Control.Feedback>\r\n                      </Form.Group>\r\n                      <Form.Group as={Col} controlId=\"formGridEmail2\">\r\n                      <Form.Label style={{marginLeft: \"28px\"}}>Enter Cinema name:-</Form.Label>\r\n                      <Form.Control type=\"text\" isInvalid={error.cinema_nameError} placeholder=\"Enter cinema name ...\" name=\"cinema_name\" onChange={(e) => {HandleChange(e,\"cinema_name\")}}  style={{marginLeft: \"28px\",width:\"250px\"}}/>\r\n                      <Form.Control.Feedback type=\"invalid\" style={{marginLeft: \"28px\"}}>\r\n                            {error.cinema_nameError}\r\n                        </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                  </Form.Row>\r\n                  <Form.Row>\r\n                      <Form.Group as={Col} controlId=\"formGridEmail2\">\r\n                      <Form.Label style={{marginLeft: \"28px\"}}>Enter Password:-</Form.Label>\r\n                      <Form.Control type=\"password\" isInvalid={error.password_nameError} placeholder=\"Enter Password ...\" name=\"password\" onChange={(e) => {HandleChange(e,\"password\")}}  style={{marginLeft: \"28px\",width:\"250px\"}}/>\r\n                      <Form.Control.Feedback type=\"invalid\" style={{marginLeft: \"28px\"}}>\r\n                            {error.password_nameError}\r\n                        </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                      <Form.Group  as={Col} controlId=\"formGridEmail\">\r\n                        <Form.Label>Enter Email:-</Form.Label>\r\n                        <Form.Control type=\"email\" isInvalid={error.email_nameError} className=\"form-control\" name=\"email\" onChange={(e) => {HandleChange(e,\"email\")}} onBlur={() => cityCall()} placeholder=\"Enter email ...\"   style={{width:\"290px\"}}/>\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {error.email_nameError}\r\n                        </Form.Control.Feedback>\r\n                      </Form.Group>\r\n                  </Form.Row>\r\n                      \r\n                  <Form.Row>\r\n                      <Form.Group as={Col} controlId=\"formGridEmail\">\r\n                        <Form.Label style={{marginLeft: \"28px\"}}>Select Gender:-</Form.Label>\r\n                        <Form.Check type=\"radio\" name=\"gender\" value=\"male\" label=\"Male\" style={{marginLeft: \"28px\"}} onChange={(e) => {HandleChange(e,\"gender\")}} checked/>\r\n                        <Form.Check type=\"radio\" name=\"gender\" value=\"female\" label=\"Female\" style={{marginLeft: \"28px\"}} onChange={(e) => {HandleChange(e,\"gender\")}}/>\r\n                      </Form.Group>\r\n                      <Form.Group>\r\n                          <Form.Label>Select User Photo:-</Form.Label>\r\n                          <Form.Control type=\"file\" name=\"photo1\" onChange={(e) => {HandleChange(e,\"photo1\")}} style={{maxWidth : \"300px\"}}/>\r\n                      </Form.Group> \r\n                  </Form.Row>\r\n                  <Form.Row>\r\n                      <Form.Group>\r\n                          <Form.Label>Select State:-</Form.Label>\r\n                          <Form.Control isInvalid={error.state_nameError} className=\"form-control\" as=\"select\" name=\"state_id\" onChange={(e) => {HandleChange(e,\"state_id\")}}  style={{width:\"290px\"}} >\r\n                            <option selected disabled>-----Select -----</option>\r\n                              {optionStates()}\r\n                          </Form.Control>\r\n                          <Form.Control.Feedback type=\"invalid\">\r\n                            {error.state_nameError}\r\n                          </Form.Control.Feedback>\r\n                      </Form.Group> \r\n                      <Form.Group>\r\n                          <Form.Label style={{marginLeft: \"50px\"}}>Select city:-</Form.Label>\r\n                          <Form.Control isInvalid={error.city_nameError} className=\"form-control\" as=\"select\" name=\"city_id\" onChange={(e) => {HandleChange(e,\"city_id\")}} style={{marginLeft: \"50px\",width:\"250px\"}} >\r\n                              <option selected disabled>-----Select -----</option>\r\n                              {optioncities()}\r\n                          </Form.Control>\r\n                          <Form.Control.Feedback type=\"invalid\" style={{marginLeft: \"28px\"}}>\r\n                            {error.city_nameError}\r\n                          </Form.Control.Feedback>\r\n                      </Form.Group> \r\n                  </Form.Row>\r\n                  <Form.Row>\r\n                      <Form.Group as={Col} controlId=\"formGridEmail2\">\r\n                          {/* <input type=\"submit\" /> */}\r\n                          <Button className=\"btnRegister\" defaultValue=\"Register\" style={{marginLeft: \"28px\"}} onClick={handleSubmit}>Submit</Button>\r\n                      </Form.Group>\r\n                  </Form.Row>\r\n\r\n                  </Form>\r\n                  <span className=\"logn-form-copy\" style={{ marginLeft: \"262px\",marginTop: \"26px\"}}>Already have an account? <a onClick={()=>{loginHandler()}} className=\"login-form__sign-up\" style={{color:\"#0074d9\"}}>Sign in</a></span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  const mapStateToProps =  (state) => ({\r\n      err:state.stateReducer.error,\r\n      // err:state.userReducer.error1,\r\n      states:state.stateReducer.states,\r\n      cities:state.cityReducer.cities,\r\n    })\r\n  \r\n  const mapDispatchToProps = dispatch =>{\r\n    return{\r\n      fetchstatedata:()=>dispatch(fetchstatedata()),\r\n      // fetchcitiesdata:()=>dispatch(fetchcitiesdata()),\r\n      fetchAllStatesBystate_id:(_id)=>dispatch(fetchAllStatesBystate_id(_id)),\r\n      adduserdata: (postdata) => dispatch(adduserdata(postdata))\r\n    }\r\n  }\r\n  export default connect(mapStateToProps,mapDispatchToProps)(FormPage);\r\n  ","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\All Registration form\\dashboard.js",["494","495","496","497","498"],"import React, { Component, useEffect } from \"react\";\r\nimport {connect} from 'react-redux';\r\nimport {fetchDashboradRecord} from '../../store/action/userAction';\r\nimport {  Row, Col,Card, CardGroup,CardDeck } from \"react-bootstrap\";\r\n// import {MDBIcon} from 'react/jsx'\r\nimport { SiApachesolr,SiAtAndT,SiAdobecreativecloud,SiCoffeescript } from \"react-icons/si\";\r\n\r\nconst Dashboard = (props) => {\r\n  useEffect(() => {\r\n    props.fetchDashboradRecord();\r\n    console.log(props.singleDashboard);\r\n  },[props.fetchDashboradRecord]);\r\n\r\n  // render: function() {\r\n    return (\r\n      <>\r\n      <div >\r\n      <CardDeck style={{    display: \"flex\"}} >\r\n    <Card border=\"Primary\" style={{ width: '18rem',backgroundColor:\"#1e9ee8\",color:\"White\",padding:\"20px\",\r\n    marginLeft: \"20px\" }} >\r\n      <Card.Header style={{color:\"white\",fontFamily:\"auto\",textTransform:\"uppercase\"}}>Total State</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title></Card.Title>\r\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}>{props.singleDashboard.States}</Card.Text>\r\n        <SiCoffeescript style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>\r\n      </Card.Body>\r\n    </Card>\r\n    <Card border=\"Success\" style={{ width: '18rem',backgroundColor:\"#b9ad16\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\r\n      <Card.Header style={{color:\"white\",fontFamily:\"auto\",textTransform:\"uppercase\"}}>Total City</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title></Card.Title>\r\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}>{props.singleDashboard.Citys}</Card.Text>\r\n        <SiAtAndT style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>  \r\n      </Card.Body>\r\n    </Card>\r\n    <Card border=\"Success\" style={{ width: '18rem',backgroundColor:\"#25b125\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\r\n      <Card.Header style={{color:\"white\",fontFamily:\"auto\",textTransform:\"uppercase\"}}>Total Movies</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title></Card.Title>\r\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}>{props.singleDashboard.Movies}</Card.Text>\r\n        <SiApachesolr style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>        \r\n      </Card.Body>\r\n    </Card>\r\n    <Card bg=\"danger\" style={{ width: '18rem',backgroundColor:\"#f52e2e\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\r\n      <Card.Header style={{color:\"white\",fontFamily:\"auto\",textTransform:\"uppercase\"}}>Total Theater</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title></Card.Title>\r\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}>{props.singleDashboard.Theaters}</Card.Text>\r\n        <SiAdobecreativecloud style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>  \r\n      </Card.Body>\r\n    </Card>\r\n    </CardDeck>\r\n    </div>\r\n     </>\r\n    );\r\n}\r\nconst mapStateToProps =  (state) => ({\r\n  err:state.userReducer.error,\r\n  Loading:state.userReducer.loading,\r\n  singleDashboard:state.userReducer.singleDashboard,\r\n})\r\nconst mapDispatchToProps = dispatch =>{\r\n  return{\r\n    fetchDashboradRecord:()=>dispatch(fetchDashboradRecord())\r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Dashboard);","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\TheaterPanel\\addScreen.js",["499","500","501","502"],"D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\TheaterPanel\\dashboard.js",["503","504"],"import React, { Component, useEffect } from \"react\";\r\nimport {connect} from 'react-redux';\r\nimport {fetchDashboradRecordTheaterPanel} from '../../store/action/userAction';\r\nimport { Card,CardDeck } from \"react-bootstrap\";\r\nimport {BsFillGridFill,BsServer,BsPuzzleFill,BsPeopleFill} from \"react-icons/bs\"\r\n\r\nconst Dashboard = (props) => {\r\n  useEffect(() => {\r\n    console.log(props.singleuser._id);\r\n    props.fetchDashboradRecordTheaterPanel(props.singleuser._id);\r\n  },[props.fetchDashboradRecordTheaterPanel]);\r\n  // render: function() {\r\n    return (\r\n      <>\r\n      <div >\r\n      <CardDeck style={{    display: \"flex\"}}>\r\n    <Card border=\"Primary\" style={{ width: '18rem',backgroundColor:\"#1e9ee8\",color:\"White\",padding:\"20px\",\r\n    marginLeft: \"20px\" }} >\r\n      <Card.Header style={{color:\"white\",fontFamily:\"auto\",textTransform:\"uppercase\"}}>Total Screen</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title></Card.Title>\r\n        <Card.Text  style={{fontSize: \"24px\",marginTop: \"6px\"}}>{props.singleDashboard.screen}</Card.Text>\r\n        <BsServer style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>\r\n      </Card.Body>\r\n    </Card>\r\n    <Card border=\"Success\" style={{ width: '18rem',backgroundColor:\"#b9ad16\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\r\n      <Card.Header style={{color:\"white\",fontFamily:\"auto\",textTransform:\"uppercase\"}}>Total TheaterScreen</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title></Card.Title>\r\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}>{props.singleDashboard.theaterScreen}</Card.Text>\r\n        <BsPuzzleFill style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>  \r\n      </Card.Body>\r\n    </Card>\r\n    <Card border=\"Success\" style={{ width: '18rem',backgroundColor:\"#25b125\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\r\n      <Card.Header style={{color:\"white\",fontFamily:\"auto\",textTransform:\"uppercase\"}}>Total Movies</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title></Card.Title>\r\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}>{props.singleDashboard.Movies}</Card.Text>\r\n        <BsFillGridFill style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>        \r\n      </Card.Body>\r\n    </Card>\r\n    <Card bg=\"danger\" style={{ width: '18rem',backgroundColor:\"#f52e2e\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\r\n      <Card.Header style={{color:\"white\",fontFamily:\"auto\",textTransform:\"uppercase\"}}>Total Movie Type</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title></Card.Title>\r\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}>12</Card.Text>\r\n        <BsPeopleFill style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>  \r\n      </Card.Body>\r\n    </Card>\r\n    </CardDeck>\r\n    </div>\r\n     </>\r\n    );\r\n}\r\nconst mapStateToProps =  (state) => ({\r\n  singleDashboard:state.userReducer.singleDashboard,\r\n  singleuser:state.userReducer.singleuser\r\n})\r\nconst mapDispatchToProps = dispatch =>{\r\n  return{\r\n    fetchDashboradRecordTheaterPanel:(id)=>dispatch(fetchDashboradRecordTheaterPanel(id))\r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Dashboard);","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\TheaterPanel\\screenList.js",["505","506"],"D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\TheaterPanel\\addtheaterscreen.js",["507","508","509","510","511","512","513","514","515","516","517","518"],"import React, { useEffect, useState } from 'react';\r\nimport { addtscreen } from \"../../store/action/theaterscreenAction\";\r\nimport { getscreen } from \"../../store/action/screenAction\";\r\nimport { fetchmoviedata,singlemovieDataFetch } from \"../../store/action/movieAction\"\r\nimport {login} from '../../store/action/userAction';\r\nimport { connect } from 'react-redux';\r\nimport { Breadcrumb,Card,Row,Col,DatePicker,TimePicker,Select } from 'antd';\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Switch\r\n} from 'antd';\r\n// import { Row } from 'react-bootstrap';\r\nconst {Option} = Select;\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    // span: 5,\r\n  },\r\n  wrapperCol: {\r\n    span: 10,\r\n  },\r\n};\r\nconst formTailLayout = {\r\n  labelCol: {\r\n    span: 4,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n    offset: 4,\r\n  },\r\n};\r\n\r\nconst AddTScreen = (props) => {\r\n  const { RangePicker } = DatePicker;\r\n  const [form] = Form.useForm();\r\n  const [obj, setMyObj] = useState({\r\n    user_id: \"\",\r\n    movie_id: \"\",\r\n    screen_id: \"\",\r\n    screen_time: \"\",\r\n    start_date: \"\",\r\n    end_date: \"\",\r\n    end_time: \"\",\r\n    price:\"\"\r\n  })\r\n\r\n  useEffect(()=>{\r\n    props.getscreen()\r\n    props.fetchmoviedata()\r\n    console.log(props.singleuser._id);\r\n    // console.log(props.)\r\n  },[props.getscreen,props.fetchmoviedata,props.singleuser])\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      const values = await form.validateFields();\r\n        const formdata = new FormData();\r\n        formdata.append(\"user_id\",props.singleuser._id)\r\n        formdata.append(\"screen_id\",obj.screen_id);\r\n        formdata.append(\"movie_id\",obj.movie_id);\r\n        formdata.append(\"screen_time\",obj.screen_time);\r\n        formdata.append(\"end_time\",obj.end_time);\r\n        formdata.append(\"start_date\",obj.start_date);\r\n        formdata.append(\"end_date\",obj.end_date);\r\n        formdata.append(\"price\",obj.price);\r\n        console.log(obj.screen_time);\r\n        await props.addtscreen(formdata);\r\n        props.history.replace(\"/theater/tscreenList\");\r\n    } catch (errorInfo) {\r\n      console.log('Failed:', errorInfo);\r\n    }\r\n  }\r\n\r\n  const HandleChange = (e, name) => {\r\n    let olddata = {...obj};\r\n    if((name === \"screen_id\") || (name === \"movie_id\"))\r\n    {\r\n      olddata[name] = e;\r\n    }\r\n    else if((name == \"start_date\") || (name == \"end_date\"))\r\n    {\r\n      if(e!=null)\r\n      olddata[name] = new Date(e._d).toLocaleDateString();\r\n    }\r\n    else if((name == \"screen_time\") || (name == \"end_time\"))\r\n    {\r\n      if(e!=null)\r\n      olddata[name] = new Date(e._d).toLocaleTimeString();\r\n    }\r\n    else\r\n    {\r\n      if(name== \"movie_id\"){\r\n        console.log(e.target.value);\r\n      }\r\n      olddata[name] = e.target.value;\r\n    }\r\n    console.log(olddata);\r\n    setMyObj(olddata);\r\n    cityCall(olddata.movie_id);\r\n  }\r\n\r\n  const cityCall =async (id) =>{\r\n    await props.singlemovieDataFetch(id);\r\n    console.log(props.singlemovie);\r\n  }\r\n\r\n   const optionTemplate = ()=>{\r\n     return props.screens.map((screenlist)=>{\r\n       const{_id,screen_name} = screenlist;\r\n       return(\r\n         <option value={_id} key={_id}>{screen_name}</option>\r\n       )\r\n     })\r\n   }\r\n\r\n   const optionMovieTemplate = ()=>{\r\n    return props.movies.map((movielist)=>{\r\n      const{_id,moviename,relesedate} = movielist;\r\n      // <input type=\"hidden\" value={relesedate} key={_id}></input>\r\n      return(\r\n        <option value={_id} key={_id}>{moviename}{relesedate}</option>\r\n      )\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={\"Title\"} style={{marginTop: \"-29px\" }}>\r\n          </div>\r\n          <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"30px\",fontFamily:\"auto\",textTransform:\"uppercase\"   }}>\r\n              <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n              <Breadcrumb.Item>Theater</Breadcrumb.Item>\r\n              <Breadcrumb.Item>Add Theater Screen</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n              <Card title=\"Add Theater Screen Form\" bordered={false} style={{ width: \"auto\" }}>\r\n                      <Form form={form} name=\"AddTScreen\">\r\n                      <Row gutter={0}>\r\n                          <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"SELECT SCREEN:-\" name=\"screenname\" rules={[{ required: true, message: 'Please Select Screen Name' }]}>\r\n                          <Select name=\"screen_id\" onChange={(e)=>HandleChange(e,\"screen_id\")} placeholder=\"------ Select Screen-----\" allowClear>\r\n                                      {optionTemplate()}\r\n                                  </Select>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"SELECT MOVIE:-\" name=\"moviename\" rules={[{ required: true, message: 'Please required movie name!' }]}>\r\n                          <Select name=\"movie_id\" onChange={(e)=>HandleChange(e,\"movie_id\")} placeholder=\"------ Select Movie-----\" allowClear>\r\n                                      {optionMovieTemplate()}\r\n                                  </Select>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                    </Row>\r\n                      <Row gutter={0}>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Screen Time\" name=\"screen_time\" rules={[{ required: true, message: 'Please Select Screen Time' }]}>\r\n                              <TimePicker name=\"screen_time\" onChange={(e) => { HandleChange(e, \"screen_time\") }} placeholder=\"Screen Time\" />\r\n                          </Form.Item>\r\n                      </Col>\r\n                        <Col span={12}>\r\n                        <Form.Item {...formItemLayout} label=\"End Time\" name=\"end_time\" rules={[{ required: true, message: 'Please Select End Time' }]}>\r\n                              <TimePicker name=\"end_time\" onChange={(e) => { HandleChange(e, \"end_time\") }} placeholder=\"End Time\"/>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      </Row>\r\n                      \r\n                      <Row gutter={0}>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Starting Date:-\" name=\"start_date\" rules={[{ required: true, message: 'Please Select Start Date!' }]}>\r\n                          <DatePicker format=\"DD/MM/yyyy\" name=\"start_date\" onChange={(e) => { HandleChange(e, \"start_date\") }} placeholder=\"Start Date\"/>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      <Col span={12}>\r\n                      <Form.Item {...formItemLayout} label=\"Ending Date:-\" name=\"end_date\" rules={[{ required: true, message: 'Please Select End Date!' }]}>\r\n                          <DatePicker format=\"DD/MM/yyyy\" name=\"end_date\" onChange={(e) => { HandleChange(e, \"end_date\") }} placeholder=\"End date\"/>\r\n                          </Form.Item>\r\n                          </Col>\r\n                      </Row>\r\n                      <Row gutter={0}>\r\n                          <Col span={12}>\r\n                                <Form.Item {...formItemLayout} label=\"Price:-\"  rules={[{ required: true, message: 'Please Select End Date!' }]}>\r\n                                    <Input type=\"text\" name=\"price\" value={obj._id} onChange={(e) => { HandleChange(e, \"price\") }} placeholder=\"Price\"/>\r\n                                  </Form.Item>\r\n                          </Col>\r\n                          <Col span={12}>\r\n                                    <span style={{color:\"#0955ff\",fontStyle:\"inherit\",textTransform: \"capitalize\"}}>Note:- Please Starting and ending Date is select <br></br> After ReleaseDate :- {props.singlemovie.releasedate}<br></br></span>                               \r\n                          </Col>\r\n                      </Row>  \r\n                           <Form.Item {...formTailLayout} label=\"\"> \r\n                                <Button type=\"primary\" onClick={(e) =>handleSubmit()} loading={props.loading}>Add Theater Screen</Button>\r\n                          </Form.Item>                           \r\n                      </Form>\r\n              </Card>\r\n            </div>\r\n    </>\r\n  );\r\n}\r\nconst mapStateToProps =  (state) => ({\r\n  singlemovie:state.movieReducer.singlemovie,\r\n   screens:state.screenReducer.screens,\r\n   error:state.screenReducer.error,\r\n   movies:state.movieReducer.movies,\r\n   error:state.movieReducer.error,\r\n   singleuser:state.userReducer.singleuser\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addtscreen: (postdata) => dispatch(addtscreen(postdata)),\r\n    singlemovieDataFetch:(id) => dispatch(singlemovieDataFetch(id)),\r\n    getscreen: ()=> dispatch(getscreen()),\r\n    fetchmoviedata:()=>dispatch(fetchmoviedata())\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTScreen);\r\n","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\State_All_Form\\addForm.js",["519"],"import React,{useState} from 'react';\r\nimport {addstatedata} from '../../store/action/stateAction';\r\nimport {connect} from 'react-redux';\r\nimport { Breadcrumb,Card } from 'antd';\r\nimport \"../state.css\";\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button\r\n} from 'antd';\r\n\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 4,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n  },\r\n};\r\nconst formTailLayout = {\r\n  labelCol: {\r\n    span: 4,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n    offset: 4,\r\n  },\r\n};\r\n\r\nconst AddForm = (props) => {\r\n  const [form] = Form.useForm();\r\n  const [obj,setMyObj]= useState({\r\n    state_name:\"\"\r\n  })\r\n\r\n  const handleSubmit = async () =>{\r\n    try {\r\n      const values = await form.validateFields();\r\n     await props.addstatedata(obj);\r\n     props.history.replace(\"/state\");\r\n    } catch (errorInfo) {\r\n      console.log('Failed:', errorInfo);\r\n    }\r\n  }\r\n\r\n  const HandleChange = (e,name) =>{\r\n     let olddata = {...obj};\r\n     olddata[name] = e.target.value;\r\n     setMyObj(olddata);\r\n  }\r\n\r\n  return (\r\n    <>    \r\n          <div className={\"Title\"} style={{marginTop: \"-29px\" }}>\r\n          </div>\r\n          <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"30px\",fontFamily:\"auto\",textTransform:\"uppercase\"  }}>\r\n              <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n              <Breadcrumb.Item>State</Breadcrumb.Item>\r\n              <Breadcrumb.Item>Add State</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n              <Card title=\"Add State Form\" bordered={false} style={{ width: \"auto\" }}>\r\n                      <Form form={form} name=\"AddForm\">\r\n                          <Form.Item {...formItemLayout} name=\"state_name\" label=\"Enter State Name:-\" rules={[{ required: true, message: 'Please required State!' }]}>\r\n                              <Input type=\"text\" name=\"state_name\" onChange={(e)=>{HandleChange(e,\"state_name\")}} placeholder=\"Enter state name ...\" style={{maxWidth : \"300px\"}}/>\r\n                          </Form.Item>\r\n                          <Form.Item {...formTailLayout} label=\"\">\r\n                              <Button type=\"primary\" onClick={handleSubmit}>Add State</Button>\r\n                          </Form.Item>\r\n                      </Form>\r\n              </Card>\r\n            </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n  return{\r\n    addstatedata: (postdata) => dispatch(addstatedata(postdata))\r\n  }\r\n}\r\nexport default connect(null,mapDispatchToProps)(AddForm);\r\n","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\TheaterPanel\\theaterscreenlist.js",["520","521","522","523","524","525","526","527","528","529","530","531"],"import React, { useState, useEffect } from 'react';\r\nimport { gettscreen,deletetscreen,updatetscreen,singletscreenrecord } from '../../store/action/theaterscreenAction';\r\nimport { getscreen } from \"../../store/action/screenAction\";\r\nimport { fetchmoviedata,singlemovieDataFetch } from \"../../store/action/movieAction\"\r\nimport { connect } from 'react-redux';\r\nimport '../state.css';\r\nimport { Table, Space, Button, Breadcrumb, Card, Form, Modal, Input,Col,DatePicker,TimePicker,Row,Select,Switch } from 'antd';\r\nimport moment from 'moment'\r\n\r\nconst {Option} = Select;\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 24,\r\n  },\r\n  wrapperCol: {\r\n    span: 12,\r\n  },\r\n};\r\nconst formTailLayout = {\r\n  labelCol: {\r\n    span: 4,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n    offset: 4,\r\n  },\r\n};\r\nconst TheaterScreenList = (props) => {\r\n  const [form] = Form.useForm();\r\n  const [error,setError] = useState({\r\n    IsValid:false,\r\n    Screen_nameERROR:\"\"\r\n})\r\n  const [obj, setMyObj1] = useState({\r\n    _id: \"\",\r\n    user_id: \"\",\r\n    movie_id: \"\",\r\n    screen_id:\"\",\r\n    screen_time:\"\",\r\n    start_date:\"\",\r\n    end_date:\"\",\r\n    end_time:\"\",\r\n    price:\"\"\r\n  })\r\n  const [ids, setIds] = useState(\"\");\r\n  const [show, setShow] = useState(false);\r\n  const [ushow, usetShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    props.gettscreen();\r\n    props.getscreen();\r\n    props.fetchmoviedata();\r\n    console.log(props.singletscreen);\r\n    if (props.singletscreen.screen_id) {\r\n      let olddata={...obj};\r\n      console.log(props.singletscreen.screen_id._id)\r\n      olddata.screen_id = props.singletscreen.screen_id._id;\r\n      olddata._id = props.singletscreen._id;\r\n      olddata.user_id = props.singletscreen.user_id._id;\r\n      olddata.movie_id=props.singletscreen.movie_id._id;\r\n      olddata.screen_time=props.singletscreen.screen_time;\r\n      olddata.start_date=props.singletscreen.start_date;\r\n      olddata.end_date=props.singletscreen.end_date;\r\n      olddata.end_time=props.singletscreen.end_time;\r\n      olddata.price=props.singletscreen.price;\r\n      console.log(olddata);\r\n      console.log(obj.start_date)\r\n      setMyObj1(olddata);\r\n    }\r\n  }, [props.gettscreen,props.singletscreen])\r\n\r\n  const deleteHandler = async (id) => {\r\n    await props.deletetscreen(id);\r\n    setShow(false);\r\n  }\r\n\r\n  const SingleSubmit = async () => {\r\n    // let errors = { ...error, IsValid : true };\r\n    // if(!obj.screen_name || obj.screen_name === \"\")\r\n    // {\r\n      \r\n    //   if(!obj.screen_name || obj.screen_name === \"\"){\r\n    //     errors.IsValid = false;\r\n    //     errors.Screen_nameERROR = \"Screenname Is Required \"\r\n    //   }\r\n\r\n    // }else{\r\n    //     errors.Screen_nameERROR = \"\"\r\n    // }\r\n    //   setError(errors);\r\n    //   if(errors.IsValid==true){\r\n    //       console.log(obj);\r\n        await props.updatetscreen(obj._id, obj);\r\n        // setOp(true);\r\n        usetShow(false);\r\n        obj._id = props.singletscreen._id;\r\n        obj.screen_id = \"\";\r\n      // }\r\n    \r\n  }\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = (id) => {\r\n    setShow(true);\r\n    setIds(id);\r\n  }\r\n\r\n  const SingleClose = () => {\r\n    obj.screen_id = \"\";\r\n    props.singletscreen.screen_id = \"\";\r\n    usetShow(false)\r\n  };\r\n\r\n  const handleUpdate = async (_id) => {\r\n    await props.singletscreenrecord(_id);\r\n    usetShow(true);\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Screen_Name',\r\n    //   dataIndex: 'screen_name',\r\n      key: 'screen_id',\r\n      defaultSortOrder: 'descend',\r\n      render: s=>s.screen_id.screen_name,\r\n      sorter: (a, b) => a.screen_id.screen_name.length - b.screen_id.screen_name.length,\r\n    },\r\n     {\r\n      title: 'Movie_Name',\r\n      key: 'movie_id',\r\n    //   dataIndex: 'moviename',\r\n      defaultSortOrder:'descend',\r\n      render: s => s.movie_id.moviename,\r\n      sorter: (a, b) => a.movie_id.moviename.length - b.movie_id.moviename.length,\r\n    }, {\r\n        title: 'screen_time',\r\n        key: 'screen_time',\r\n        dataIndex: 'screen_time',\r\n        sorter: (a, b) => a.screen_time.length - b.screen_time.length,\r\n      },{\r\n        title: 'end_time',\r\n        key: 'end_time',\r\n        dataIndex: 'end_time',\r\n        sorter: (a, b) => a.end_time.length - b.end_time.length,\r\n      },{\r\n        title: 'Start Date',\r\n        key: 'start_date',\r\n        dataIndex: 'start_date',\r\n        sorter: (a, b) => a.start_date.length - b.start_date.length,\r\n      },{\r\n        title: 'End Date',\r\n        key: 'end_date',\r\n        dataIndex: 'end_date',\r\n        sorter: (a, b) => a.end_date.length - b.end_date.length,\r\n      }\r\n    , {\r\n      title: 'Update',\r\n      key: 'Update',\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Button onClick={() => handleUpdate(record._id)} type=\"primary\">UPDATE</Button>\r\n        </Space>\r\n      ),\r\n    }, \r\n    ,{\r\n      title: 'Delete',\r\n      key: 'Delete',\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Button type=\"danger\" onClick={() => handleShow(record._id)} style={{ backgroundColor: \"Red\", borderBlockColor: \"Black\", color: \"White\" }}>Delete</Button>\r\n        </Space>\r\n      ),\r\n    }\r\n  ];\r\n\r\n  const HandleChange = (e, name) => {\r\n    let olddata = {...obj};\r\n    if((name === \"screen_id\") || (name === \"movie_id\"))\r\n    {\r\n      olddata[name] = e;\r\n    }\r\n    else if((name == \"start_date\") || (name == \"end_date\"))\r\n    {\r\n      if(e!=null)\r\n      olddata[name] = new Date(e._d).toLocaleDateString();\r\n    }\r\n    else if((name == \"screen_time\") || (name == \"end_time\"))\r\n    {\r\n      if(e!=null)\r\n      olddata[name] = new Date(e._d).toLocaleTimeString();\r\n    }\r\n    else\r\n    {\r\n      olddata[name] = e.target.value;\r\n    }\r\n    console.log(olddata);\r\n    \r\n    setMyObj1(olddata);\r\n    cityCall(olddata.movie_id);\r\n  }\r\n\r\n  const cityCall =async (id) =>{\r\n    await props.singlemovieDataFetch(id);\r\n    console.log(props.singlemovie);\r\n  }\r\n\r\n  const optionTemplate = ()=>{\r\n    return props.screens.map((screenlist)=>{\r\n      const{_id,screen_name} = screenlist;\r\n      return(\r\n        <option value={_id} key={_id}>{screen_name}</option>\r\n      )\r\n    })\r\n  }\r\n\r\n  const optionMovieTemplate = ()=>{\r\n   return props.movies.map((movielist)=>{\r\n     const{_id,moviename} = movielist;\r\n     return(\r\n       <option value={_id} key={_id}>{moviename}</option>\r\n     )\r\n   })\r\n }\r\n  return (\r\n    <>\r\n      <div className={\"Title\"} style={{ marginTop: \"-29px\"}}>\r\n          </div>\r\n      <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"29px\",fontFamily:\"auto\",textTransform:\"uppercase\"  }}>\r\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item>Theater Screen</Breadcrumb.Item>\r\n        <Breadcrumb.Item>View Theater Screen List</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <div className=\"site-card-border-less-wrapper\">\r\n        <Card title=\"View Screen List\" bordered={true} style={{ width: \"auto\",border:\"5px\" }}>\r\n          <Table columns={columns} dataSource={props.tscreens} pagination={{ pageSize: 4 }} />\r\n        </Card>\r\n      </div>\r\n      {/* Update Record */}\r\n      <Modal title=\"Update Theater Screen\"\r\n       visible={ushow}\r\n       onOk={() => SingleSubmit()}\r\n       onCancel={() => SingleClose()}>\r\n      <Form>\r\n      <Row gutter={0}>\r\n                          <Col span={12}>\r\n                          <Input type=\"hidden\" name=\"_id\" value={obj._id} onChange={(e) => { HandleChange(e, \"_id\") }}/>\r\n                          <Form.Item {...formItemLayout} label=\"SELECT SCREEN:-\"  rules={[{ required: true, message: 'Please Select Screen Name' }]}>\r\n                          <Select name=\"screen_id\" value={obj.screen_id} onChange={(e)=>HandleChange(e,\"screen_id\")} placeholder=\"------ Select Screen-----\" allowClear>\r\n                                      {optionTemplate()}\r\n                                  </Select>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"SELECT MOVIE:-\"  rules={[{ required: true, message: 'Please required movie name!' }]}>\r\n                          <Select name=\"movie_id\" value={obj.movie_id} onChange={(e)=>HandleChange(e,\"movie_id\")} placeholder=\"------ Select Movie-----\" allowClear>\r\n                                      {optionMovieTemplate()}\r\n                                  </Select>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                    </Row>\r\n                      <Row gutter={0}>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Screen Time\" rules={[{ required: true, message: 'Please Select Screen Time' }]}>\r\n                              <TimePicker name=\"screen_time\" value={moment(obj.screen_time,'HH:mm:ss')} onChange={(e) => { HandleChange(e, \"screen_time\") }} placeholder=\"Screen Time\" />\r\n                          </Form.Item>\r\n                      </Col>\r\n                        <Col span={12}>\r\n                        <Form.Item {...formItemLayout} label=\"End Time\"  rules={[{ required: true, message: 'Please Select End Time' }]}>\r\n                              <TimePicker name=\"end_time\" value={moment(obj.end_time,'HH:mm:ss')} onChange={(e) => { HandleChange(e, \"end_time\") }} placeholder=\"End Time\"/>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      </Row>\r\n                      \r\n                      <Row gutter={0}>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Starting Date:-\"  rules={[{ required: true, message: 'Please Select Start Date!' }]}>\r\n                          <DatePicker format=\"DD/MM/yyyy\" value={moment(obj.start_date,'MM/DD/ YYYY')} name=\"start_date\" onChange={(e) => { HandleChange(e, \"start_date\") }} placeholder=\"Start Date\"/>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      <Col span={12}>\r\n                      <Form.Item {...formItemLayout} label=\"Ending Date:-\"  rules={[{ required: true, message: 'Please Select End Date!' }]}>\r\n                          <DatePicker format=\"DD/MM/yyyy\" value={moment(obj.end_date,'MM/DD/ YYYY')} name=\"end_date\" onChange={(e) => { HandleChange(e, \"end_date\") }} placeholder=\"End date\"/>\r\n                          </Form.Item>\r\n                          </Col>\r\n                      </Row>  \r\n                      <Row gutter={0}>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Price:-\"  rules={[{ required: true, message: 'Please Select End Date!' }]}>\r\n                              <Input type=\"text\" name=\"price\" value={obj.price} onChange={(e) => { HandleChange(e, \"price\") }}/>\r\n                          </Form.Item>\r\n                       </Col>\r\n                       <Col span={12}>\r\n                              <span style={{color:\"#0955ff\",fontStyle:\"inherit\",textTransform: \"capitalize\"}}>Note:- Please Starting and ending Date is select  After ReleaseDate :- {props.singlemovie.releasedate}<br></br></span>                               \r\n                       </Col>\r\n                      </Row>                               \r\n      </Form>\r\n      </Modal>\r\n\r\n      {/* Delete Record  */}\r\n      <Modal title=\"Are you sure!\"\r\n        visible={show}\r\n        onOk={() => deleteHandler(ids)}\r\n        onCancel={() => handleClose()}>\r\n        Do you want to delete this state?\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  err: state.theaterscreenReducer.error,\r\n  singlemovie:state.movieReducer.singlemovie,\r\n  tscreens:state.theaterscreenReducer.tscreens,\r\n  singletscreen: state.theaterscreenReducer.singletscreen,\r\n  screens:state.screenReducer.screens,\r\n  singleuser:state.userReducer.singleuser,\r\n  movies:state.movieReducer.movies\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    // getscreen: () => dispatch(getscreen()),\r\n    // deletescreen: (_id) => dispatch(deletescreen(_id)),\r\n    updatetscreen: (postdata, put) => dispatch(updatetscreen(postdata, put)),\r\n    singlemovieDataFetch:(id) => dispatch(singlemovieDataFetch(id)),\r\n    singletscreenrecord: (id) => dispatch(singletscreenrecord(id)),\r\n      gettscreen: ()=>dispatch(gettscreen()),\r\n      deletetscreen: (_id)=>dispatch(deletetscreen(_id)),\r\n      getscreen: ()=> dispatch(getscreen()),\r\n      fetchmoviedata:()=>dispatch(fetchmoviedata())\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TheaterScreenList);\r\n","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\common\\Header.js",["532","533","534","535","536","537","538","539"],"import React,{useState, useEffect} from 'react';\r\nimport { logout} from '../../store/action/userAction';\r\nimport { Link } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport Logo from '../../Movie_logo/logo1.png'\r\nimport { Layout, Menu,Dropdown,Modal,Form,Input } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport {changepassword} from '../../store/action/userAction';\r\n\r\nimport {\r\n  HomeOutlined,AntDesignOutlined,\r\n  MenuUnfoldOutlined,\r\n  MenuFoldOutlined,\r\n  UserOutlined,\r\n  DribbbleOutlined,LockOutlined,LogoutOutlined,\r\n  SlackSquareOutlined,WeiboSquareOutlined,\r\n  AlibabaOutlined,QqOutlined\r\n} from '@ant-design/icons';\r\n\r\nconst { Header, Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nconst SiderDemo = (props) => {\r\n  \r\n    const [active,setActive] =useState(false);\r\n    \r\n      const [error,setError] =useState({\r\n        IsValid:true,        \r\n        confirmError:\"\",\r\n        newError:\"\",\r\n        passwordError:\"\"\r\n      });\r\n      const [show, setShow] = useState(false);\r\n\r\n      useEffect(() =>{\r\n        if(props.err.length!=0)\r\n        {\r\n          setError({\r\n            passwordError:props.err,\r\n          })\r\n          setActive(true);\r\n          console.log(active);\r\n        }\r\n      },[props.err])\r\n\r\n      const [obj,setMyObj1] =useState({\r\n        password:\"\",\r\n        new_password:\"\",\r\n        confirm_password:\"\"\r\n      });      \r\n      \r\n      const handleClose = () => {\r\n        setShow(false);\r\n      }\r\n      const handleShow = async () => {\r\n        setShow(true);\r\n      }\r\n      \r\n      const changePassword = async()=>{\r\n          let errors = { ...error, IsValid : true };\r\n            if(!obj.new_password || !obj.password || !obj.confirm_password ){\r\n              errors.confirmError = \"\";\r\n              errors.newError = \"\";\r\n              errors.passwordError = \"\";\r\n              if(!obj.new_password){\r\n                errors.IsValid = false;\r\n                errors.newError = \"Please enter new password !!\"\r\n              }\r\n              if(!obj.password){\r\n                errors.IsValid = false;\r\n                errors.passwordError = \"Please enter old password !!\"\r\n              }\r\n              if(!obj.confirm_password){\r\n                errors.IsValid = false;\r\n                errors.confirmError = \"Please enter confirm password !!\"\r\n              }\r\n            }else if(obj.new_password!=obj.confirm_password){\r\n                    errors.newError = \"\";\r\n                    errors.passwordError = \"\";\r\n                  if(obj.new_password!=obj.confirm_password){\r\n                    errors.IsValid = false;\r\n                    errors.confirmError = \"Confirm Password Is Not Matched\"\r\n                  }\r\n            }else{\r\n              errors.confirmError = \"\";\r\n              errors.newError = \"\";\r\n              errors.passwordError = \"\";\r\n              errors.IsValid=true;\r\n            }\r\n            setError(errors);\r\n            if(errors.IsValid==true){\r\n              try {\r\n                await props.changepassword(obj.password,obj.new_password);\r\n                setShow(false);\r\n              } catch {\r\n\r\n              }\r\n            }   \r\n      }\r\n      \r\n      const HandleChange = (e, name) => {\r\n        let olddata = { ...obj };\r\n        olddata[name] = e.target.value;    \r\n        setMyObj1(olddata);\r\n      }\r\n\r\n      const HandleLogOut = async () =>{\r\n        await props.logout();\r\n      }\r\n      const[collapsed,setCollapsed] = useState(false);\r\n      \r\n      const toggle = () => {\r\n        setCollapsed(!collapsed);\r\n      };\r\n      \r\n      const userMenu = (\r\n        <Menu>\r\n          <Menu.Item key=\"admin\"><h4><UserOutlined /> Welcome, Admin</h4></Menu.Item>  \r\n          <Menu.Item key=\"/admin/changepassword\" onClick={() => handleShow()}><LockOutlined />Change Password</Menu.Item>\r\n          <Menu.Divider />\r\n          <Menu.Item key=\"/admin/logout\" onClick={() => HandleLogOut()}><LogoutOutlined />Logout</Menu.Item>\r\n        </Menu>\r\n      );\r\n    return (\r\n      <Layout style={{minHeight:\"100vh\"}}>\r\n          <Sider trigger={null} collapsible collapsed={collapsed}>\r\n              <div className=\"logo\"><img src={Logo} style={{height: \"60px\",width: \"60px\",marginLeft:\"05px\"}}/></div>\r\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']} style={{color:\"white\",fontFamily:\"auto\",textTransform:\"uppercase\"}}>\r\n          <Menu.Item key=\"/dashboard\" icon={<HomeOutlined/>} style={{color:\"white\",fontFamily:\"auto\",textTransform:\"uppercase\"}}>\r\n          <Link to=\"/dashboard\">Dashboard</Link>\r\n            </Menu.Item>\r\n            <SubMenu key=\"sub1\" icon={<AntDesignOutlined />} title=\"State\" style={{color:\"white\",fontFamily:\"auto\",textTransform:\"uppercase\"}}>\r\n              <Menu.Item key=\"/state/stateAdd\"><Link to=\"/state/stateAdd\">Add State</Link></Menu.Item>\r\n              <Menu.Item key=\"/state\"><Link to=\"/state\">View State</Link></Menu.Item>\r\n            </SubMenu>\r\n            <SubMenu key=\"sub2\" icon={<QqOutlined />} title=\"City\" style={{color:\"white\",fontFamily:\"auto\",textTransform:\"uppercase\"}}>\r\n              <Menu.Item key=\"/city/cityAdd\"><Link to=\"/city/cityAdd\">Add City</Link></Menu.Item>\r\n              <Menu.Item key=\"/city\"><Link to=\"/city\">View City</Link></Menu.Item>\r\n            </SubMenu>\r\n            <SubMenu key=\"sub3\" icon={<DribbbleOutlined />} title=\"Movie\" style={{color:\"white\",fontFamily:\"auto\",textTransform:\"uppercase\"}}>\r\n              <Menu.Item key=\"/movie/movieAdd\"><Link to=\"/movie/movieAdd\">Add Movie</Link></Menu.Item>\r\n              <Menu.Item key=\"/movie\"><Link to=\"/movie\">View Movies</Link></Menu.Item>\r\n            </SubMenu>\r\n            <SubMenu key=\"sub4\" icon={<AlibabaOutlined />} title=\"User/Theater\" style={{color:\"white\",fontFamily:\"auto\",textTransform:\"uppercase\"}}>\r\n              <Menu.Item key=\"/users\"><Link to=\"/users\">View Users</Link></Menu.Item>\r\n              <Menu.Item key=\"/theaters\"><Link to=\"/theaters\">View Theater</Link></Menu.Item>\r\n            </SubMenu>\r\n          </Menu>\r\n        </Sider>\r\n       \r\n        <Layout className=\"site-layout\">\r\n          <Header className=\"site-layout-background\" style={{ padding: 0,color: \"white\" }}>\r\n            {React.createElement(collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\r\n              className: 'trigger',\r\n              onClick: toggle,color:\"red\"\r\n            })}\r\n          <Dropdown.Button\r\n                style={{ float: 'right',marginTop: \"20px\", marginRight: \"13px\" }}\r\n                overlay={userMenu}\r\n                icon={\r\n                  <UserOutlined\r\n                  style={{\r\n                    marginTop: \"-3px\",\r\n                    fontSize: '28px',\r\n                    backgroundColor: '#f0f0f0',\r\n                    borderRadius: '50%',\r\n                  }}\r\n                  />\r\n                }\r\n                ></Dropdown.Button>;\r\n          </Header>\r\n            {props.content}\r\n          </Layout>\r\n              <Modal title=\"Are you sure!\"\r\n              visible={show}\r\n              onOk={() => changePassword()}\r\n              onCancel={() => handleClose()}>\r\n                \r\n                  <Form>\r\n                    <Form.Item label=\"Enter Old Password:-\"\r\n                        hasFeedback\r\n                        style={{    marginLeft:\"30px\"}}\r\n                        validateStatus={(error.passwordError)?\"error\":\"success\"}\r\n                        help={error.passwordError}>                  \r\n                          <Input type=\"password\" style={{ backgroundColor: \"#e2e2e2\", color: \"#463334\" }} name=\"password\"  onChange={(e) => HandleChange(e, \"password\")} placeholder=\"Enter old password ...\" />\r\n                        </Form.Item>\r\n                    <Form.Item label=\"Enter New Password:-\"\r\n                        hasFeedback\r\n                        style={{    marginLeft:\"24px\"}}\r\n                        validateStatus={(error.newError)?\"error\":\"success\"}\r\n                        help={error.newError}>                  \r\n                        <Input type=\"password\" style={{ backgroundColor: \"#e2e2e2\", color: \"#463334\" }} name=\"new_password\"  onChange={(e) => HandleChange(e, \"new_password\")} placeholder=\"Enter New password ...\" />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Enter Confirm Password:-       \"\r\n                        hasFeedback\r\n                        style={{    marginLeft:\"4px\"}}\r\n                        validateStatus={(error.confirmError)?\"error\":\"success\"}\r\n                        help={error.confirmError}>                  \r\n                        <Input type=\"password\" style={{ backgroundColor: \"#e2e2e2\", color: \"#463334\" }} name=\"confirm_password\"  onChange={(e) => HandleChange(e, \"confirm_password\")} placeholder=\"Enter Confirm password ...\" />\r\n                    </Form.Item>\r\n                </Form>\r\n              </Modal>\r\n          </Layout>\r\n          \r\n    );\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  err: state.userReducer.error1,\r\n  Loading: state.userReducer.loading,\r\n  singleuser2: state.userReducer.singleuser2,\r\n})\r\nconst mapDispatchToProps = dispatch =>{\r\n  return{\r\n    logout:()=>dispatch(logout()),\r\n    changepassword:(pass,newpass)=> dispatch(changepassword(pass,newpass))\r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(SiderDemo);","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\common\\HeaderTheater.js",["540","541","542","543","544","545","546","547","548","549"],"D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\State_All_Form\\stateList.js",["550","551","552","553","554","555"],"import React, { useState, useEffect } from 'react';\r\n// import {  Modal } from 'react-bootstrap';\r\nimport { fetchstatedata, deletestatedata, updatestatedata, singlestateDataFetch } from '../../store/action/stateAction';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { BiPlusMedical, BiSearch } from 'react-icons/bi';\r\nimport { FiAlignJustify } from \"react-icons/fi\";\r\nimport { Table,Space,Button,Breadcrumb,Card,Form,Modal,Input } from 'antd';\r\nimport '../state.css';\r\n\r\nconst StateList = (props) => {\r\n  const [obj, setMyObj1] = useState({\r\n    _id: \"\",\r\n    state_name: \"\",\r\n  })\r\n\r\n  const [ids, setIds] = useState(\"\");\r\n  const [error,setError] = useState({\r\n    state_nameError:'',\r\n    IsValid:false\r\n})\r\n  useEffect(() => {\r\n    props.fetchstatedata();\r\n    if (props.singlestate.state_name) {\r\n      console.log(props.singlestate.state_name)\r\n      let olddata={...obj};\r\n      olddata.state_name = props.singlestate.state_name;\r\n      olddata._id = props.singlestate._id;\r\n      setMyObj1(olddata);\r\n    }\r\n  }, [props.fetchstatedata,props.singlestate])\r\n\r\n  const deleteHandler = async (id) => {\r\n    await props.deletestatedata(id);\r\n    setShow(false);\r\n  }\r\n\r\n  const SingleSubmit = async () => {\r\n    // let categoryData = {...obj}\r\n    let errors = { ...error, IsValid : true };\r\n    if(!obj.state_name || obj.state_name === \"\")\r\n    {\r\n        errors.IsValid = false;\r\n        errors.state_nameError = \"StateName Is Required \"\r\n    }\r\n    else\r\n        errors.state_nameError = \"\"\r\n    setError(errors);\r\n    if(errors.IsValid==true){\r\n      await props.updatestatedata(obj._id, obj);\r\n      usetShow(false);\r\n      obj.state_name = \"\";\r\n      props.singlestate.state_name = \"\";\r\n    }\r\n  }\r\n\r\n  const [show, setShow] = useState(false);\r\n  const [ushow, usetShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = (id) => {\r\n    setShow(true);\r\n    setIds(id);\r\n  }\r\n\r\n  const SingleClose = () => {\r\n    setError({\r\n      state_nameError:\"\",\r\n      IsValid:true\r\n    })\r\n    obj.state_name = \"\";\r\n    props.singlestate.state_name = \"\";\r\n    usetShow(false)\r\n  };\r\n\r\n  // if (props.singlestate.state_name && !obj.state_name) {\r\n  //   obj.state_name = props.singlestate.state_name;\r\n  //   obj._id = props.singlestate._id;\r\n  // }\r\n  const handleUpdate = async (_id) => {\r\n    await props.singlestateDataFetch(_id);\r\n    usetShow(true);\r\n  }\r\n  \r\n  const columns = [\r\n    {\r\n      title: 'state_Name',\r\n      dataIndex: 'state_name',\r\n      key: 'state_name',\r\n      defaultSortOrder: 'descend',\r\n      sorter: (a, b) => a.state_name.length - b.state_name.length,\r\n    },{\r\n      title: 'Update',\r\n      key: 'Update',\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Button onClick={() => handleUpdate(record._id)} type=\"primary\">UPDATE</Button>\r\n        </Space>\r\n      ),\r\n    },{\r\n      title: 'Delete',\r\n      key: 'Delete',\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Button type=\"danger\" onClick={() => handleShow(record._id)} style={{backgroundColor:\"Red\",borderBlockColor:\"Black\",color:\"White\"}}>Delete</Button>\r\n        </Space>\r\n      ),\r\n    }\r\n  ];\r\n  // }\r\n  const HandleChange = (e, name) => {\r\n    let olddata = { ...obj };\r\n    olddata[name] = e.target.value;    \r\n    setMyObj1(olddata);\r\n  }\r\n  return (\r\n    <>\r\n          <Breadcrumb style={{ marginTop: \"-29px\",textAlign:\"right\",marginBottom:\"29px\" }} key=\"sdsgf\">\r\n              <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n              <Breadcrumb.Item>State</Breadcrumb.Item>\r\n              <Breadcrumb.Item>View State List</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n            <div className=\"site-card-border-less-wrapper\" key=\"sdsbhdcb\">\r\n              <Card title=\"View State List\" bordered={false} style={{ width: \"auto\" }} key=\"sdkbjse\">\r\n                <Table columns={columns} dataSource={props.states} pagination={{ pageSize: 4 }} key=\"mvseuiwi\"/>\r\n              </Card>\r\n            </div>\r\n      {/* Update Record */}\r\n       <Modal title=\"Update State\"\r\n       key=\"ssd\"\r\n        visible={ushow}\r\n        onOk={() => SingleSubmit()}\r\n        onCancel={() =>SingleClose()}>\r\n            <Form>\r\n                <Input type=\"hidden\" name=\"_id\" value={obj._id} onChange={(e) => HandleChange(e, \"_id\")} placeholder=\"Enter state name ...\" />\r\n                <Form.Item label=\"Enter State Name:-\"\r\n                hasFeedback\r\n                validateStatus={(error.state_nameError)?\"error\":\"success\"}\r\n                help={error.state_nameError}>                  \r\n                    <Input type=\"text\" style={{ backgroundColor: \"#e2e2e2\", color: \"#463334\" }} name=\"state_name\" value={obj.state_name} onChange={(e) => HandleChange(e, \"state_name\")} placeholder=\"Enter state name ...\" />\r\n                </Form.Item>\r\n            </Form>\r\n      </Modal>\r\n\r\n      {/* Delete Record  */}\r\n       <Modal title=\"Are you sure!\"\r\n       key=\"sdsfd\"\r\n        visible={show}\r\n        onOk={() => deleteHandler(ids)}\r\n        onCancel={() =>handleClose()}>\r\n              Do you want to delete this state?\r\n      </Modal> \r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  err: state.stateReducer.error,\r\n  Loading: state.stateReducer.loading,\r\n  states: state.stateReducer.states,\r\n  singlestate: state.stateReducer.singlestate,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchstatedata: () => dispatch(fetchstatedata()),\r\n    deletestatedata: (_id) => dispatch(deletestatedata(_id)),\r\n    updatestatedata: (postdata, put) => dispatch(updatestatedata(postdata, put)),\r\n    singlestateDataFetch: (id) => dispatch(singlestateDataFetch(id))\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StateList);\r\n","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\City_All_Form\\addForm.js",["556","557","558","559","560","561","562","563","564","565","566","567","568","569","570"],"import React,{useState,useEffect} from 'react';\r\n// import Form from 'react-bootstrap/Form';\r\nimport {Row,Col,Modal,CardGroup} from 'react-bootstrap';\r\n// import Card from 'react-bootstrap/Card';\r\n// import Button from 'react-bootstrap/Button'/;\r\nimport {addcitiesdata} from '../../store/action/cityAction';\r\nimport {fetchstatedata} from '../../store/action/stateAction';\r\nimport {connect} from 'react-redux';\r\nimport { Breadcrumb,Card,Select,Space } from 'antd';\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button\r\n} from 'antd';\r\nconst {Option} = Select;\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 4,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n  },\r\n};\r\nconst formTailLayout = {\r\n  labelCol: {\r\n    span: 4,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n    offset: 4,\r\n  },\r\n};\r\n\r\nconst AddForm = (props) => {\r\n  const [form] = Form.useForm();\r\n    const [obj,setMyObj]= useState({\r\n      city_name:\"\",\r\n      state_id:\"\"\r\n    })\r\n    const [error,setError]=useState({\r\n        city_nameError:\"\",\r\n        isValid:false\r\n    });\r\n    \r\nconst [show, setShow] = useState(false);\r\nconst [ids,setIds] = useState(\"\");\r\n\r\nconst handleClose = () => setShow(false);\r\nconst handleShow = (id) => {setShow(true);\r\n  setIds(id);\r\n}\r\n\r\nconst deleteHandler = async (id) =>{\r\n    await props.deletestatedata(id);\r\n    setShow(false);\r\n  }\r\n    useEffect(()=>{\r\n      form.validateFields(['nickname']);\r\n        props.fetchstatedata();\r\n      // console.log(props.states);\r\n    },[props.fetchstatedata])\r\n    \r\n    const handleSubmit = async () =>{\r\n      try {\r\n        const values = await form.validateFields();\r\n        // console.log('Success:', values);\r\n        await props.addcitiesdata(obj);\r\n        props.history.replace(\"/city\");\r\n        obj.city_name=\"\";\r\n      } catch (errorInfo) {\r\n        console.log('Failed:', errorInfo);\r\n      }\r\n    }\r\n  \r\n\r\n    const HandleChange = (e,name) =>{\r\n      let olddata = {...obj};\r\n      if(name!=\"state_id\"){\r\n        olddata[name] = e.target.value;\r\n        }else{\r\n          olddata[name] = e;\r\n        }\r\n       setMyObj(olddata);\r\n    }\r\n\r\n    const optionTemplate = () => {\r\n      return props.states.map((stateslist) => {\r\n      const { _id, state_name } = stateslist;\r\n      return (\r\n          <Option value={_id} key={_id}>{state_name}</Option>\r\n       )\r\n      })    \r\n    }\r\n  return (\r\n\r\n    <>\r\n     <div className={\"Title\"} style={{marginTop: \"-29px\" }}>\r\n          </div>\r\n          <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"30px\",fontFamily:\"auto\",textTransform:\"uppercase\"  }}>\r\n              <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n              <Breadcrumb.Item>City</Breadcrumb.Item>\r\n              <Breadcrumb.Item>Add City</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n              <Card title=\"Add City Form\" bordered={false} style={{ width: \"auto\" }}>\r\n                      <Form form={form} name=\"AddForm\">\r\n                      <Form.Item {...formItemLayout} label=\"Enter City Name:-\" name=\"city_name\" rules={[{ required: true, message: 'Please required City!' }]}>\r\n                              <Input type=\"text\" name=\"city_name\" onChange={(e)=>{HandleChange(e,\"city_name\")}} placeholder=\"Enter city name ...\" style={{maxWidth : \"300px\"}}/>\r\n                          </Form.Item>\r\n                          <Form.Item {...formItemLayout} label=\"Select State :-\" name=\"state_id\" rules={[{ required: true, message: 'Please required State!' }]}>\r\n                                <Select name=\"state_id\" onChange={(e)=>HandleChange(e,\"state_id\")} placeholder=\"------ Select State-----\" allowClear>\r\n                                      {optionTemplate()}\r\n                                  </Select>\r\n                          </Form.Item>\r\n                           <Form.Item {...formTailLayout} label=\"\"> \r\n                                <Button type=\"primary\" onClick={(e) =>handleSubmit()}>Add City</Button>\r\n                          </Form.Item> \r\n                      </Form>\r\n              </Card>\r\n            </div>\r\n    \r\n    </>\r\n  );\r\n}\r\nconst mapStateToProps =  (state) => ({\r\n    err:state.stateReducer.error,\r\n    states:state.stateReducer.states,\r\n  })\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n  return{\r\n    fetchstatedata:()=>dispatch(fetchstatedata()),\r\n    addcitiesdata: (postdata) => dispatch(addcitiesdata(postdata))\r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(AddForm);\r\n","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\City_All_Form\\cityList.js",["571","572","573","574"],"import React, { useState, useEffect } from 'react';\r\nimport { fetchcitiesdata, deletecitiesdata, updatecitiesdata, singlecitiesDataFetch } from '../../store/action/cityAction';\r\nimport { fetchstatedata } from '../../store/action/stateAction';\r\nimport { connect } from 'react-redux';\r\nimport '../state.css';\r\nimport { Table, Space, Button, Breadcrumb, Card, Form, Modal, Input, Select } from 'antd';\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 10,\r\n  },\r\n};\r\n\r\nconst CityList = (props) => {\r\n  const { Option } = Select;\r\n  const [form] = Form.useForm();\r\n  const [error,setError] = useState({\r\n    state_nameError:'',\r\n    IsValid:false,\r\n    city_nameError:\"\"\r\n})\r\n  const [obj, setMyObj1] = useState({\r\n    _id: \"\",\r\n    city_name: \"\",\r\n    state_id: \"\"\r\n  })\r\n  const [op,setOp] = useState(true);\r\n  const [ids, setIds] = useState(\"\");\r\n  const [show, setShow] = useState(false);\r\n  const [ushow, usetShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    props.fetchcitiesdata();\r\n    props.fetchstatedata();\r\n    if (props.singlecities.city_name) {\r\n      console.log(props.singlecities.city_name)\r\n      let olddata={...obj};\r\n      olddata.city_name = props.singlecities.city_name;\r\n      olddata._id = props.singlecities._id;\r\n      olddata.state_id=props.singlecities.state_id;\r\n      setMyObj1(olddata);\r\n    }\r\n  }, [props.fetchcitiesdata, props.fetchstatedata,props.singlecities])\r\n\r\n  const deleteHandler = async (id) => {\r\n    await props.deletecitiesdata(id);\r\n    setShow(false);\r\n  }\r\n\r\n  const SingleSubmit = async () => {\r\n    let errors = { ...error, IsValid : true };\r\n    if(!obj.state_id || obj.state_id === \"\" || !obj.city_name || obj.city_name === \"\")\r\n    {\r\n      if(!obj.state_id || obj.state_id === \"\"){\r\n        errors.IsValid = false;\r\n        errors.state_nameError = \"StateName Is Required \"\r\n      }\r\n      if(!obj.city_name || obj.city_name === \"\"){\r\n        errors.IsValid = false;\r\n        errors.city_nameError = \"cityname Is Required \"\r\n      }\r\n\r\n    }else{\r\n        errors.state_nameError = \"\"\r\n        errors.city_nameError = \"\"\r\n    }\r\n      setError(errors);\r\n      if(errors.IsValid==true){\r\n        await props.updatecitiesdata(obj._id, obj);\r\n        setOp(true);\r\n        usetShow(false);\r\n        obj._id = props.singlecities._id;\r\n        obj.city_name = \"\";\r\n      }\r\n    \r\n  }\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = (id) => {\r\n    setOp(true);\r\n    setShow(true);\r\n    setIds(id);\r\n  }\r\n\r\n  const SingleClose = () => {\r\n    setOp(true);\r\n    obj.city_name = \"\";\r\n    props.singlecities.city_name = \"\";\r\n    usetShow(false)\r\n  };\r\n\r\n  // if (props.singlecities.city_name && !obj.city_name) {\r\n  //   if(op!=false){\r\n  //     console.log(op);\r\n  //     setMyObj1(props.singlecities)\r\n  //   }\r\n  // }\r\n  const handleUpdate = async (_id) => {\r\n    await props.singlecitiesDataFetch(_id);\r\n    usetShow(true);\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: 'city_Name',\r\n      dataIndex: 'city_name',\r\n      key: 'city_name',\r\n      defaultSortOrder: 'descend',\r\n      sorter: (a, b) => a.city_name.length - b.city_name.length,\r\n    }, {\r\n      title: 'state_name',\r\n      key: 'state_id',\r\n      defaultSortOrder: 'descend',\r\n      render: s => s.state_id.state_name,\r\n      sorter: (a, b) => a.state_id.state_name.length - b.state_id.state_name.length,\r\n    }, {\r\n      title: 'Update',\r\n      key: 'Update',\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Button onClick={() => handleUpdate(record._id)} type=\"primary\">UPDATE</Button>\r\n        </Space>\r\n      ),\r\n    }, {\r\n      title: 'Delete',\r\n      key: 'Delete',\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Button type=\"danger\" onClick={() => handleShow(record._id)} style={{ backgroundColor: \"Red\", borderBlockColor: \"Black\", color: \"White\" }}>Delete</Button>\r\n        </Space>\r\n      ),\r\n    }\r\n  ];\r\n\r\n  const HandleChange = (e, name) => {\r\n    let olddata = { ...obj };\r\n    if (name != \"state_id\") {\r\n      olddata[name] = e.target.value;\r\n    } else {\r\n      olddata[name] = e;\r\n    }\r\n    setOp(false);\r\n    setMyObj1(olddata);\r\n  }\r\n\r\n  const optionTemplate = () => {\r\n    return props.states.map((stateslist) => {\r\n      const { _id, state_name } = stateslist;\r\n      return (\r\n        <Option value={_id} key={_id}>{state_name}</Option>\r\n      )\r\n    })\r\n  }\r\n  return (\r\n    <>\r\n      <div className={\"Title\"} style={{ marginTop: \"-29px\"}}>\r\n        {/* City List */}\r\n          </div>\r\n      <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"29px\",fontFamily:\"auto\",textTransform:\"uppercase\" }}>\r\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item>City</Breadcrumb.Item>\r\n        <Breadcrumb.Item>View City List</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <div className=\"site-card-border-less-wrapper\">\r\n        <Card title=\"View City List\" bordered={true} style={{ width: \"auto\",border:\"5px\" }}>\r\n          <Table columns={columns} dataSource={props.cities} pagination={{ pageSize: 4 }} />\r\n        </Card>\r\n      </div>\r\n      {/* Update Record */}\r\n      <Modal title=\"Update State\"\r\n        visible={ushow}\r\n        onOk={() => SingleSubmit()}\r\n        onCancel={() => SingleClose()}>\r\n        <Form form={form} name=\"CityList\">\r\n          <Input type=\"hidden\" name=\"_id\" value={obj._id} onChange={(e) => HandleChange(e, \"_id\")} />\r\n          <Form.Item {...formItemLayout} label=\"Enter City Name:-\" \r\n                hasFeedback\r\n                validateStatus={(error.city_nameError)?\"error\":\"success\"}\r\n                help={error.city_nameError}>\r\n            <Input type=\"text\" name=\"city_name\" value={obj.city_name || \" \"} onChange={(e) => { HandleChange(e, \"city_name\") }} placeholder=\"Enter city name ...\" />\r\n          </Form.Item>\r\n          <Form.Item {...formItemLayout} label=\"Select State :-\" \r\n                hasFeedback\r\n                validateStatus={(error.state_nameError)?\"error\":\"success\"}\r\n                help={error.state_nameError}>\r\n            <Select name=\"state_id\" value={obj.state_id} onChange={(e) => HandleChange(e, \"state_id\")} placeholder=\"------ Select State-----\">\r\n              {optionTemplate()}\r\n            </Select>\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n\r\n      {/* Delete Record  */}\r\n      <Modal title=\"Are you sure!\"\r\n        visible={show}\r\n        onOk={() => deleteHandler(ids)}\r\n        onCancel={() => handleClose()}>\r\n        Do you want to delete this state?\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  err: state.cityReducer.error,\r\n  cities: state.cityReducer.cities,\r\n  states: state.stateReducer.states,\r\n  singlecities: state.cityReducer.singlecities\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchstatedata: () => dispatch(fetchstatedata()),\r\n    fetchcitiesdata: () => dispatch(fetchcitiesdata()),\r\n    deletecitiesdata: (_id) => dispatch(deletecitiesdata(_id)),\r\n    updatecitiesdata: (postdata, put) => dispatch(updatecitiesdata(postdata, put)),\r\n    singlecitiesDataFetch: (id) => dispatch(singlecitiesDataFetch(id))\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CityList);\r\n","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\Movie_All_Form\\addMovie.js",["575","576","577","578","579","580","581","582"],"import React, { useState } from 'react';\r\nimport { addmoviedata } from \"../../store/action/movieAction\";\r\nimport { connect } from 'react-redux';\r\nimport { Breadcrumb,Card,Row,Col,DatePicker,Select } from 'antd';\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Switch\r\n} from 'antd';\r\n// import { Row } from 'react-bootstrap';\r\nconst {Option} = Select;\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    // span: 5,\r\n  },\r\n  wrapperCol: {\r\n    span: 10,\r\n  },\r\n};\r\nconst formTailLayout = {\r\n  labelCol: {\r\n    span: 4,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n    offset: 4,\r\n  },\r\n};\r\n\r\nconst AddMovie = (props) => {\r\n  const { RangePicker } = DatePicker;\r\n  const [form] = Form.useForm();\r\n  const [obj, setMyObj] = useState({\r\n    moviename: \"\",\r\n    releasedate: \"\",\r\n    movie_languages:\"\",\r\n    movie_status: \"\",\r\n    movie_category: \"\",\r\n    director_name: \"\",\r\n    Actors_name: \"\",\r\n    movie_description: \"\",\r\n    movie_type: \"\",\r\n    movie_logo: \"\",\r\n    booking_status: \"\"\r\n  })\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n        const values = await form.validateFields();\r\n        // console.log(obj);\r\n        if(obj.booking_status==\"\" || obj.movie_status==\"\"){\r\n          if(obj.movie_status==\"\"){\r\n            obj.booking_status=false;\r\n          }if(obj.booking_status==\"\"){\r\n            obj.movie_status=false;\r\n          }\r\n        }\r\n        const formdata = new FormData();\r\n        formdata.append(\"moviename\",obj.moviename);\r\n        formdata.append(\"releasedate\",obj.releasedate);\r\n        formdata.append(\"movie_status\",obj.movie_status);\r\n        formdata.append(\"movie_category\",obj.movie_category);\r\n        formdata.append(\"director_name\",obj.director_name);\r\n        formdata.append(\"Actors_name\",obj.Actors_name);\r\n        formdata.append(\"movie_description\",obj.movie_description);\r\n        formdata.append(\"movie_type\",obj.movie_type);\r\n        formdata.append(\"movie_languages\",obj.movie_languages);\r\n        formdata.append(\"movie_logo\",obj.movie_logo);\r\n        formdata.append(\"booking_status\",obj.booking_status);\r\n      \r\n        console.log(obj.moviename);\r\n        await props.addmoviedata(formdata);\r\n        props.history.replace(\"/movie\");\r\n    } catch (errorInfo) {\r\n    }\r\n  }\r\n\r\n  const HandleChange = (e, name) => {\r\n    let olddata = { ...obj };\r\n    if (name == \"movie_logo\") {\r\n      const { target: { files } } = e\r\n      olddata[name] = files.length === 1 ? files[0] : files\r\n      olddata[name] = e.target.files[0];\r\n    }else if(name == \"releasedate\"){\r\n      if(e!=null){\r\n        olddata[name] = new Date(e._d).toLocaleDateString();\r\n      }\r\n    }else if((name === \"movie_type\") || (name === \"movie_category\") || (name === \"booking_status\") || (name === \"movie_status\") || (name=== \"movie_languages\")){\r\n        olddata[name] = e;\r\n    }else\r\n    {\r\n      olddata[name] = e.target.value;\r\n    }\r\n    setMyObj(olddata);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={\"Title\"} style={{marginTop: \"-29px\" }}>\r\n          </div>\r\n          <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"30px\",fontFamily:\"auto\",textTransform:\"uppercase\"   }}>\r\n              <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n              <Breadcrumb.Item>Movie</Breadcrumb.Item>\r\n              <Breadcrumb.Item>Add Movie</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n              <Card title=\"Add Movie Form\" bordered={false} style={{ width: \"auto\" }}>\r\n                      <Form form={form} name=\"AddMovie\">\r\n                      <Row gutter={0}>\r\n                          <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Name:-\" name=\"moviename\" rules={[{ required: true, message: 'Please required movie name!' }]}>\r\n                              <Input type=\"text\" name=\"moviename\" onChange={(e) => { HandleChange(e, \"moviename\") }} placeholder=\"Enter moviename ...\" style={{maxWidth : \"300px\", width:\"100%\"}}/>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Category:-\" name=\"movie_category\" rules={[{ required: true, message: 'Please required movie category!' }]}>\r\n                                  <Select name=\"movie_category\" onChange={(e)=>HandleChange(e,\"movie_category\")} placeholder=\"------ Select Movie Category-----\" allowClear style={{maxWidth : \"300px\"}}>\r\n                                      <Option value=\"A\" key={\"A\"}>A</Option>\r\n                                      <Option value=\"B\" key={\"B\"}>B</Option>\r\n                                      <Option value=\"C\" key={\"C\"}>C</Option>\r\n                                      <Option value=\"D\" key={\"D\"}>D</Option>\r\n                                  </Select>\r\n                              {/* <Input type=\"text\" name=\"movie_category\" onChange={(e) => { HandleChange(e, \"movie_category\") }} placeholder=\"Enter movie_category ...\" style={{maxWidth : \"300px\", width:\"100%\"}}/> */}\r\n                          </Form.Item>\r\n                      </Col>\r\n                    </Row>\r\n                      <Row gutter={0}>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Release Date:-\" name=\"releasedate\" rules={[{ required: true, message: 'Please required Releasedate!' }]}>\r\n                              <DatePicker onChange={(e) => { HandleChange(e, \"releasedate\") }} format={\"YYYY/MM/DD\"}/>\r\n                          </Form.Item>\r\n                      </Col>\r\n                        <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Director Name:-\" name=\"director_name\" rules={[{ required: true, message: 'Please required director name!' }]}>\r\n                              <Input type=\"text\" name=\"director_name\" onChange={(e) => { HandleChange(e, \"director_name\") }} placeholder=\"Enter director_name ...\" style={{maxWidth : \"300px\"}}/>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      </Row>\r\n                      <Row gutter={0}>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Actors Name:-\" name=\"Actors_name\" rules={[{ required: true, message: 'Please required actors name!' }]}>\r\n                              <Input type=\"text\" name=\"Actors_name\" onChange={(e) => { HandleChange(e, \"Actors_name\") }} placeholder=\"Enter Actors ...\" style={{maxWidth : \"300px\"}}/>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Description:-\" name=\"movie_description\" rules={[{ required: true, message: 'Please required movie description!' }]}>\r\n                              <Input type=\"text\" name=\"movie_description\" onChange={(e) => { HandleChange(e, \"movie_description\") }} placeholder=\"Enter movie_description ...\" style={{maxWidth : \"300px\"}}/>\r\n                          </Form.Item>\r\n                          </Col>\r\n                      </Row>\r\n                      <Row gutter={0}>\r\n                        <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Type:-\" name=\"movie_type\" rules={[{ required: true, message: 'Please required movie type!' }]}>\r\n                                  <Select name=\"movie_type\" onChange={(e)=>HandleChange(e,\"movie_type\")} placeholder=\"------ Select Movie Type-----\" allowClear style={{maxWidth : \"300px\"}}>\r\n                                      <Option value=\"Action\" key={\"Action\"}>Action</Option>\r\n                                      <Option value=\"Comedy\" key={\"Comedy\"}>Comedy</Option>\r\n                                      <Option value=\"Drama\" key={\"Drama\"}>Drama</Option>\r\n                                      <Option value=\"Fantasy\" key={\"Fantasy\"}>Fantasy</Option>\r\n                                      <Option value=\"Horror\" key={\"Horror\"}>Horror</Option>\r\n                                      <Option value=\"Mystery\" key={\"Mystery\"}>Mystery</Option>\r\n                                      <Option value=\"Romance\" key={\"Romance\"}>Romance</Option>\r\n                                      <Option value=\"Thriller\" key={\"Thriller\"}>Thriller</Option>\r\n                                      <Option value=\"Western\" key={\"Western\"}>Western</Option>\r\n                                      <Option value=\"Crime Film\" key={\"Crime Film\"}>Crime Film</Option>\r\n                                      <Option value=\"Romantic Comedy\" key={\"Romantic Comedy\"}>Romantic Comedy</Option>\r\n                                      <Option value=\"Documentary\" key={\"Documentary\"}>Documentary</Option>\r\n                                  </Select>\r\n                              {/* <Input type=\"text\" name=\"movie_type\" onChange={(e) => { HandleChange(e, \"movie_type\") }} placeholder=\"Enter movie_type...\" style={{maxWidth : \"300px\"}}/> */}\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Choice Movie Logo:-\" name=\"movie_logo\" rules={[{ required: true, message: 'Please required movie logo!' }]}>\r\n                              <Input type=\"file\" name=\"movie_logo\" onChange={(e)=>{HandleChange(e,\"movie_logo\")}} placeholder=\"Enter movie_logo ...\" style={{maxWidth : \"300px\"}}/>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      </Row>\r\n                      <Row gutter={0}>\r\n                        <Col span={12}>\r\n                        <Form.Item {...formItemLayout} label=\"Movie Languages:-\" name=\"movie_languages\" rules={[{ required: true, message: 'Please required movie Languages !' }]}>\r\n                                  <Select name=\"movie_languages\" onChange={(e)=>HandleChange(e,\"movie_languages\")} placeholder=\"------ Select Movie Languages Type-----\" allowClear style={{maxWidth : \"300px\"}}>\r\n                                      <Option value=\"English\" key={\"English\"}>English</Option>\r\n                                      <Option value=\"Hindi\" key={\"Hindi\"}>Hindi</Option>\r\n                                      <Option value=\"Tamil\" key={\"Tamil\"}>Tamil</Option>\r\n                                      <Option value=\"Gujarati\" key={\"Gujarati\"}>Gujarati</Option>\r\n                                      <Option value=\"Telugu\" key={\"Telugu\"}>Telugu</Option>\r\n                                      <Option value=\"Bengali\" key={\"Bengali\"}>Bengali</Option>\r\n                                      <Option value=\"Marathi\" key={\"Marathi\"}>Marathi</Option>\r\n                                      <Option value=\"Telugu\" key={\"Telugu\"}>Telugu</Option>\r\n                                      <Option value=\"Bhojpuri\" key={\"Bhojpuri\"}>Bhojpuri</Option>\r\n                                  </Select>\r\n                          </Form.Item>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row gutter={0}>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Select Booking Status:-\" name=\"booking_status\" valuePropName=\"checked\" >\r\n                          {/* <Form.Item label=\"Switch\"> */}\r\n                              <Switch name=\"booking_status\" onChange={(e) => { HandleChange(e, \"booking_status\") }} required/>\r\n                            {/* </Form.Item> */}\r\n                              {/* <Input type=\"text\" name=\"booking_status\" onChange={(e) => { HandleChange(e, \"booking_status\") }} placeholder=\"Enter booking_status ...\" style={{maxWidth : \"300px\"}}/> */}\r\n                          </Form.Item>\r\n                          </Col>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Select Movie Status:-\" name=\"movie_status\">\r\n                          <Switch name=\"movie_status\" onChange={(e) => { HandleChange(e, \"movie_status\") }} />\r\n                              {/* <Input type=\"text\" name=\"movie_status\" onChange={(e) => { HandleChange(e, \"movie_status\") }} placeholder=\"Enter movie_status ...\" style={{ maxWidth: \"300px\" }} /> */}\r\n                          </Form.Item>\r\n                          </Col>\r\n                      </Row>\r\n                        \r\n                           <Form.Item {...formTailLayout} label=\"\"> \r\n                                <Button type=\"primary\" onClick={(e) =>handleSubmit()} loading={props.loading}>Add Movie</Button>\r\n                          </Form.Item>                           \r\n                      </Form>\r\n              </Card>\r\n            </div>\r\n    </>\r\n  );\r\n}\r\nconst mapStateToProps =  (state) => ({\r\n  loading:state.movieReducer.loading,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addmoviedata: (postdata) => dispatch(addmoviedata(postdata))\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddMovie);\r\n","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\Movie_All_Form\\movieList.js",["583","584","585","586","587","588","589","590","591","592","593","594","595","596","597","598","599"],"import React,{useState,useEffect} from 'react';\r\n// import {Button,Card,Table,Modal,Form, Spinner }from 'react-bootstrap';\r\nimport {fetchmoviedata,updatemoviedata,singlemovieDataFetch,deletemoviedata} from '../../store/action/movieAction';\r\nimport {connect} from 'react-redux';\r\nimport '../state.css';\r\nimport { Table, Space, Button, Breadcrumb, Card, Form, Modal, Input, Row, Col,DatePicker,Switch,Select } from 'antd';\r\nimport moment from 'moment';\r\n\r\nconst {Option} = Select;\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 24,\r\n  },\r\n  wrapperCol: {\r\n    span: 12,\r\n  },\r\n};\r\nconst formTailLayout = {\r\n  labelCol: {\r\n    span: 4,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n    offset: 4,\r\n  },\r\n};\r\n\r\nconst MovieList = (props) => {\r\n  const {form} =Form.useForm();\r\n  const [obj,setMyObj1]= useState({\r\n    _id:\"\",\r\n    moviename:\"\",\r\n    releasedate:\"\",\r\n    movie_category:\"\",\r\n    movie_languages:\"\",\r\n    director_name:\"\",\r\n    Actors_name:\"\",\r\n    movie_description:\"\",\r\n    movie_type:\"\",\r\n    movie_logo:\"\",\r\n    movie_status:\"\",\r\n    booking_status:\"\"\r\n  })\r\n  \r\n  const [op,setOp] = useState(true);\r\n  const [ids,setIds] = useState(\"\");\r\n  const [show, setShow] = useState(false);\r\n  const [ushow, usetShow] = useState(false);\r\n  \r\n  const [error,setError] = useState({\r\n    movie_nameError:'',\r\n    IsValid:false,\r\n})\r\n  useEffect(()=>{    \r\n    props.fetchmoviedata();\r\n    if (props.singlemovie.moviename || props.singlemovie.movie_category || props.singlemovie.releasedate) {\r\n      console.log(props.singlemovie.moviename)\r\n      let olddata={...obj};\r\n      olddata.moviename = props.singlemovie.moviename;\r\n      olddata._id = props.singlemovie._id;\r\n      olddata.movie_category=props.singlemovie.movie_category;\r\n      olddata.releasedate=props.singlemovie.releasedate;\r\n      olddata.movie_languages = props.singlemovie.movie_languages;\r\n      olddata.director_name=props.singlemovie.director_name;\r\n      olddata.Actors_name=props.singlemovie.Actors_name;\r\n      olddata.movie_description=props.singlemovie.movie_description;\r\n      olddata.movie_type=props.singlemovie.movie_type;\r\n      olddata.movie_logo=props.singlemovie.movie_logo;\r\n      if(props.singlemovie.movie_status==\"true\"){\r\n        olddata.movie_status=true;\r\n      }else{\r\n        olddata.movie_status=false;        \r\n      }\r\n      if(props.singlemovie.booking_status==\"true\"){\r\n        olddata.booking_status=true;\r\n      }else{\r\n        olddata.booking_status=false;\r\n      }\r\n      setMyObj1(olddata);\r\n    }\r\n  },[props.fetchmoviedata,props.singlemovie])\r\n  \r\n  const deleteHandler = async (id) =>{\r\n      await props.deletemoviedata(id);\r\n      setShow(false);\r\n  }\r\n\r\nconst SingleSubmit = async () =>{\r\n  let errors = { ...error, IsValid : true };\r\n    if(!obj.moviename || obj.moviename === \"\")\r\n    {\r\n      console.log(errors.IsValid);\r\n      if(!obj.moviename || obj.moviename === \"\"){\r\n        errors.IsValid = false;\r\n        errors.movie_nameError = \"moviename Is Required \"\r\n      }\r\n\r\n    }else{\r\n        errors.movie_nameError = \"\"\r\n    }\r\n    setError(errors);\r\n    if(errors.IsValid==true){\r\n      // const values = await form.validateFields();\r\n      console.log(obj);\r\n          const formdata = new FormData();\r\n          formdata.append(\"moviename\",obj.moviename);\r\n          formdata.append(\"releasedate\",obj.releasedate);\r\n          formdata.append(\"movie_status\",obj.movie_status);\r\n          formdata.append(\"movie_category\",obj.movie_category);\r\n          formdata.append(\"movie_languages\",obj.movie_languages);\r\n          formdata.append(\"director_name\",obj.director_name);\r\n          formdata.append(\"Actors_name\",obj.Actors_name);\r\n          formdata.append(\"movie_description\",obj.movie_description);\r\n          formdata.append(\"movie_type\",obj.movie_type);\r\n          formdata.append(\"movie_logo\",obj.movie_logo);\r\n          formdata.append(\"booking_status\",obj.booking_status);\r\n        await props.updatemoviedata(obj._id,formdata);\r\n        // setOp(true);\r\n        usetShow(false);\r\n        obj._id=props.singlemovie._id;\r\n        obj.moviename=\"\";\r\n        props.history.replace(`/movie`);\r\n    }\r\n}\r\n\r\n\r\nconst handleClose = () => setShow(false);\r\nconst handleShow = (id) => {\r\n  let errors = { ...error, IsValid : true };\r\n  setError(errors);\r\n  // setOp(true);\r\n  setShow(true);\r\n  setIds(id);\r\n}\r\n\r\nconst SingleClose = () => {\r\n  let errors = { ...error, IsValid : true }; \r\n  errors.movie_nameError = \"\"\r\n  setError(errors);\r\n  // setOp(true);\r\n  obj.releasedate=\"\";\r\n  obj.booking_status=false;\r\n  obj.moviename=\"\";\r\n  props.singlemovie.moviename = \"\";\r\n  usetShow(false) \r\n};\r\n\r\n// if(props.singlemovie.moviename && !obj.moviename){\r\n//   // if(op!=false){\r\n//     setMyObj1(props.singlemovie)\r\n//   // }\r\n// }\r\nconst handleUpdate = async (_id) => {\r\n  await props.singlemovieDataFetch(_id); \r\n  usetShow(true);\r\n}\r\n const HandleChange = (e,name) =>{\r\n  let olddata = {...obj};\r\n  if (name == \"movie_logo\") {\r\n    console.log(name);\r\n    const { target: { files } } = e\r\n    olddata[name] = files.length === 1 ? files[0] : files\r\n    olddata[name] = e.target.files[0];\r\n  }else if(name == \"releasedate\"){\r\n    if(e!=null){\r\n      olddata[name] = new Date(e._d).toLocaleDateString();\r\n    }\r\n  }else if((name==\"booking_status\") || (name===\"movie_status\") || (name === \"movie_type\")  || (name === \"movie_category\") || (name === \"movie_languages\")){\r\n      olddata[name]=e;\r\n  }else\r\n  {\r\n    olddata[name] = e.target.value;\r\n  }\r\n  // console.log(olddata);\r\n  // setOp(false);\r\n  setMyObj1(olddata);\r\n  console.log(obj);\r\n}\r\nconst columns = [\r\n  {\r\n    title: () => <b>Index</b>,\r\n    key: 'Index',\r\n    fixed:\"left\",\r\n    render : (text, record, index) => index+1,\r\n  },{\r\n    title: () => <b>Movie Name</b>,\r\n    dataIndex: 'moviename',\r\n    key: 'moviename',\r\n    defaultSortOrder: 'descend',\r\n    fixed:\"left\",\r\n    sorter: (a, b) => a.moviename.length - b.moviename.length,\r\n  },{\r\n    title: () => <b>Release Date</b>,\r\n    dataIndex: 'releasedate',\r\n    key: 'releasedate',\r\n    defaultSortOrder: 'descend',\r\n    sorter: (a, b) => a.releasedate.length - b.releasedate.length,\r\n  },{\r\n    title: () => <b>Movie Description</b>,\r\n    dataIndex: 'movie_description',\r\n    key: 'movie_description',\r\n    defaultSortOrder: 'descend',\r\n    sorter: (a, b) => a.movie_description.length - b.movie_description.length,\r\n  },{\r\n    title: () => <b>Director Name</b>,\r\n    dataIndex: 'director_name',\r\n    key: 'director_name',\r\n    defaultSortOrder: 'descend',\r\n    sorter: (a, b) => a.director_name.length - b.director_name.length,\r\n  },{\r\n    title: () => <b>Actors Name</b>,\r\n    dataIndex: 'Actors_name',\r\n    key: 'Actors_name',\r\n    defaultSortOrder: 'descend',\r\n    // sorter: (a, b) => a.Actors_name.length - b.Actors_name.length,\r\n  },{\r\n    title: () => <b>Movie Category</b>,\r\n    dataIndex: 'movie_category',\r\n    key: 'movie_category',\r\n    defaultSortOrder: 'descend',\r\n    sorter: (a, b) => a.movie_category.length - b.movie_category.length,\r\n  },{\r\n    title: () => <b>Movie Languages</b>,\r\n    dataIndex: 'movie_languages',\r\n    key: 'movie_languages',\r\n    defaultSortOrder: 'descend',\r\n    sorter: (a, b) => a.movie_languages.length - b.movie_languages.length,\r\n  },{\r\n    title: () => <b>Movie Type</b>,\r\n    dataIndex: 'movie_type',\r\n    key: 'movie_type',\r\n    defaultSortOrder: 'descend',\r\n    // sorter: (a, b) => a.movie_type.length - b.movie_types.length,\r\n  },{\r\n    title: () => <b>Movie Status</b>,\r\n    render : (text, record, index) => <Switch name=\"movie_status\" checked={text.movie_status==\"true\"} style={{color:\"red\"}}/>,\r\n    key: 'movie_status',\r\n    defaultSortOrder: 'descend',\r\n    sorter: (a, b) => a.movie_status.length - b.movie_status.length,\r\n  },{\r\n    title: () => <b>Booking Status</b>,\r\n    render : (text, record, index) => text.booking_status==\"true\"?<div style={{color:\"Green\"}}>Available</div>:<div style={{color:\"Red\"}}>Not Available</div>,\r\n    key: 'booking_status',\r\n    defaultSortOrder: 'descend',\r\n    sorter: (a, b) => a.movie_status - b.movie_status,\r\n  },{\r\n    title: () => <b>Image</b>,\r\n    dataIndex: \"movie_logo\",\r\n    key: 'movie_logo',\r\n    defaultSortOrder: 'descend',\r\n    render:  (text,record) => <img src={\"http://localhost:3001\"+record.movie_logo} height=\"25px\" width=\"25px\" />\r\n    // sorter: (a, b) => a.movie_status - b.movie_status,\r\n  },{\r\n    title: () => <b>Update</b>,\r\n    key: 'Update',\r\n    fixed:\"right\",\r\n    render: (text, record) => (\r\n      <Space size=\"middle\">\r\n        <Button onClick={() => handleUpdate(record._id)} type=\"primary\">UPDATE</Button>\r\n      </Space>\r\n    ),\r\n  },{\r\n    title: () => <b>Delete</b>,\r\n    key: 'Delete',\r\n    fixed:\"right\",\r\n    render: (text, record) => (\r\n      <Space size=\"middle\">\r\n        <Button type=\"danger\" onClick={() => handleShow(record._id)} style={{backgroundColor:\"Red\",borderBlockColor:\"Black\",color:\"White\"}}>Delete</Button>\r\n      </Space>\r\n    ),\r\n  }\r\n];\r\n\r\n  return (\r\n    <>\r\n      <div className={\"Title\"} style={{ marginTop: \"-29px\"}}>\r\n        {/* City List */}\r\n          </div>\r\n      <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"29px\" }}>\r\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item>Movie</Breadcrumb.Item>\r\n        <Breadcrumb.Item>View Movie List</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <div className=\"site-card-border-less-wrapper\">\r\n        <Card title=\"View Movie List\" bordered={true} style={{ width: \"auto\",border:\"5px\" }}>\r\n          <Table columns={columns} dataSource={props.movies} pagination={{ pageSize: 4 }} scroll={{ x: 1300 }}/>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Update Record */}\r\n      <Modal title=\"Update State\"\r\n        visible={ushow}\r\n        onOk={() => SingleSubmit()}\r\n        onCancel={() => SingleClose()}>\r\n       <Form>\r\n                      <Row gutter={0}>\r\n                          <Col span={12} >\r\n                              <Input type=\"hidden\" name=\"_id\" value={obj._id} onChange={(e) => { HandleChange(e, \"_id\") }}/>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Name:-\" \r\n                                      hasFeedback\r\n                                      validateStatus={(error.movie_nameError)?\"error\":\"success\"}\r\n                                      help={error.movie_nameError}\r\n                                      style={{width: \"400px\"}}>\r\n                              <Input type=\"text\" name=\"moviename\" value={obj.moviename} onChange={(e) => { HandleChange(e, \"moviename\") }} placeholder=\"Enter moviename ...\" style={{maxWidth : \"300px\", width:\"100%\"}}/>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Category:-\" rules={[{ required: true, message: 'Please required movie category!' }]} style={{width: \"400px\"}}>\r\n                                  <Select name=\"movie_category\" value={obj.movie_category} onChange={(e)=>HandleChange(e,\"movie_category\")} placeholder=\"------ Select Movie Category-----\" allowClear style={{maxWidth : \"300px\"}}>\r\n                                      <Option value=\"A\" key={\"A\"}>A</Option>\r\n                                      <Option value=\"B\" key={\"B\"}>B</Option>\r\n                                      <Option value=\"C\" key={\"C\"}>C</Option>\r\n                                      <Option value=\"D\" key={\"D\"}>D</Option>\r\n                                  </Select>\r\n                              {/* <Input type=\"text\" name=\"movie_category\" value={obj.movie_category} onChange={(e) => { HandleChange(e, \"movie_category\") }} placeholder=\"Enter movie_category ...\" style={{maxWidth : \"300px\", width:\"100%\"}}/> */}\r\n                          </Form.Item>\r\n                      </Col>\r\n                    </Row>\r\n                      <Row gutter={0}>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Release Date:-\" rules={[{ required: true, message: 'Please required Releasedate!' }]} style={{width: \"400px\"}}>\r\n                              <DatePicker name=\"releasedate\" onChange={(e) => { HandleChange(e, \"releasedate\") }} value={moment(obj.releasedate,\"MM/DD/ YYYY\")} />\r\n                          </Form.Item>\r\n                      </Col>\r\n                        <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Director Name:-\" rules={[{ required: true, message: 'Please required director name!' }]} style={{width: \"400px\"}}>\r\n                              <Input type=\"text\" name=\"director_name\" value={obj.director_name} onChange={(e) => { HandleChange(e, \"director_name\") }} placeholder=\"Enter director_name ...\" style={{maxWidth : \"300px\"}}/>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      </Row>\r\n                      <Row gutter={0}>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Actors Name:-\" rules={[{ required: true, message: 'Please required actors name!' }]} style={{width: \"400px\"}}>\r\n                              <Input type=\"text\" name=\"Actors_name\" value={obj.Actors_name} onChange={(e) => { HandleChange(e, \"Actors_name\") }} placeholder=\"Enter Actors ...\" style={{maxWidth : \"300px\"}}/>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Description:-\" rules={[{ required: true, message: 'Please required movie description!' }]} style={{width: \"400px\"}}>\r\n                              <Input type=\"text\" name=\"movie_description\" value={obj.movie_description} onChange={(e) => { HandleChange(e, \"movie_description\") }} placeholder=\"Enter movie_description ...\" style={{maxWidth : \"300px\"}}/>\r\n                          </Form.Item>\r\n                          </Col>\r\n                      </Row>\r\n                      <Row gutter={0}>\r\n                        <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Type:-\" rules={[{ required: true, message: 'Please required movie type!' }]} style={{width: \"400px\"}}>\r\n                          <Select name=\"movie_type\" value={obj.movie_type} onChange={(e)=>HandleChange(e,\"movie_type\")} placeholder=\"------ Select Movie Type-----\" allowClear style={{maxWidth : \"300px\"}}>\r\n                                      <Option value=\"Action\" key={\"Action\"}>Action</Option>\r\n                                      <Option value=\"Comedy\" key={\"Comedy\"}>Comedy</Option>\r\n                                      <Option value=\"Drama\" key={\"Drama\"}>Drama</Option>\r\n                                      <Option value=\"Fantasy\" key={\"Fantasy\"}>Fantasy</Option>\r\n                                      <Option value=\"Horror\" key={\"Horror\"}>Horror</Option>\r\n                                      <Option value=\"Mystery\" key={\"Mystery\"}>Mystery</Option>\r\n                                      <Option value=\"Romance\" key={\"Romance\"}>Romance</Option>\r\n                                      <Option value=\"Thriller\" key={\"Thriller\"}>Thriller</Option>\r\n                                      <Option value=\"Western\" key={\"Western\"}>Western</Option>\r\n                                      <Option value=\"Crime Film\" key={\"Crime Film\"}>Crime Film</Option>\r\n                                      <Option value=\"Romantic Comedy\" key={\"Romantic Comedy\"}>Romantic Comedy</Option>\r\n                                      <Option value=\"Documentary\" key={\"Documentary\"}>Documentary</Option>\r\n                                  </Select>\r\n                              {/* <Input type=\"text\" name=\"movie_type\" value={obj.movie_type} onChange={(e) => { HandleChange(e, \"movie_type\") }} placeholder=\"Enter movie_type...\" style={{maxWidth : \"300px\"}}/> */}\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Choice Movie Logo:-\" style={{width: \"400px\"}}>\r\n                              <Input type=\"file\" name=\"movie_logo\"  onChange={(e)=>{HandleChange(e,\"movie_logo\")}} placeholder=\"Enter movie_logo ...\" style={{maxWidth : \"100px\"}}>\r\n                              </Input>\r\n                          </Form.Item>\r\n                                <img src={\"http://localhost:3001\"+obj.movie_logo} height=\"25px\" width=\"25px\" />\r\n                          \r\n                      </Col>\r\n                      </Row>\r\n                      <Row gutter={0}>\r\n                        <Col span={12}>\r\n                        <Form.Item {...formItemLayout} label=\"Movie Languages:-\" rules={[{ required: true, message: 'Please required movie Languages !' }]}>\r\n                                  <Select name=\"movie_languages\" value={obj.movie_languages} onChange={(e)=>HandleChange(e,\"movie_languages\")} placeholder=\"------ Select Movie Languages Type-----\" allowClear style={{maxWidth : \"300px\"}}>\r\n                                      <Option value=\"English\" key={\"English\"}>English</Option>\r\n                                      <Option value=\"Hindi\" key={\"Hindi\"}>Hindi</Option>\r\n                                      <Option value=\"Tamil\" key={\"Tamil\"}>Tamil</Option>\r\n                                      <Option value=\"Gujarati\" key={\"Gujarati\"}>Gujarati</Option>\r\n                                      <Option value=\"Telugu\" key={\"Telugu\"}>Telugu</Option>\r\n                                      <Option value=\"Bengali\" key={\"Bengali\"}>Bengali</Option>\r\n                                      <Option value=\"Marathi\" key={\"Marathi\"}>Marathi</Option>\r\n                                      <Option value=\"Telugu\" key={\"Telugu\"}>Telugu</Option>\r\n                                      <Option value=\"Bhojpuri\" key={\"Bhojpuri\"}>Bhojpuri</Option>\r\n                                  </Select>\r\n                          </Form.Item>\r\n                          \r\n                      </Col>\r\n                      </Row>\r\n                      \r\n                      <Row gutter={0}>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Status:-\">\r\n                          <Switch name=\"movie_status\" checked={Boolean(obj.movie_status)==true} onChange={(e) => { HandleChange(e, \"movie_status\") }}  style={{ maxWidth: \"300px\" }}/>\r\n                              {/* <Input type=\"text\" name=\"movie_status\" value={obj.movie_status} onChange={(e) => { HandleChange(e, \"movie_status\") }} placeholder=\"Enter movie_status ...\" style={{ maxWidth: \"300px\" }} /> */}\r\n                          </Form.Item>\r\n                          </Col>\r\n                      <Col span={12}>\r\n                          <Form.Item {...formItemLayout} label=\"Enter Booking Status:-\">\r\n                            <Switch name=\"booking_status\" checked={Boolean(obj.booking_status)==true} onChange={(e) => { HandleChange(e, \"booking_status\") }}  style={{ maxWidth: \"300px\" }}>\r\n                                \r\n                            </Switch>\r\n                              {/* <Input type=\"text\" name=\"booking_status\" value={obj.booking_status} onChange={(e) => { HandleChange(e, \"booking_status\") }} placeholder=\"Enter booking_status ...\" style={{maxWidth : \"300px\"}}/> */}\r\n                          </Form.Item>\r\n                          </Col>\r\n                      </Row>                          \r\n                      </Form>\r\n      </Modal>\r\n\r\n      {/* Delete Record  */}\r\n      <Modal title=\"Are you sure!\"\r\n        visible={show}\r\n        onOk={() => deleteHandler(ids)}\r\n        onCancel={() => handleClose()}>\r\n        Do you want to delete this state?\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps =  (state) => ({\r\n  err:state.movieReducer.error,\r\n  Loading:state.movieReducer.loading,\r\n  movies:state.movieReducer.movies,\r\n  singlemovie:state.movieReducer.singlemovie,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n  return{\r\n    fetchmoviedata:()=>dispatch(fetchmoviedata()),\r\n    deletemoviedata:(_id)=>dispatch(deletemoviedata(_id)),\r\n    updatemoviedata:(postdata,put) => dispatch(updatemoviedata(postdata,put)),\r\n    singlemovieDataFetch:(id)=>dispatch(singlemovieDataFetch(id))\r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(MovieList);","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\Users_Theater_List\\allUsersList.js",["600","601","602","603","604"],"import React,{useEffect,useState} from 'react';\r\nimport {getAllUser,fetchProfile,updateProfile} from '../../store/action/userAction';\r\nimport {connect} from 'react-redux';\r\nimport '../state.css';\r\nimport { Table, Breadcrumb, Card,Space,Button,Modal } from 'antd';\r\nconst AllUsersList = (props) => {\r\n  \r\n  const [show, setShow] = useState(false);\r\n  const [ids, setIds] = useState(false);  \r\n  useEffect(()=>{  \r\n      props.getAllUser();\r\n    },[props.getAllUser,props.singleuser1])\r\n\r\n  const [obj,setMyObj] = useState({\r\n    user_name:\"\",\r\n    password:\"\",\r\n    email:\"\",\r\n    gender:\"Male\",\r\n    photo1:\"\",\r\n    state_id:\"\",\r\n    city_id:\"\",\r\n    group_id:\"\",\r\n    is_active:\"\"\r\n  });\r\n  if(ids==true){\r\n        setIds(false);\r\n  }\r\n\r\n  if (obj.user_name!=\"\"){\r\n  }\r\n  const deleteHandler = async (id) => {\r\n    if(props.singleuser1.user_name){\r\n        let olddata={...obj};\r\n        olddata._id=props.singleuser1._id;\r\n        olddata.user_name = props.singleuser1.user_name;\r\n        olddata.password = props.singleuser1.password;\r\n        olddata.email = props.singleuser1.email;\r\n        olddata.gender = props.singleuser1.gender;\r\n        olddata.state_id = props.singleuser1.state_id;\r\n        olddata.photo1 = props.singleuser1.photo1;\r\n        olddata.city_id = props.singleuser1.city_id;\r\n        olddata.group_id = props.singleuser1.group_id;\r\n            if(props.singleuser1.is_active==\"1\"){ \r\n              olddata.is_active = \"0\";\r\n            }else{\r\n              olddata.is_active = \"1\";\r\n            }\r\n            setMyObj(olddata);\r\n            console.log(olddata);\r\n            props.updateProfile(olddata._id,olddata);\r\n    }\r\n    setShow(false);\r\n  }\r\n\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = async (id) => {\r\n    await props.fetchProfile(id);\r\n    setShow(true);\r\n    setIds(id);\r\n  }\r\n\r\nconst columns = [\r\n  {\r\n    title: () => <b>Index</b>,\r\n    key: 'Index',\r\n    fixed:\"left\",\r\n    render : (text, record, index) => index+1,\r\n  },{\r\n    title: () => <b>User Name</b>,\r\n    dataIndex: 'user_name',\r\n    key: 'user_name',\r\n    defaultSortOrder: 'descend',\r\n    fixed:\"left\",\r\n    sorter: (a, b) => a.user_name.length - b.user_name.length,\r\n  },{\r\n    title: () => <b>Email</b>,\r\n    dataIndex: 'email',\r\n    key: 'email',\r\n    defaultSortOrder: 'descend',\r\n    sorter: (a, b) => a.email.length - b.email.length,\r\n  },{\r\n    title: () => <b>Gender</b>,\r\n    dataIndex: 'gender',\r\n    key: 'gender',\r\n    defaultSortOrder: 'descend',\r\n    sorter: (a, b) => a.gender.length - b.gender.length,\r\n  },{\r\n      title: () => <b>City Name</b>,\r\n      key: 'city_id',\r\n      defaultSortOrder: 'descend',\r\n      render: s => s.city_id.city_name,\r\n      sorter: (a, b) => a.city_id.city_name.length - b.city_id.city_name.length,\r\n},{\r\n    title: () => <b>State Name</b>,\r\n    key: 'state_id',\r\n    defaultSortOrder: 'descend',\r\n    render: s => s.state_id.state_name,\r\n    sorter: (a, b) => a.state_id.state_name.length - b.state_id.state_name.length,\r\n  },{\r\n    title: () => <b>Status</b>,\r\n    key: 'is_active',\r\n    defaultSortOrder: 'descend',\r\n    // render: ,\r\n    render: (text, record) => (\r\n      <Space size=\"middle\">\r\n        {record.is_active==\"1\"?<Button type='danger' onClick={() => handleShow(record._id)} style={{ backgroundColor: '#005f00', borderBlockColor: 'Black', color: 'White' }}>Active</Button>:<Button type='danger' onClick={() => handleShow(record._id)} style={{ backgroundColor: '#820000', borderBlockColor: 'Black', color: 'White' }}>Block</Button>}\r\n        {/* <Button type=\"danger\" onClick={() => handleShow(record._id)} style={{ backgroundColor: \"Green\", borderBlockColor: \"Black\", color: \"White\" }}>{record.is_active==\"1\"?\"Active\":\"Block\"}</Button> */}\r\n      </Space>\r\n    ),\r\n  }\r\n];\r\n\r\n  return (\r\n    <>\r\n      <div className={\"Title\"} style={{ marginTop: \"-29px\"}}>\r\n          </div>\r\n      <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"29px\",fontFamily:\"auto\",textTransform:\"uppercase\"  }}>\r\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item>All User</Breadcrumb.Item>\r\n        <Breadcrumb.Item>View Users List</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <div className=\"site-card-border-less-wrapper\">\r\n        <Card title=\"View Users List\" bordered={true} style={{ width: \"auto\",border:\"5px\" }}>\r\n          <Table columns={columns} dataSource={props.users} pagination={{ pageSize: 4 }} />\r\n        </Card>\r\n      </div>\r\n\r\n      <Modal title=\"Are you sure!\"\r\n        visible={show}\r\n        onOk={() => deleteHandler(ids)}\r\n        onCancel={() => handleClose()}>\r\n        Do you want to change this state?\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps =  (state) => ({\r\n  err:state.movieReducer.error,\r\n  users:state.userReducer.users,\r\n  singleuser1:state.userReducer.singleuser1\r\n})\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n  return{\r\n    updateProfile:(_id,put)=>dispatch(updateProfile(_id,put)),\r\n    fetchProfile:(_id)=>dispatch(fetchProfile(_id)),\r\n    getAllUser:()=>dispatch(getAllUser())\r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(AllUsersList);","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\components\\Users_Theater_List\\allTheaterList.js",["605","606","607","608"],"import React,{useEffect,useState} from 'react';\r\nimport {getAllTheater,fetchProfile,updateProfile} from '../../store/action/userAction';\r\nimport {connect} from 'react-redux';\r\nimport '../state.css';\r\nimport { Table, Breadcrumb, Card,Space,Button,Modal } from 'antd';\r\nconst AllUsersList = (props) => {\r\n  \r\n  const [show, setShow] = useState(false);\r\n  const [ids, setIds] = useState(false);  \r\n  useEffect(()=>{  \r\n      props.getAllTheater();\r\n    },[props.getAllTheater,props.singleuser1])\r\n\r\n  const [obj,setMyObj] = useState({\r\n    user_name:\"\",\r\n    password:\"\",\r\n    email:\"\",\r\n    gender:\"Male\",\r\n    photo1:\"\",\r\n    state_id:\"\",\r\n    city_id:\"\",\r\n    group_id:\"\",\r\n    is_active:\"\"\r\n  });\r\n  if(ids==true){\r\n        setIds(false);\r\n  }\r\n\r\n  const deleteHandler = async (id) => {\r\n    if(props.singleuser1.user_name){\r\n        let olddata={...obj};\r\n        olddata._id=props.singleuser1._id;\r\n        olddata.user_name = props.singleuser1.user_name;\r\n        olddata.cinema_name = props.singleuser1.cinema_name;\r\n        olddata.password = props.singleuser1.password;\r\n        olddata.email = props.singleuser1.email;\r\n        olddata.gender = props.singleuser1.gender;\r\n        olddata.state_id = props.singleuser1.state_id;\r\n        olddata.photo1 = props.singleuser1.photo1;\r\n        olddata.city_id = props.singleuser1.city_id;\r\n        olddata.group_id = props.singleuser1.group_id;\r\n            if(props.singleuser1.is_active==\"1\"){ \r\n              olddata.is_active = \"0\";\r\n            }else{\r\n              olddata.is_active = \"1\";\r\n            }\r\n            setMyObj(olddata);\r\n            console.log(olddata);\r\n            props.updateProfile(olddata._id,olddata);\r\n    }\r\n    setShow(false);\r\n  }\r\n\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = async (id) => {\r\n    await props.fetchProfile(id);\r\n    setShow(true);\r\n    setIds(id);\r\n  }\r\n\r\nconst columns = [\r\n  {\r\n    title: () => <b>Index</b>,\r\n    key: 'Index',\r\n    fixed:\"left\",\r\n    render : (text, record, index) => index+1,\r\n  },{\r\n    title: () => <b>Cinema Name</b>,\r\n    dataIndex: 'cinema_name',\r\n    key: 'cinema_name',\r\n    defaultSortOrder: 'descend',\r\n  },{\r\n    title: () => <b>User Name</b>,\r\n    dataIndex: 'user_name',\r\n    key: 'user_name',\r\n    defaultSortOrder: 'descend',\r\n    fixed:\"left\",\r\n    sorter: (a, b) => a.user_name.length - b.user_name.length,\r\n  },{\r\n    title: () => <b>Email</b>,\r\n    dataIndex: 'email',\r\n    key: 'email',\r\n    defaultSortOrder: 'descend',\r\n    sorter: (a, b) => a.email.length - b.email.length,\r\n  },{\r\n    title: () => <b>Gender</b>,\r\n    dataIndex: 'gender',\r\n    key: 'gender',\r\n    defaultSortOrder: 'descend',\r\n    sorter: (a, b) => a.gender.length - b.gender.length,\r\n  },{\r\n      title: () => <b>City Name</b>,\r\n      key: 'city_id',\r\n      defaultSortOrder: 'descend',\r\n      render: s => s.city_id.city_name,\r\n      sorter: (a, b) => a.city_id.city_name.length - b.city_id.city_name.length,\r\n},{\r\n    title: () => <b>State Name</b>,\r\n    key: 'state_id',\r\n    defaultSortOrder: 'descend',\r\n    render: s => s.state_id.state_name,\r\n    sorter: (a, b) => a.state_id.state_name.length - b.state_id.state_name.length,\r\n  },{\r\n    title: () => <b>Status</b>,\r\n    key: 'is_active',\r\n    defaultSortOrder: 'descend',\r\n    // render: ,\r\n    render: (text, record) => (\r\n      <Space size=\"middle\">\r\n        {record.is_active==\"1\"?<Button type='danger' onClick={() => handleShow(record._id)} style={{ backgroundColor: '#005f00', borderBlockColor: 'Black', color: 'White' }}>Active</Button>:<Button type='danger' onClick={() => handleShow(record._id)} style={{ backgroundColor: '#820000', borderBlockColor: 'Black', color: 'White' }}>Block</Button>}\r\n      </Space>\r\n    ),\r\n  }\r\n];\r\n\r\n  return (\r\n    <>\r\n      <div className={\"Title\"} style={{ marginTop: \"-29px\"}}>\r\n          </div>\r\n      <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"29px\",fontFamily:\"auto\",textTransform:\"uppercase\"  }}>\r\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item>All Theater</Breadcrumb.Item>\r\n        <Breadcrumb.Item>View Theaters List</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <div className=\"site-card-border-less-wrapper\">\r\n        <Card title=\"View Theaters List\" bordered={true} style={{ width: \"auto\",border:\"5px\" }}>\r\n          <Table columns={columns} dataSource={props.users} pagination={{ pageSize: 4 }} />\r\n        </Card>\r\n      </div>\r\n\r\n      <Modal title=\"Are you sure!\"\r\n        visible={show}\r\n        onOk={() => deleteHandler(ids)}\r\n        onCancel={() => handleClose()}>\r\n        Do you want to change this state?\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps =  (state) => ({\r\n  err:state.movieReducer.error,\r\n  users:state.userReducer.users,\r\n  singleuser1:state.userReducer.singleuser1\r\n})\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n  return{\r\n    updateProfile:(_id,put)=>dispatch(updateProfile(_id,put)),\r\n    fetchProfile:(_id)=>dispatch(fetchProfile(_id)),\r\n    getAllTheater:()=>dispatch(getAllTheater())\r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(AllUsersList);","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\action\\stateAction.js",[],"D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\action\\cityAction.js",[],"D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\action\\screenAction.js",["609"],"import axios from \"axios\";\r\nimport * as actionTypes from \"../screenActionType\";\r\n\r\nexport const getscreen = () => {\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.INIT_FETCH_SCREEN\r\n        })\r\n        try {\r\n            let verifytoken = localStorage.getItem(\"Token\");\r\n            let response = await axios.get(\"http://localhost:3001/getscreen\", {\r\n                headers: { 'Authorization': verifytoken }\r\n            })\r\n            console.log(response.data);\r\n            dispatch({\r\n                type: actionTypes.FETCH_SCREEN_SUCCESS,\r\n                screens: response.data\r\n            })\r\n        } catch (error) {\r\n            console.log(error.response.data.message);\r\n            dispatch({\r\n                type: actionTypes.FETCH_SCREEN_FAILED,\r\n                error: error.response.data.message\r\n            });\r\n            throw new Error();\r\n        }\r\n    }\r\n}\r\n\r\nexport const addscreen = (postdata) => {\r\n    console.log(postdata);\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.INIT_ADD_SCREEN\r\n        })\r\n        try {\r\n            let response = await axios.post(\"http://localhost:3001/addscreen\", postdata)\r\n            dispatch({\r\n                type: actionTypes.ADD_SCREEN_SUCCESS,\r\n                screens: response.data\r\n            })\r\n        } catch (error) {\r\n            console.log(error.response.data.message);\r\n            dispatch({\r\n                type: actionTypes.ADD_SCREEN_FAILED,\r\n                error: error.response.data.message\r\n            });\r\n            throw new Error();\r\n        }\r\n    }\r\n}\r\n\r\nexport const deletescreen = (id) => {\r\n    console.log(id);\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.INIT_DELETE_SCREEN\r\n        })\r\n        try {\r\n            let response = await axios.delete(`http://localhost:3001/deletescreen/${id}`)\r\n            dispatch({\r\n                type: actionTypes.DELETE_SCREEN_SUCCESS,\r\n                id: id\r\n            })\r\n        } catch (error) {\r\n            console.log(error.response.data.message);\r\n            dispatch({\r\n                type: actionTypes.DELETE_SCREEN_FAILED,\r\n                error: error.response.data.message\r\n            });\r\n            throw new Error();\r\n        }\r\n    }\r\n}\r\n\r\nexport const singlescreenrecord = (id) => {\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.INIT_SINGLE_SCREEN\r\n        })\r\n        try {\r\n            let response = await axios.get(`http://localhost:3001/singlescreen/${id}`)\r\n            dispatch({\r\n                type: actionTypes.SINGLE_SCREEN_SUCCESS,\r\n                singlescreen: response.data\r\n            })\r\n        } catch (error) {\r\n            console.log(error.response.data.message);\r\n            dispatch({\r\n                type: actionTypes.SINGLE_SCREEN_FAILED,\r\n                error: error.response.data.message\r\n            });\r\n            throw new Error();\r\n        }\r\n    }\r\n}\r\n\r\nexport const updatescreen = (id, put) => {\r\n    console.log(put);\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.INIT_UPDATE_SCREEN\r\n        })\r\n        try {\r\n            let response = await axios.put(`http://localhost:3001/updatescreen/${id}`, put)\r\n            dispatch({\r\n                type: actionTypes.UPDATE_SCREEN_SUCCESS,\r\n                screens: response.data\r\n            })\r\n        } catch (error) {\r\n            console.log(error.response.data.message);\r\n            dispatch({\r\n                type: actionTypes.UPDATE_SCREEN_FAILED,\r\n                error: error.response.data.message\r\n            });\r\n            throw new Error();\r\n        }\r\n    }\r\n} ","D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\action\\movieAction.js",[],"D:\\Sem-9_Project_Movie\\Movie-6\\ui\\src\\store\\action\\theaterscreenAction.js",["610"],"D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\index.js",[],["611","612"],"D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\App.js",[],"D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\reportWebVitals.js",[],"D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\reducer\\stateReducer.js",["613"],"import * as actionTypes from \"../actionTypes\";\nconst initalstore ={\n    states:[],\n    singlestate:{},\n    loading:false,\n    error:\"\",\n}\n\nconst store = (state = initalstore,action) =>{\n    switch(action.type){\n        case actionTypes.INIT_FETCH_STATES:\n            return{\n                ...state,\n                loading:true,\n            }\n        case actionTypes.FETCH_STATES_SUCCESS:\n            return{\n                ...state,\n                loading:false,\n                states:action.states\n            }\n\n        case actionTypes.FETCH_STATES_FAILED:\n            return{\n                ...state,\n                loading:false,\n                error:action.error,\n            }\n        case actionTypes.INIT_ADD_STATES:\n                    return{\n                        ...state,\n                        loading:true,\n                    };\n        case actionTypes.ADD_STATES_SUCCESS:\n\n                return{\n                    ...state,\n                    loading:false                  \n                }\n        case actionTypes.ADD_STATES_FAILED:\n                return{\n                    ...state,\n                    loading:false,\n                    error:action.error\n                }\n        case actionTypes.INIT_DELETE_STATES:\n                    return{\n                        ...state,\n                        loading:true,\n    \n                    };\n        case actionTypes.DELETE_STATES_SUCCESS:\n                let statees = state.states.filter(statese => statese._id !== action.id);\n                // let studentst = state.states.filter(student => student._id !== action.id);\n                return{\n                    ...state,\n                    loading:false,   \n                    states:statees,\n                }\n        case actionTypes.DELETE_STATES_FAILED:\n                return{\n                    ...state,\n                    loading:false,\n                    error:action.error\n                }\n        case actionTypes.INIT_SINGLE_STATES:\n                    return{\n                        ...state,\n                        loading:true,    \n                    };\n        case actionTypes.SINGLE_STATES_SUCCESS:\n            console.log(action.singlestate)\n                return{\n                    ...state,\n                    loading:false, \n                    singlestate:action.singlestate             \n                }\n        case actionTypes.SINGLE_STATES_FAILED:\n                return{\n                    ...state,\n                    loading:false,\n                    error:action.error\n                }\n        case actionTypes.INIT_UPDATE_STATES:\n                    return{\n                        ...state,\n                        loading:true,\n                    };\n        case actionTypes.UPDATE_STATES_SUCCESS:\n            let statesst = [...state.states];\n            statesst.map(order => {\n                if(order._id === action.states._id)\n                {\n                    order.state_name = action.states.state_name                    \n                }\n            });\n            // console.log(action.singlestates);\n                return{\n                    ...state,\n                    loading:false, \n                    states:statesst             \n                }\n        case actionTypes.UPDATE_STATES_FAILED:\n                return{\n                    ...state,\n                    loading:false,\n                    error:action.error\n                }\n            default :\n                return state;\n    }\n}\n\nexport default store;","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\reducer\\cityReducer.js",["614"],"import * as actionTypes from \"../cityActionTypes\";\nconst initalstore ={\n    cities:[],\n    singlecities:{},\n    loading:false,\n    error:\"\",\n}\n\nconst store = (state = initalstore,action) =>{\n    switch(action.type){\n        case actionTypes.INIT_FETCH_CITIES:\n            return{\n                ...state,\n                loading:true,\n            }\n        case actionTypes.FETCH_CITIES_SUCCESS:\n            return{\n                ...state,\n                loading:false,\n                cities:action.cities\n            }\n\n        case actionTypes.FETCH_CITIES_FAILED:\n            return{\n                ...state,\n                loading:false,\n                error:action.error,\n            }\n        case actionTypes.INIT_ADD_CITIES:\n                    return{\n                        ...state,\n                        loading:true,\n                    };\n        case actionTypes.ADD_CITIES_SUCCESS:\n\n                return{\n                    ...state,\n                    loading:false                  \n                }\n        case actionTypes.ADD_CITIES_FAILED:\n                return{\n                    ...state,\n                    loading:false,\n                    error:action.error\n                }\n        case actionTypes.INIT_DELETE_CITIES:\n                    return{\n                        ...state,\n                        loading:true,\n    \n                    };\n        case actionTypes.DELETE_CITIES_SUCCESS:\n                let citiest = state.cities.filter(statese => statese._id !== action.id);\n                // let studentst = state.states.filter(student => student._id !== action.id);\n                return{\n                    ...state,\n                    loading:false,   \n                    cities:citiest,\n                }\n        case actionTypes.DELETE_CITIES_FAILED:\n                return{\n                    ...state,\n                    loading:false,\n                    error:action.error\n                }\n        case actionTypes.INIT_SINGLE_CITIES:\n                    return{\n                        ...state,\n                        loading:true,    \n                    };\n        case actionTypes.SINGLE_CITIES_SUCCESS:\n            // console.log(ac)\n                return{\n                    ...state,\n                    loading:false, \n                    singlecities:action.singlecities             \n                }\n        case actionTypes.SINGLE_CITIES_FAILED:\n                return{\n                    ...state,\n                    loading:false,\n                    error:action.error\n                }\n        case actionTypes.INIT_UPDATE_CITIES:\n                    return{\n                        ...state,\n                        loading:true,\n                    };\n        case actionTypes.UPDATE_CITIES_SUCCESS:\n                let statesst = [...state.cities];\n                statesst.map(order => {\n                    if(order._id === action.cities._id)\n                    {\n                        order.city_name = action.cities.city_name\n                        order.state_id = action.cities.state_id;\n                    }\n                });  \n                // console.log(action.cities.state_id);          \n                return{\n                    ...state,\n                    loading:false, \n                    cities:statesst\n                }\n        case actionTypes.UPDATE_CITIES_FAILED:\n                return{\n                    ...state,\n                    loading:false,\n                    error:action.error\n                }\n        case actionTypes.INIT_FETCHSTATESBYCITYID_CITIES:\n            return{\n                ...state,\n                loading:true,\n            }\n        case actionTypes.FETCHSTATESBYCITYID_CITIES_SUCCESS:\n            return{\n                ...state,\n                loading:false,\n                cities:action.cities\n            }\n        case actionTypes.FETCHSTATESBYCITYID_CITIES_FAILED:\n            return{\n                ...state,\n                loading:false,\n                error:action.error,\n            }\n            default :\n                return state;\n    }\n}\n\nexport default store;","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\reducer\\screenReducer.js",["615"],"import * as actionTypes from \"../screenActionType\";\nconst initalstore = {\n    screens: [],\n    singlescreen: {},\n    loading: false,\n    error: \"\",\n}\n\nconst store = (state = initalstore, action) => {\n    switch (action.type) {\n        case actionTypes.INIT_FETCH_SCREEN:\n            return {\n                ...state,\n                loading: true,\n            }\n        case actionTypes.FETCH_SCREEN_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                screens: action.screens\n            }\n\n        case actionTypes.FETCH_SCREEN_FAILED:\n            return {\n                ...state,\n                loading: false,\n                error: action.error,\n            }\n        case actionTypes.INIT_ADD_SCREEN:\n            return {\n                ...state,\n                loading: true,\n            };\n        case actionTypes.ADD_SCREEN_SUCCESS:\n            return {\n                ...state,\n                loading: false\n            }\n        case actionTypes.ADD_SCREEN_FAILED:\n            return {\n                ...state,\n                loading: false,\n                error: action.error\n            }\n        case actionTypes.INIT_DELETE_SCREEN:\n            return {\n                ...state,\n                loading: true,\n\n            };\n        case actionTypes.DELETE_SCREEN_SUCCESS:\n            let screensTemp = state.screens.filter(screen => screen._id !== action.id);\n            return {\n                ...state,\n                loading: false,\n                screens: screensTemp,\n            }\n        case actionTypes.DELETE_SCREEN_FAILED:\n            return {\n                ...state,\n                loading: false,\n                error: action.error\n            }\n        case actionTypes.INIT_SINGLE_SCREEN:\n            return {\n                ...state,\n                loading: true,\n            };\n        case actionTypes.SINGLE_SCREEN_SUCCESS:\n            console.log(action.singlescreen)\n            return {\n                ...state,\n                loading: false,\n                singlescreen: action.singlescreen\n            }\n        case actionTypes.SINGLE_SCREEN_FAILED:\n            return {\n                ...state,\n                loading: false,\n                error: action.error\n            }\n        case actionTypes.INIT_UPDATE_SCREEN:\n            return {\n                ...state,\n                loading: true,\n            };\n        case actionTypes.UPDATE_SCREEN_SUCCESS:\n            console.log(action.screens);\n            let screensTemp1 = [...state.screens];\n            screensTemp1.map(order => {\n                if (order._id === action.screens._id) {\n                        order.screen_name = action.screens.screen_name;\n                        order.rows = action.screens.rows;\n                        order.cols = action.screens.cols;\n                }\n            });\n            return {\n                ...state,\n                loading: false,\n                screens: screensTemp1\n            }\n        case actionTypes.UPDATE_SCREEN_FAILED:\n            return {\n                ...state,\n                loading: false,\n                error: action.error\n            }\n        default:\n            return state;\n    }\n}\n\nexport default store;","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\reducer\\theaterscreenReducer.js",["616"],"import * as actionTypes from '../theaterscreenActionType';\nconst initialstore = {\n    tscreens:[],\n    singletscreen:{},\n    loading:false,\n    error:\"\"\n}\n\nconst store = (state=initialstore,action)=>{\n    switch(action.type)\n    {\n        case actionTypes.INIT_FETCH_THEATER_SCREEN:\n            return{\n                ...state,\n                loading:true\n            }\n        case actionTypes.FETCH_SCREEN_THEATER_SUCCESS:\n            console.log(action.theaterscreens);\n            return{\n                ...state,\n                loading:false,\n                tscreens:action.theaterscreens\n            }\n        case actionTypes.FETCH_SCREEN_THEATER_FAILED:\n            return{\n                ...state,\n                loading:false,\n                error:action.error\n            }\n        case actionTypes.INIT_ADD_THEATER_SCREEN:\n            return{\n                ...state,\n                loading:true\n            }\n        case actionTypes.ADD_SCREEN_THEATER_SUCCESS:\n            return{\n                ...state,\n                loading:false                  \n            }\n        case actionTypes.ADD_SCREEN_THEATER_FAILED:\n            return{\n                ...state,\n                loading:false,\n                error:action.error\n            }\n        \n        case actionTypes.INIT_DELETE_THEATER_SCREEN:\n            return{\n                ...state,\n                loading:true\n            }\n        case actionTypes.DELETE_SCREEN_THEATER_SUCCESS:\n            let tscreeens = state.tscreens.filter(tscren => tscren._id !== action.id);\n            return{\n                ...state,\n                loading:false,           \n                tscreens:tscreeens    \n            }\n        case actionTypes.DELETE_SCREEN_THEATER_FAILED:\n            return{\n                ...state,\n                loading:false,\n                error:action.error\n            }\n        case actionTypes.INIT_SINGLE_THEATER_SCREEN:\n                return {\n                    ...state,\n                    loading: true,\n                };\n        case actionTypes.SINGLE_SCREEN_THEATER_SUCCESS:\n                console.log(action.singletscreen)\n                return {\n                    ...state,\n                    loading: false,\n                    singletscreen: action.singletscreen\n                }\n        case actionTypes.SINGLE_SCREEN_THEATERFAILED:\n                return {\n                    ...state,\n                    loading: false,\n                    error: action.error\n                }\n        case actionTypes.INIT_UPDATE_THEATER_SCREEN:\n                    return {\n                        ...state,\n                        loading: true,\n                    };\n        case actionTypes.UPDATE_SCREEN_THEATER_SUCCESS:\n                    console.log(action.tscreens);\n                    let tscreensTemp1 = [...state.tscreens];\n                    tscreensTemp1.map(order => {\n                        if (order._id === action.tscreens._id) {\n                                order.user_id = action.tscreens.user_id;\n                                order.movie_id = action.tscreens.movie_id;\n                                order.screen_id = action.tscreens.screen_id;\n                                order.start_date = action.tscreens.start_date;\n                                order.end_date = action.tscreens.end_date;\n                                order.screen_time = action.tscreens.screen_time;\n                                order.end_time = action.tscreens.end_time;\n                        }\n                    });\n                    return {\n                        ...state,\n                        loading: false,\n                        tscreens: tscreensTemp1\n                    }\n        case actionTypes.UPDATE_SCREEN_THEATER_FAILED:\n                    return {\n                        ...state,\n                        loading: false,\n                        error: action.error\n                    }\n     \n        default:\n            return state;\n    }\n}\n\nexport default store;","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\reducer\\movieReducer.js",["617"],"import * as actionTypes from \"../movieActionTypes\";\nconst initalstore ={\n    movies:[],\n    singlemovie:{},\n    loading:false,\n    error:\"\",\n}\n\nconst store = (state = initalstore,action) =>{\n    switch(action.type){\n        case actionTypes.INIT_FETCH_MOVIES:\n            return{\n                ...state,\n                loading:true,\n            }\n        case actionTypes.FETCH_MOVIES_SUCCESS:\n            return{\n                ...state,\n                loading:false,\n                movies:action.movies\n            }\n\n        case actionTypes.FETCH_MOVIES_FAILED:\n            return{\n                ...state,\n                loading:false,\n                error:action.error,\n            }\n        case actionTypes.INIT_ADD_MOVIES:\n                    return{\n                        ...state,\n                        loading:true,\n                    };\n        case actionTypes.ADD_MOVIES_SUCCESS:\n                return{\n                    ...state,\n                    loading:false                  \n                }\n        case actionTypes.ADD_MOVIES_FAILED:\n                return{\n                    ...state,\n                    loading:false,\n                    error:action.error\n                }\n        case actionTypes.INIT_DELETE_MOVIES:\n                    return{\n                        ...state,\n                        loading:true,\n    \n                    };\n        case actionTypes.DELETE_MOVIES_SUCCESS:\n                let moviessd= state.movies.filter(movies1 => movies1._id !== action.id);\n                return{\n                    ...state,\n                    loading:false,   \n                    movies:moviessd,\n                }\n        case actionTypes.DELETE_MOVIES_FAILED:\n                return{\n                    ...state,\n                    loading:false,\n                    error:action.error\n                }\n        case actionTypes.INIT_SINGLE_MOVIES:\n                    return{\n                        ...state,\n                        loading:true,    \n                    };\n        case actionTypes.SINGLE_MOVIES_SUCCESS:\n            console.log(action.singlemovie)\n                return{\n                    ...state,\n                    loading:false, \n                    singlemovie:action.singlemovie             \n                }\n        case actionTypes.SINGLE_MOVIES_FAILED:\n                return{\n                    ...state,\n                    loading:false,\n                    error:action.error\n                }\n        case actionTypes.INIT_UPDATE_MOVIES:\n                    return{\n                        ...state,\n                        loading:true,\n                    };\n        case actionTypes.UPDATE_MOVIES_SUCCESS:\n            let statesst = [...state.movies];\n            statesst.map(order => {\n                if(order._id === action.movies._id)\n                {\n                    order.moviename = action.movies.moviename;\n                    order.movie_category=action.movies.movie_category;\n                    order.releasedate=action.movies.releasedate;\n                    order.director_name=action.movies.director_name;\n                    order.Actors_name=action.movies.Actors_name; \n                    order.movie_languages =action.movies.movie_languages;\n                    order.movie_description=action.movies.movie_description;\n                    order.movie_type=action.movies.movie_type;\n                    order.movie_logo=action.movies.movie_logo;\n                    order.movie_status=action.movies.movie_status;\n                    order.booking_status=action.movies.booking_status;                   \n                }\n            });\n            console.log(action.singlestates);\n                return{\n                    ...state,\n                    loading:false, \n                    movies:statesst             \n                }\n        case actionTypes.UPDATE_MOVIES_FAILED:\n                return{\n                    ...state,\n                    loading:false,\n                    error:action.error\n                }\n            default :\n                return state;\n    }\n}\n\nexport default store;","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\reducer\\userReducer.js",[],"D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\registerTask.js",["618","619","620","621"],"import React,{useEffect} from 'react';\nimport { Switch, Route,Redirect } from 'react-router'\nimport RegisterForm from './components/All Registration form/userRegistration';\nimport LoginForm from './components/All Registration form/loginForm';\nimport {login,autoCheckLogin} from './store/action/userAction';\nimport TheaterRegistration from './components/All Registration form/theaterRegistration';\nimport Temp from './components/All Registration form/Temp';\nimport TheaterTask from './TheaterTask';\nimport StateTask from './stateTask';\nimport {connect} from 'react-redux';\n\nconst RegisterTask = (props) => {\n\n    useEffect(() => {\n        if(props.location.pathname.startsWith(\"/\") && !props.token) {\n            props.autoCheckLogin();\n            // props.singleuser\n            console.log(props.singleuser)\n        }\n    }, [props.location.pathname,props.autoCheckLogin,props.token])\n    let content = <Redirect to=\"/\" />\n    if(props.location.pathname.startsWith(\"/\") && !props.token) {\n        console.log(\"Login In \" + false + \" token \" + props.token);\n        content = <Switch>\n            <Route path=\"/login\" exact component={LoginForm}/>\n            <Route path=\"/userreg\" exact component={RegisterForm}/>\n            <Route path=\"/theaterreg\" exact component={TheaterRegistration}/>\n            <Redirect to=\"/login\" />\n        </Switch>\n    } else if(props.location.pathname.startsWith(\"/\") && props.token && props.singleuser.group_id.group_name==\"admin\") {\n        content = <>\n            <div >\n            <Switch>\n                \n                <Route path=\"/city\" component={StateTask}/>\n                <Route path=\"/city/cityAdd\" exact component={StateTask}/>\n                \n                <Route path=\"/state/stateAdd\" exact component={StateTask}/>\n                <Route path=\"/state\" exact component={StateTask}/>\n\n                <Route path=\"/movie\" exact component={StateTask} />\n                <Route path=\"/movie/movieAdd\" exact component={StateTask} />\n                \n                <Route path=\"/users/\" exact component={StateTask} />\n                <Route path=\"/review/\" exact component={StateTask} />\n                <Route path=\"/theaters/\" exact component={StateTask} />\n                <Route path=\"/dashboard\" exact component={StateTask} />\n\n                <Redirect to=\"/dashboard\" />\n            </Switch>\n            </div>\n        </>    \n    }else if(props.location.pathname.startsWith(\"/\") && props.token && props.singleuser.group_id.group_name==\"user\"){\n        content = <>\n        <div >\n        <Switch>\n            <Route path=\"/Temp\" exact component={Temp} />\n            {/* <Route path=\"/Temp\" exact component={Temp} /> */}\n\n            <Redirect to=\"/Temp\" />\n         </Switch>\n        </div> \n    </>\n     }else if(props.location.pathname.startsWith(\"/\") && props.token && props.singleuser.group_id.group_name==\"theater\"){\n            content = <>\n            <div > \n             <Switch>\n                \n                <Route path=\"/theater/dashboard\" exact component={TheaterTask} />\n                <Route path=\"/theater/addScreen\" exact component={TheaterTask} />\n                <Route path=\"/theater/screenList\" exact component={TheaterTask} />\n                <Route path=\"/theater/addtscreen\" exact component={TheaterTask} />\n                <Route path=\"/theater/tscreenList\" exact component={TheaterTask} />\n                <Route path=\"/theater/bookingdetail\" exact component={TheaterTask} />\n                <Redirect to=\"/theater/dashboard\" />\n            </Switch>\n             </div>\n        </>\n    }\n    return content\n}\n\nconst mapStateToProps =  (state) => ({\n    err1:state.userReducer.error1,\n    singleuser:state.userReducer.singleuser,\n    token:state.userReducer.token ? true : false\n  })\n\nconst mapDispatchToProps = dispatch =>{\n  return{\n    autoCheckLogin:()=>dispatch(autoCheckLogin()),\n    login:(email,password)=>dispatch(login(email,password))\n  }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(RegisterTask);","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\actionTypes.js",[],"D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\screenActionType.js",[],"D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\cityActionTypes.js",[],"D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\theaterscreenActionType.js",[],"D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\movieActionTypes.js",[],"D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\userActionTypes.js",[],"D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\TheaterTask.js",[],"D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\stateTask.js",[],"D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\action\\userAction.js",[],"D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\All Registration form\\loginForm.js",["622","623","624"],"import React,{useState,useEffect} from 'react';\nimport  \"./../css/login.css\";\nimport {connect} from 'react-redux';\nimport {login} from '../../store/action/userAction';\nimport {Form,Button,Input} from \"antd\";\nimport Logo from '../../Movie_logo/Admin3.jpg'\n\nconst NewComponent = (props) => {\n  const [form] = Form.useForm();\n  useEffect(()=>{\n    if(props.token===true){\n      props.history.replace(\"/city\");\n    }\n  },[props.token])\n  const [obj,setMyObj] = useState({\n    email:\"\",\n    password:\"\",\n  });\n  const [error,setError]=useState(false);\n  const handleSubmit = async () =>{\n    await props.login(obj.email,obj.password);\n    if(props.token!==true && obj.email && obj.password){\n     setError(true);\n    }\n  }\n\n    const signUp = () =>{\n        props.history.replace(\"/userreg\");\n    }\n\n    const HandleChange = (e,name) =>{\n      let olddata = {...obj};\n        olddata[name] = e.target.value;\n      setMyObj(olddata)\n    }\n      return (  \n        <Form className=\"login\" style={{marginLeft: \"500px\",marginTop:\"90px\",borderBottomLeftRadius: \"50px\",\n        borderBottomRightRadius: \"50px\",\n        borderTopLeftRadius: \"50px\",\n        borderTopRightRadius: \"50px\"}} form={form}\n        name=\"register\">\n          <header style={{marginTop:\"35px\",color:'#0ec78b'}}><img src={Logo} style={{height: \"60px\",width: \"60px\",marginLeft:\"05px\",borderBottomLeftRadius: \"43px\",borderBottomRightRadius: \"43px\",borderTopLeftRadius: \"43px\",borderTopRightRadius: \"43px\"}}/> Movie Login</header>\n          <div className=\"field\">\n              <span className=\"fa fa-user\" />\n              <Form.Item\n                  name=\"email\"\n                  style={{marginLeft:\"45px\",width:\"280px\"}}\n                  rules={[\n                    {\n                      type: 'email',\n                      message: 'The input is not valid E-mail!',\n                    },\n                    {\n                      required: true,\n                      message: 'Please input your E-mail!',\n                    },\n                  ]}\n                ><Input placeholder=\"Enter Your email\" style={{height:\"55px\"}} onChange={(e) => {HandleChange(e,\"email\")}}/></Form.Item>\n          </div>\n          <div className=\"field\">\n              <span className=\"fa fa-lock\" />\n              <Form.Item\n                  style={{width:\"280px\",marginTop: \"20px\",marginLeft: \"46px\"}}\n                  name=\"password\"\n                  rules={[\n                    {\n                      required: true,\n                      message: 'Please input your password!',\n                    },\n                  ]}\n                  hasFeedback\n                >\n                  <Input.Password  placeholder=\"*************\" onChange={(e) => {HandleChange(e,\"password\")}}/>\n                </Form.Item>\n          </div>\n          {(error)?<h4 style={{color:\"red\"}}>You are Not Unable to Login !!</h4>:\"\"}\n          <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\" onClick={() =>handleSubmit()}>Login</Button>\n            </Form.Item>\n          <div className=\"forgot-password\" style={{textAlign:\"center\"}}><a href=\"/\">Forgot password?</a></div>\n          <span className=\"logn-form-copy\">Don't have an account? <a onClick={()=>{signUp()}} className=\"login-form__sign-up\" style={{color:\"#0074d9\"}}>Sign Up</a></span>\n        </Form>\n    );\n  }\n  \n  const mapStateToProps =  (state) => ({\n    err1:state.userReducer.error1,\n    singleuser:state.userReducer.singleuser,\n    token:state.userReducer.token ? true : false\n\n  })\n\nconst mapDispatchToProps = dispatch =>{\n  return{\n    login:(email,password)=>dispatch(login(email,password))\n  }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(NewComponent);","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\All Registration form\\Temp.js",["625","626","627","628","629"],"import React, { Component, useEffect } from \"react\";\nimport {connect} from 'react-redux';\nimport {fetchDashboradRecord} from '../../store/action/userAction';\nimport {  Row, Col,Card, CardGroup,CardDeck } from \"react-bootstrap\";\n// import {MDBIcon} from 'react/jsx'\nimport { SiApachesolr,SiAtAndT,SiAdobecreativecloud,SiCoffeescript } from \"react-icons/si\";\n\nconst Dashboard = (props) => {\n\n  // render: function() {\n    return (\n      <>\n      <div >\n      <CardDeck style={{    display: \"flex\"}}>\n    <Card border=\"Primary\" style={{ width: '18rem',backgroundColor:\"#1e9ee8\",color:\"White\",padding:\"20px\",\n    marginLeft: \"20px\" }} >\n      <Card.Header>Total State</Card.Header>\n      <Card.Body>\n        <Card.Title></Card.Title>\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}></Card.Text>\n        <SiCoffeescript style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>\n      </Card.Body>\n    </Card>\n    <Card border=\"Success\" style={{ width: '18rem',backgroundColor:\"#b9ad16\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\n      <Card.Header>Total City</Card.Header>\n      <Card.Body>\n        <Card.Title></Card.Title>\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}></Card.Text>\n        <SiAtAndT style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>  \n      </Card.Body>\n    </Card>\n    <Card border=\"Success\" style={{ width: '18rem',backgroundColor:\"#25b125\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\n      <Card.Header>Total Movies</Card.Header>\n      <Card.Body>\n        <Card.Title></Card.Title>\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}></Card.Text>\n        <SiApachesolr style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>        \n      </Card.Body>\n    </Card>\n    <Card bg=\"danger\" style={{ width: '18rem',backgroundColor:\"#f52e2e\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\n      <Card.Header>Total Theater</Card.Header>\n      <Card.Body>\n        <Card.Title></Card.Title>\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}></Card.Text>\n        <SiAdobecreativecloud style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>  \n      </Card.Body>\n    </Card>\n    </CardDeck>\n    </div>\n     </>\n    );\n}\n\n\nconst mapDispatchToProps = dispatch =>{\n  return{\n    fetchDashboradRecord:()=>dispatch(fetchDashboradRecord())\n  }\n}\nexport default connect(null,mapDispatchToProps)(Dashboard);","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\All Registration form\\userRegistration.js",["630","631","632","633","634","635","636","637","638","639","640","641","642","643","644","645","646","647","648","649","650","651","652","653","654"],"import React, { useState,useEffect } from \"react\";\nimport {Form,Col,Button} from \"react-bootstrap\";\nimport {connect} from 'react-redux';\nimport {adduserdata,fetchusersdata} from '../../store/action/userAction';\nimport {fetchstatedata} from '../../store/action/stateAction';\nimport {fetchAllStatesBystate_id} from '../../store/action/cityAction';\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBCard, MDBInput } from 'mdbreact';\nimport '../register.css';\n\nconst FormPage = (props) => {\n  useEffect(()=>{\n    props.fetchstatedata();\n  },[props.fetchstatedata])\n\n  const [obj,setMyObj] = useState({\n    user_name:\"\",\n    password:\"\",\n    email:\"\",\n    gender:\"Male\",\n    photo1:\"\",\n    state_id:\"\",\n    city_id:\"\",\n    group_id:\"\",\n    is_active:\"\"\n  });\n  \n  const [error,setError]=useState({\n    user_name_nameError:\"\",\n    password_nameError:\"\",\n    gender_nameError:\"\",\n    email_nameError:\"\",\n    state_nameError:\"\",\n    city_nameError:\"\",\n    isValid:false\n  });\n\n  const handleSubmit =async () =>{\n    let errors = { ...error,isValid: true };\n    obj.group_id=\"5fcc4220e862ea35384c7c8e\";\n    obj.is_active=\"1\";\n    // obj.photo1=\"sds\";\n    errors.state_nameError=\"\";\n    errors.city_nameError=\"\";\n    errors.user_name_nameError=\"\";\n    errors.password_nameError=\"\";\n    errors.email_nameError=\"\";\n    errors.isValid=false;\n    if(obj.state_id == \"\" || obj.city_id == \"\" || obj.user_name == \"\" || obj.password == \"\" || obj.email == \"\" || obj.email != \"\"){\n      if(obj.state_id == \"\"){\n        errors.state_nameError=\"Please atleast one select state !!\"\n        errors.isValid=true;\n      }\n      if(obj.city_id == \"\"){\n        errors.city_nameError=\"Please atleast one select city !!\"\n        errors.isValid=true;\n      }\n      if(obj.user_name == \"\"){\n        errors.user_name_nameError=\"Please reuired username !!\"\n        errors.isValid=true;\n      }\n      if(obj.password == \"\"){\n        errors.password_nameError=\"Please required password !!\"\n        errors.isValid=true;\n      }\n      if(obj.email == \"\"){\n        errors.email_nameError=\"Please required email !!\"\n        errors.isValid=true;\n      }\n      if(obj.email != \"\"){\n        var pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\n        if (!pattern.test(obj.email)) {\n          errors.isValid = true;\n          errors.email_nameError = \"Please enter valid email address.\";\n        }\n      }\n    }else{\n      errors.state_nameError=\"\";\n      errors.city_nameError=\"\";\n      errors.user_name_nameError=\"\";\n      errors.password_nameError=\"\";\n      errors.email_nameError=\"\";\n      errors.isValid=false;\n    }\n    if(errors.isValid==false){\n      const formdata = new FormData();\n      console.log(obj);\n      formdata.append(\"user_name\",obj.user_name);\n      formdata.append(\"password\",obj.password);\n      formdata.append(\"email\",obj.email);\n      formdata.append(\"gender\",obj.gender);\n      formdata.append(\"photo1\",obj.photo1);\n      formdata.append(\"state_id\",obj.state_id);\n      formdata.append(\"city_id\",obj.city_id);\n      formdata.append(\"group_id\",obj.group_id);\n      formdata.append(\"is_active\",obj.is_active);\n      console.log(obj.photo1);\n      await props.adduserdata(formdata);\n      props.history.replace(\"/\");\n    }\n    setError(errors);\n  }\n  const HandleChange = (e,name) =>{\n    let olddata = {...obj};\n    if (name == \"photo1\") {\n      const { target: { files } } = e\n      olddata[name] = files.length === 1 ? files[0] : files\n      olddata[name] = e.target.files[0];\n    }\n    else\n    {\n      olddata[name] = e.target.value;\n    }\n    setMyObj(olddata)\n    cityCall(olddata.state_id);\n  }\n\n  const cityCall =async (id) =>{\n    await props.fetchAllStatesBystate_id(id);\n    // console.log(props.cities);\n  }\n\n  const optionStates = () => {\n    return props.states.map((stateslist) => {\n    const { _id, state_name } = stateslist;\n      return (\n          <option value={_id} key={_id}>{state_name}</option>\n      )\n    })\n  }\n\n  const optioncities = () => {\n    return props.cities.map((stateslist) => {\n    const { _id, city_name } = stateslist;\n      return (\n          <option value={_id} key={_id}>{city_name}</option>\n      )\n    })\n  }\n\n  const backHandler = () => {\n    props.history.replace(\"/theaterreg\")\n  }\n\n  const loginHandler = () =>{\n    props.history.replace(\"/\")\n  }\n\n    return (\n      <div>\n        <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\" rel=\"stylesheet\" id=\"bootstrap-css\" />\n        {/*---- Include the above in your HEAD tag --------*/}\n        <div className=\"container register\" style={{marginTop: \"2px\"}}>\n          <div className=\"row\">\n            <div className=\"col-md-3 register-left\">\n              <img src=\"https://image.ibb.co/n7oTvU/logo_white.png\" alt=\"\" />\n              <h3>Welcome</h3>\n              <p>You are 30 seconds away farom earning your own money!</p>\n              <input type=\"submit\" name defaultValue=\"Login\" disabled/><br />\n            </div>\n            <div className=\"col-md-9 register-right\">\n              <ul className=\"nav nav-tabs nav-justified\" id=\"myTab\" role=\"tablist\">\n                <li className=\"nav-item\">\n                  <a className=\"nav-link active\" id=\"home-tab\" data-toggle=\"tab\" role=\"tab\" aria-controls=\"home\" aria-selected=\"true\">User</a>\n                </li>\n                <li className=\"nav-item\">\n                  <a className=\"nav-link\" variant=\"secondary\" onClick={() => backHandler()}  id=\"profile-tab\" data-toggle=\"tab\" role=\"tab\" aria-controls=\"profile\" aria-selected=\"false\">Theater</a>\n                </li>\n              </ul>\n              <div className=\"tab-content\" id=\"myTabContent\">\n                <div className=\"tab-pane fade show active\" id=\"home\" role=\"tabpanel\" aria-labelledby=\"home-tab\">\n                  <h3 className=\"register-heading\">Apply as a User</h3>\n                  <div className=\"row register-form\">\n                  <Form style={{marginLeft: \"100px\"}}>\n                  <Form.Row>\n                      <Form.Group  as={Col} controlId=\"formGridEmail\">\n                        <Form.Label>Enter Username:-</Form.Label>\n                        <Form.Control type=\"text\" isInvalid={error.user_name_nameError}  placeholder=\"Enter Username ...\" name=\"user_name\" onChange={(e) => {HandleChange(e,\"user_name\")}} style={{width:\"290px\"}}/>\n                        <Form.Control.Feedback type=\"invalid\">\n                            {error.user_name_nameError}\n                          </Form.Control.Feedback>\n                      </Form.Group>\n                      <Form.Group as={Col} controlId=\"formGridEmail2\">\n                      <Form.Label style={{marginLeft: \"28px\"}}>Enter Password:-</Form.Label>\n                      <Form.Control type=\"password\" isInvalid={error.password_nameError} placeholder=\"Enter Password ...\" name=\"password\" onChange={(e) => {HandleChange(e,\"password\")}}  style={{marginLeft: \"28px\",width:\"250px\"}}/>\n                      <Form.Control.Feedback type=\"invalid\" style={{marginLeft: \"28px\"}}>\n                            {error.password_nameError}\n                        </Form.Control.Feedback>\n                        </Form.Group>\n                  </Form.Row>\n                  <Form.Row>\n                      <Form.Group  as={Col} controlId=\"formGridEmail\">\n                        <Form.Label>Enter Email:-</Form.Label>\n                        <Form.Control type=\"email\" isInvalid={error.email_nameError} className=\"form-control\" name=\"email\" onChange={(e) => {HandleChange(e,\"email\")}} onBlur={() => cityCall()} placeholder=\"Enter email ...\"   style={{width:\"290px\"}}/>\n                        <Form.Control.Feedback type=\"invalid\">\n                            {error.email_nameError}\n                        </Form.Control.Feedback>\n                      </Form.Group>\n                      <Form.Group as={Col} controlId=\"formGridEmail\">\n                        <Form.Label style={{marginLeft: \"28px\"}}>Select Gender:-</Form.Label>\n                        <Form.Check type=\"radio\" name=\"gender\" value=\"male\" label=\"Male\" style={{marginLeft: \"28px\"}} onChange={(e) => {HandleChange(e,\"gender\")}} checked/>\n                        <Form.Check type=\"radio\" name=\"gender\" value=\"female\" label=\"Female\" style={{marginLeft: \"28px\"}} onChange={(e) => {HandleChange(e,\"gender\")}}/>\n                      </Form.Group>\n                  </Form.Row>\n                      \n                  <Form.Row>\n                      <Form.Group>\n                          <Form.Label>Select State:-</Form.Label>\n                          <Form.Control isInvalid={error.state_nameError} className=\"form-control\" as=\"select\" name=\"state_id\" onChange={(e) => {HandleChange(e,\"state_id\")}}  style={{width:\"290px\"}} >\n                            <option selected disabled>-----Select -----</option>\n                              {optionStates()}\n                          </Form.Control>\n                          <Form.Control.Feedback type=\"invalid\">\n                            {error.state_nameError}\n                          </Form.Control.Feedback>\n                      </Form.Group> \n                      <Form.Group>\n                          <Form.Label style={{marginLeft: \"50px\"}}>Select city:-</Form.Label>\n                          <Form.Control isInvalid={error.city_nameError} className=\"form-control\" as=\"select\" name=\"city_id\" onChange={(e) => {HandleChange(e,\"city_id\")}} style={{marginLeft: \"50px\",width:\"250px\"}} >\n                              <option selected disabled>-----Select -----</option>\n                              {optioncities()}\n                          </Form.Control>\n                          <Form.Control.Feedback type=\"invalid\" style={{marginLeft: \"28px\"}}>\n                            {error.city_nameError}\n                          </Form.Control.Feedback>\n                      </Form.Group> \n                  </Form.Row>\n                  <Form.Row>\n                      <Form.Group>\n                          <Form.Label>Select User photo:-</Form.Label>\n                          {/* <Form.File id=\"exampleFormControlFile1\" />   */}\n                          <Form.Control type=\"file\" name=\"photo1\" onChange={(e) => {HandleChange(e,\"photo1\")}} style={{maxWidth : \"300px\"}}/>\n                      </Form.Group> \n                      <Form.Group as={Col} controlId=\"formGridEmail2\">\n                          {/* <input type=\"submit\" /> */}\n                          <Button className=\"btnRegister\" defaultValue=\"Register\" style={{marginLeft: \"28px\"}} onClick={handleSubmit}>Submit</Button>\n                      </Form.Group>\n                  </Form.Row>\n                  </Form>\n                  <span className=\"logn-form-copy\" style={{ marginLeft: \"262px\",marginTop: \"26px\"}}>Already have an account? <a onClick={()=>{loginHandler()}} className=\"login-form__sign-up\" style={{color:\"#0074d9\"}}>Sign in</a></span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  const mapStateToProps =  (state) => ({\n      err:state.stateReducer.error,\n      // err:state.userReducer.error1,\n      states:state.stateReducer.states,\n      cities:state.cityReducer.cities,\n    })\n  \n  const mapDispatchToProps = dispatch =>{\n    return{\n      fetchstatedata:()=>dispatch(fetchstatedata()),\n      // fetchcitiesdata:()=>dispatch(fetchcitiesdata()),\n      fetchAllStatesBystate_id:(_id)=>dispatch(fetchAllStatesBystate_id(_id)),\n      adduserdata: (postdata) => dispatch(adduserdata(postdata))\n    }\n  }\n  export default connect(mapStateToProps,mapDispatchToProps)(FormPage);\n  ","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\All Registration form\\theaterRegistration.js",["655","656","657","658","659","660","661","662","663","664","665","666","667","668","669","670","671","672","673","674"],"import React, { useState,useEffect } from \"react\";\nimport {Form,Col,Button} from \"react-bootstrap\";\nimport {connect} from 'react-redux';\nimport {adduserdata} from '../../store/action/userAction';\nimport {fetchstatedata} from '../../store/action/stateAction';\nimport {fetchAllStatesBystate_id} from '../../store/action/cityAction';\nimport '../register.css';\n\nconst FormPage = (props) => {\n  useEffect(()=>{\n    props.fetchstatedata();\n  },[props.fetchstatedata])\n\n  const [obj,setMyObj] = useState({\n    user_name:\"\",\n    cinema_name:\"\",\n    password:\"\",\n    email:\"\",\n    gender:\"Male\",\n    photo1:\"\",\n    state_id:\"\",\n    city_id:\"\",\n    group_id:\"\",\n    is_active:\"\"\n  });\n  \n  const [error,setError]=useState({\n    user_name_nameError:\"\",\n    cinema_nameError:\"\",\n    password_nameError:\"\",\n    gender_nameError:\"\",\n    email_nameError:\"\",\n    state_nameError:\"\",\n    city_nameError:\"\",\n    isValid:false\n  });\n\n  const handleSubmit =async () =>{\n    let errors = { ...error,isValid: true };\n    obj.group_id=\"5fcc4230e862ea35384c7c8f\";\n    obj.is_active=\"1\";\n    // obj.photo1=\"sds\";\n    errors.state_nameError=\"\";\n    errors.city_nameError=\"\";\n    errors.user_name_nameError=\"\";\n    errors.cinema_nameError=\"\";\n    errors.password_nameError=\"\";\n    errors.email_nameError=\"\";\n    errors.isValid=false;\n    if(obj.state_id == \"\" || obj.city_id == \"\" || obj.user_name == \"\" || obj.password == \"\" || obj.email == \"\" || obj.email != \"\" || obj.cinema_name!=\"\"){\n      if(obj.state_id == \"\"){\n        errors.state_nameError=\"Please atleast one select state !!\"\n        errors.isValid=true;\n      }\n      if(obj.city_id == \"\"){\n        errors.city_nameError=\"Please atleast one select city !!\"\n        errors.isValid=true;\n      }\n      if(obj.user_name == \"\"){\n        errors.user_name_nameError=\"Please reuired username !!\"\n        errors.isValid=true;\n      }\n      if(obj.password == \"\"){\n        errors.password_nameError=\"Please required password !!\"\n        errors.isValid=true;\n      }\n      if(obj.email == \"\"){\n        errors.email_nameError=\"Please required email !!\"\n        errors.isValid=true;\n      }\n      if(obj.cinema_name == \"\"){\n        errors.cinema_nameError=\"Please required cinema name !!\"\n        errors.isValid=true;\n      }\n      if(obj.email != \"\"){\n        var pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\n        if (!pattern.test(obj.email)) {\n          errors.isValid = true;\n          errors.email_nameError = \"Please enter valid email address.\";\n        }\n      }\n    }else{\n      errors.state_nameError=\"\";\n      errors.city_nameError=\"\";\n      errors.user_name_nameError=\"\";\n      errors.cinema_nameError=\"\";\n      errors.password_nameError=\"\";\n      errors.email_nameError=\"\";\n      errors.isValid=false;\n    }\n    if(errors.isValid==false){\n      const formdata = new FormData();\n      console.log(obj);\n      formdata.append(\"user_name\",obj.user_name);\n      formdata.append(\"cinema_name\",obj.cinema_name);\n      formdata.append(\"password\",obj.password);\n      formdata.append(\"email\",obj.email);\n      formdata.append(\"gender\",obj.gender);\n      formdata.append(\"photo1\",obj.photo1);\n      formdata.append(\"state_id\",obj.state_id);\n      formdata.append(\"city_id\",obj.city_id);\n      formdata.append(\"group_id\",obj.group_id);\n      formdata.append(\"is_active\",obj.is_active);\n      console.log(obj.photo1);\n      await props.adduserdata(formdata);\n      props.history.replace(\"/\");\n    }\n    setError(errors);\n  }\n  const HandleChange = (e,name) =>{\n    let olddata = {...obj};\n    if (name == \"photo1\") {\n      const { target: { files } } = e\n      olddata[name] = files.length === 1 ? files[0] : files\n      olddata[name] = e.target.files[0];\n    }\n    else\n    {\n      olddata[name] = e.target.value;\n    }\n    setMyObj(olddata)\n    cityCall(olddata.state_id);\n  }\n\n  const cityCall =async (id) =>{\n    await props.fetchAllStatesBystate_id(id);\n  }\n\n  const optionStates = () => {\n    return props.states.map((stateslist) => {\n    const { _id, state_name } = stateslist;\n      return (\n          <option value={_id} key={_id}>{state_name}</option>\n      )\n    })\n  }\n\n  const optioncities = () => {\n    return props.cities.map((stateslist) => {\n    const { _id, city_name } = stateslist;\n      return (\n          <option value={_id} key={_id}>{city_name}</option>\n      )\n    })\n  }\n\n  const backHandler = () => {\n    props.history.replace(\"/userreg\")\n  }\n\n  const loginHandler = () =>{\n    props.history.replace(\"/\")\n  }\n\n    return (\n              <div>\n        <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\" rel=\"stylesheet\" id=\"bootstrap-css\" />\n        {/*---- Include the above in your HEAD tag --------*/}\n        <div className=\"container register\" style={{marginTop: \"2px\" }}>\n          <div className=\"row\">\n            <div className=\"col-md-3 register-left\">\n              <img src=\"https://image.ibb.co/n7oTvU/logo_white.png\" alt=\"\" />\n              <h3>Welcome</h3>\n              <p>You are 30 seconds away farom earning your own money!</p>\n              <input type=\"submit\" name defaultValue=\"Login\" disabled/><br />\n            </div>\n            <div className=\"col-md-9 register-right\">\n              <ul className=\"nav nav-tabs nav-justified\" id=\"myTab\" role=\"tablist\">\n                <li className=\"nav-item\">\n                  <a className=\"nav-link \" variant=\"secondary\" onClick={() => backHandler()} id=\"home-tab\" data-toggle=\"tab\" role=\"tab\" aria-controls=\"home\" aria-selected=\"false\">User</a>\n                </li>\n                <li className=\"nav-item\">\n                  <a className=\"nav-link active\" id=\"profile-tab\" data-toggle=\"tab\" role=\"tab\" aria-controls=\"profile\" aria-selected=\"true\">Theater</a>\n                </li>\n              </ul>\n              <div className=\"tab-content\" id=\"myTabContent\">\n                <div className=\"tab-pane fade show active\" id=\"home\" role=\"tabpanel\" aria-labelledby=\"home-tab\">\n                  <h3 className=\"register-heading\">Apply as a Theater</h3>\n                  <div className=\"row register-form\">\n                  <Form style={{marginLeft: \"100px\"}}>\n                  <Form.Row>\n                      <Form.Group  as={Col} controlId=\"formGridEmail\">\n                        <Form.Label>Enter Username:-</Form.Label>\n                        <Form.Control type=\"text\" isInvalid={error.user_name_nameError}  placeholder=\"Enter Username ...\" name=\"user_name\" onChange={(e) => {HandleChange(e,\"user_name\")}} style={{width:\"290px\"}}/>\n                        <Form.Control.Feedback type=\"invalid\">\n                            {error.user_name_nameError}\n                          </Form.Control.Feedback>\n                      </Form.Group>\n                      <Form.Group as={Col} controlId=\"formGridEmail2\">\n                      <Form.Label style={{marginLeft: \"28px\"}}>Enter Cinema name:-</Form.Label>\n                      <Form.Control type=\"text\" isInvalid={error.cinema_nameError} placeholder=\"Enter cinema name ...\" name=\"cinema_name\" onChange={(e) => {HandleChange(e,\"cinema_name\")}}  style={{marginLeft: \"28px\",width:\"250px\"}}/>\n                      <Form.Control.Feedback type=\"invalid\" style={{marginLeft: \"28px\"}}>\n                            {error.cinema_nameError}\n                        </Form.Control.Feedback>\n                        </Form.Group>\n                  </Form.Row>\n                  <Form.Row>\n                      <Form.Group as={Col} controlId=\"formGridEmail2\">\n                      <Form.Label style={{marginLeft: \"28px\"}}>Enter Password:-</Form.Label>\n                      <Form.Control type=\"password\" isInvalid={error.password_nameError} placeholder=\"Enter Password ...\" name=\"password\" onChange={(e) => {HandleChange(e,\"password\")}}  style={{marginLeft: \"28px\",width:\"250px\"}}/>\n                      <Form.Control.Feedback type=\"invalid\" style={{marginLeft: \"28px\"}}>\n                            {error.password_nameError}\n                        </Form.Control.Feedback>\n                        </Form.Group>\n                      <Form.Group  as={Col} controlId=\"formGridEmail\">\n                        <Form.Label>Enter Email:-</Form.Label>\n                        <Form.Control type=\"email\" isInvalid={error.email_nameError} className=\"form-control\" name=\"email\" onChange={(e) => {HandleChange(e,\"email\")}} onBlur={() => cityCall()} placeholder=\"Enter email ...\"   style={{width:\"290px\"}}/>\n                        <Form.Control.Feedback type=\"invalid\">\n                            {error.email_nameError}\n                        </Form.Control.Feedback>\n                      </Form.Group>\n                  </Form.Row>\n                      \n                  <Form.Row>\n                      <Form.Group as={Col} controlId=\"formGridEmail\">\n                        <Form.Label style={{marginLeft: \"28px\"}}>Select Gender:-</Form.Label>\n                        <Form.Check type=\"radio\" name=\"gender\" value=\"male\" label=\"Male\" style={{marginLeft: \"28px\"}} onChange={(e) => {HandleChange(e,\"gender\")}} checked/>\n                        <Form.Check type=\"radio\" name=\"gender\" value=\"female\" label=\"Female\" style={{marginLeft: \"28px\"}} onChange={(e) => {HandleChange(e,\"gender\")}}/>\n                      </Form.Group>\n                      <Form.Group>\n                          <Form.Label>Select User Photo:-</Form.Label>\n                          <Form.Control type=\"file\" name=\"photo1\" onChange={(e) => {HandleChange(e,\"photo1\")}} style={{maxWidth : \"300px\"}}/>\n                      </Form.Group> \n                  </Form.Row>\n                  <Form.Row>\n                      <Form.Group>\n                          <Form.Label>Select State:-</Form.Label>\n                          <Form.Control isInvalid={error.state_nameError} className=\"form-control\" as=\"select\" name=\"state_id\" onChange={(e) => {HandleChange(e,\"state_id\")}}  style={{width:\"290px\"}} >\n                            <option selected disabled>-----Select -----</option>\n                              {optionStates()}\n                          </Form.Control>\n                          <Form.Control.Feedback type=\"invalid\">\n                            {error.state_nameError}\n                          </Form.Control.Feedback>\n                      </Form.Group> \n                      <Form.Group>\n                          <Form.Label style={{marginLeft: \"50px\"}}>Select city:-</Form.Label>\n                          <Form.Control isInvalid={error.city_nameError} className=\"form-control\" as=\"select\" name=\"city_id\" onChange={(e) => {HandleChange(e,\"city_id\")}} style={{marginLeft: \"50px\",width:\"250px\"}} >\n                              <option selected disabled>-----Select -----</option>\n                              {optioncities()}\n                          </Form.Control>\n                          <Form.Control.Feedback type=\"invalid\" style={{marginLeft: \"28px\"}}>\n                            {error.city_nameError}\n                          </Form.Control.Feedback>\n                      </Form.Group> \n                  </Form.Row>\n                  <Form.Row>\n                      <Form.Group as={Col} controlId=\"formGridEmail2\">\n                          {/* <input type=\"submit\" /> */}\n                          <Button className=\"btnRegister\" defaultValue=\"Register\" style={{marginLeft: \"28px\"}} onClick={handleSubmit}>Submit</Button>\n                      </Form.Group>\n                  </Form.Row>\n\n                  </Form>\n                  <span className=\"logn-form-copy\" style={{ marginLeft: \"262px\",marginTop: \"26px\"}}>Already have an account? <a onClick={()=>{loginHandler()}} className=\"login-form__sign-up\" style={{color:\"#0074d9\"}}>Sign in</a></span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  const mapStateToProps =  (state) => ({\n      err:state.stateReducer.error,\n      // err:state.userReducer.error1,\n      states:state.stateReducer.states,\n      cities:state.cityReducer.cities,\n    })\n  \n  const mapDispatchToProps = dispatch =>{\n    return{\n      fetchstatedata:()=>dispatch(fetchstatedata()),\n      // fetchcitiesdata:()=>dispatch(fetchcitiesdata()),\n      fetchAllStatesBystate_id:(_id)=>dispatch(fetchAllStatesBystate_id(_id)),\n      adduserdata: (postdata) => dispatch(adduserdata(postdata))\n    }\n  }\n  export default connect(mapStateToProps,mapDispatchToProps)(FormPage);\n  ","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\All Registration form\\dashboard.js",["675","676","677","678","679"],"import React, { Component, useEffect } from \"react\";\nimport {connect} from 'react-redux';\nimport {fetchDashboradRecord} from '../../store/action/userAction';\nimport {  Row, Col,Card, CardGroup,CardDeck } from \"react-bootstrap\";\n// import {MDBIcon} from 'react/jsx'\nimport { SiApachesolr,SiAtAndT,SiAdobecreativecloud,SiCoffeescript } from \"react-icons/si\";\n\nconst Dashboard = (props) => {\n  useEffect(() => {\n    props.fetchDashboradRecord();\n    console.log(props.singleDashboard);\n  },[props.fetchDashboradRecord]);\n\n  // render: function() {\n    return (\n      <>\n      <div >\n      <CardDeck style={{    display: \"flex\"}} >\n    <Card border=\"Primary\" style={{ width: '18rem',backgroundColor:\"#1e9ee8\",color:\"White\",padding:\"20px\",\n    marginLeft: \"20px\" }} >\n      <Card.Header style={{color:\"white\",fontFamily:\"auto\",textTransform:\"uppercase\"}}>Total State</Card.Header>\n      <Card.Body>\n        <Card.Title></Card.Title>\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}>{props.singleDashboard.States}</Card.Text>\n        <SiCoffeescript style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>\n      </Card.Body>\n    </Card>\n    <Card border=\"Success\" style={{ width: '18rem',backgroundColor:\"#b9ad16\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\n      <Card.Header style={{color:\"white\",fontFamily:\"auto\",textTransform:\"uppercase\"}}>Total City</Card.Header>\n      <Card.Body>\n        <Card.Title></Card.Title>\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}>{props.singleDashboard.Citys}</Card.Text>\n        <SiAtAndT style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>  \n      </Card.Body>\n    </Card>\n    <Card border=\"Success\" style={{ width: '18rem',backgroundColor:\"#25b125\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\n      <Card.Header style={{color:\"white\",fontFamily:\"auto\",textTransform:\"uppercase\"}}>Total Movies</Card.Header>\n      <Card.Body>\n        <Card.Title></Card.Title>\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}>{props.singleDashboard.Movies}</Card.Text>\n        <SiApachesolr style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>        \n      </Card.Body>\n    </Card>\n    <Card bg=\"danger\" style={{ width: '18rem',backgroundColor:\"#f52e2e\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\n      <Card.Header style={{color:\"white\",fontFamily:\"auto\",textTransform:\"uppercase\"}}>Total Theater</Card.Header>\n      <Card.Body>\n        <Card.Title></Card.Title>\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}>{props.singleDashboard.Theaters}</Card.Text>\n        <SiAdobecreativecloud style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>  \n      </Card.Body>\n    </Card>\n    </CardDeck>\n    </div>\n     </>\n    );\n}\nconst mapStateToProps =  (state) => ({\n  err:state.userReducer.error,\n  Loading:state.userReducer.loading,\n  singleDashboard:state.userReducer.singleDashboard,\n})\nconst mapDispatchToProps = dispatch =>{\n  return{\n    fetchDashboradRecord:()=>dispatch(fetchDashboradRecord())\n  }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(Dashboard);","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\TheaterPanel\\dashboard.js",["680","681"],"import React, { Component, useEffect } from \"react\";\nimport {connect} from 'react-redux';\nimport {fetchDashboradRecordTheaterPanel} from '../../store/action/userAction';\nimport { Card,CardDeck } from \"react-bootstrap\";\nimport {BsFillGridFill,BsServer,BsPuzzleFill,BsPeopleFill} from \"react-icons/bs\"\n\nconst Dashboard = (props) => {\n  useEffect(() => {\n    console.log(props.singleuser._id);\n    props.fetchDashboradRecordTheaterPanel(props.singleuser._id);\n  },[props.fetchDashboradRecordTheaterPanel]);\n  // render: function() {\n    return (\n      <>\n      <div >\n      <CardDeck style={{    display: \"flex\"}}>\n    <Card border=\"Primary\" style={{ width: '18rem',backgroundColor:\"#1e9ee8\",color:\"White\",padding:\"20px\",\n    marginLeft: \"20px\" }} >\n      <Card.Header style={{color:\"white\",fontFamily:\"auto\",textTransform:\"uppercase\"}}>Total Screen</Card.Header>\n      <Card.Body>\n        <Card.Title></Card.Title>\n        <Card.Text  style={{fontSize: \"24px\",marginTop: \"6px\"}}>{props.singleDashboard.screen}</Card.Text>\n        <BsServer style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>\n      </Card.Body>\n    </Card>\n    <Card border=\"Success\" style={{ width: '18rem',backgroundColor:\"#b9ad16\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\n      <Card.Header style={{color:\"white\",fontFamily:\"auto\",textTransform:\"uppercase\"}}>Total TheaterScreen</Card.Header>\n      <Card.Body>\n        <Card.Title></Card.Title>\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}>{props.singleDashboard.theaterScreen}</Card.Text>\n        <BsPuzzleFill style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>  \n      </Card.Body>\n    </Card>\n    <Card border=\"Success\" style={{ width: '18rem',backgroundColor:\"#25b125\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\n      <Card.Header style={{color:\"white\",fontFamily:\"auto\",textTransform:\"uppercase\"}}>Total Movies</Card.Header>\n      <Card.Body>\n        <Card.Title></Card.Title>\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}>{props.singleDashboard.Movies}</Card.Text>\n        <BsFillGridFill style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>        \n      </Card.Body>\n    </Card>\n    <Card bg=\"danger\" style={{ width: '18rem',backgroundColor:\"#f52e2e\",color:\"White\",marginLeft: \"20px\",padding:\"20px\" }} >\n      <Card.Header style={{color:\"white\",fontFamily:\"auto\",textTransform:\"uppercase\"}}>Total Movie Type</Card.Header>\n      <Card.Body>\n        <Card.Title></Card.Title>\n        <Card.Text style={{fontSize: \"24px\",marginTop: \"6px\"}}>12</Card.Text>\n        <BsPeopleFill style={{fontSize: \"65px\",marginLeft: \"131px\", marginTop: \"-54px\"}}/>  \n      </Card.Body>\n    </Card>\n    </CardDeck>\n    </div>\n     </>\n    );\n}\nconst mapStateToProps =  (state) => ({\n  singleDashboard:state.userReducer.singleDashboard,\n  singleuser:state.userReducer.singleuser\n})\nconst mapDispatchToProps = dispatch =>{\n  return{\n    fetchDashboradRecordTheaterPanel:(id)=>dispatch(fetchDashboradRecordTheaterPanel(id))\n  }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(Dashboard);","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\TheaterPanel\\screenList.js",["682","683"],"import React, { useState, useEffect } from 'react';\nimport { singlescreenrecord,updatescreen,deletescreen,getscreen } from '../../store/action/screenAction';\nimport { connect } from 'react-redux';\nimport '../state.css';\nimport { Table, Space, Button, Breadcrumb, Card, Form, Modal, Input } from 'antd';\n\nconst formItemLayout = {\n  labelCol: {\n    span: 8,\n  },\n  wrapperCol: {\n    span: 10,\n  },\n};\n\nconst ScreenList = (props) => {\n  const [form] = Form.useForm();\n  const [error,setError] = useState({\n    IsValid:false,\n    Screen_nameERROR:\"\"\n})\n  const [obj, setMyObj1] = useState({\n    _id: \"\",\n    screen_name: \"\",\n    rows: \"\",\n    cols:\"\"\n  })\n  const [ids, setIds] = useState(\"\");\n  const [show, setShow] = useState(false);\n  const [ushow, usetShow] = useState(false);\n\n  useEffect(() => {\n    props.getscreen();\n    \n    console.log(props.singlescreen);\n    if (props.singlescreen.screen_name) {\n      let olddata={...obj};\n      olddata.screen_name = props.singlescreen.screen_name;\n      olddata._id = props.singlescreen._id;\n      olddata.rows=props.singlescreen.rows;\n      olddata.cols=props.singlescreen.cols;\n      setMyObj1(olddata);\n    }\n  }, [props.getscreen,props.singlescreen])\n\n  const deleteHandler = async (id) => {\n    await props.deletescreen(id);\n    setShow(false);\n  }\n\n  const SingleSubmit = async () => {\n    let errors = { ...error, IsValid : true };\n    if(!obj.screen_name || obj.screen_name === \"\")\n    {\n      \n      if(!obj.screen_name || obj.screen_name === \"\"){\n        errors.IsValid = false;\n        errors.Screen_nameERROR = \"Screenname Is Required \"\n      }\n\n    }else{\n        errors.Screen_nameERROR = \"\"\n    }\n      setError(errors);\n      if(errors.IsValid==true){\n          console.log(obj);\n        await props.updatescreen(obj._id, obj);\n        // setOp(true);\n        usetShow(false);\n        obj._id = props.singlescreen._id;\n        obj.screen_name = \"\";\n      }\n    \n  }\n\n  const handleClose = () => setShow(false);\n  const handleShow = (id) => {\n    setShow(true);\n    setIds(id);\n  }\n\n  const SingleClose = () => {\n    obj.screen_name = \"\";\n    props.singlescreen.screen_name = \"\";\n    usetShow(false)\n  };\n\n  const handleUpdate = async (_id) => {\n    await props.singlescreenrecord(_id);\n    usetShow(true);\n  }\n\n  const columns = [\n    {\n      title: 'screen_name',\n      dataIndex: 'screen_name',\n      key: 'screen_name',\n      defaultSortOrder: 'descend',\n      sorter: (a, b) => a.screen_name.length - b.screen_name.length,\n    }, {\n      title: 'rows',\n      key: 'rows',\n      dataIndex: 'rows',\n      sorter: (a, b) => a.rows.length - b.rows.length,\n    }, {\n        title: 'columns',\n        key: 'cols',\n        dataIndex: 'cols',\n        sorter: (a, b) => a.cols.length - b.cols.length,\n      }, {\n      title: 'Update',\n      key: 'Update',\n      render: (text, record) => (\n        <Space size=\"middle\">\n          <Button onClick={() => handleUpdate(record._id)} type=\"primary\">UPDATE</Button>\n        </Space>\n      ),\n    }, {\n      title: 'Delete',\n      key: 'Delete',\n      render: (text, record) => (\n        <Space size=\"middle\">\n          <Button type=\"danger\" onClick={() => handleShow(record._id)} style={{ backgroundColor: \"Red\", borderBlockColor: \"Black\", color: \"White\" }}>Delete</Button>\n        </Space>\n      ),\n    }\n  ];\n\n  const HandleChange = (e, name) => {\n    let olddata = { ...obj };\n      olddata[name] = e.target.value;\n    // setOp(false);\n    setMyObj1(olddata);\n  }\n\n  return (\n    <>\n      <div className={\"Title\"} style={{ marginTop: \"-29px\"}}>\n          </div>\n      <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"29px\",fontFamily:\"auto\",textTransform:\"uppercase\"  }}>\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\n        <Breadcrumb.Item>Screen</Breadcrumb.Item>\n        <Breadcrumb.Item>View Screen List</Breadcrumb.Item>\n      </Breadcrumb>\n      <div className=\"site-card-border-less-wrapper\">\n        <Card title=\"View Screen List\" bordered={true} style={{ width: \"auto\",border:\"5px\" }}>\n          <Table columns={columns} dataSource={props.screens} pagination={{ pageSize: 4 }} />\n        </Card>\n      </div>\n      {/* Update Record */}\n      <Modal title=\"Update State\"\n        visible={ushow}\n        onOk={() => SingleSubmit()}\n        onCancel={() => SingleClose()}>\n        <Form form={form} name=\"ScreenList\">\n          <Input type=\"hidden\" name=\"_id\" value={obj._id} onChange={(e) => HandleChange(e, \"_id\")} />\n          <Form.Item {...formItemLayout} label=\"Enter Screen Name:-\" \n                hasFeedback\n                validateStatus={(error.Screen_nameERROR)?\"error\":\"success\"}\n                help={error.Screen_nameERROR}>\n            <Input type=\"text\" name=\"screen_name\" value={obj.screen_name || \" \"} onChange={(e) => { HandleChange(e, \"screen_name\") }} placeholder=\"Enter Screen name ...\" />\n          </Form.Item>\n          <Form.Item {...formItemLayout} label=\"Enter Rows:-\" >\n            <Input type=\"number\" name=\"rows\" value={obj.rows || \" \"} onChange={(e) => { HandleChange(e, \"rows\") }} placeholder=\"Enter Rows ...\" min=\"1\" max=\"10\"/>\n          </Form.Item>\n          <Form.Item {...formItemLayout} label=\"Enter Cols:-\" >\n            <Input type=\"number\" name=\"cols\" value={obj.cols || \" \"} onChange={(e) => { HandleChange(e, \"cols\") }} placeholder=\"Enter Cols ...\" min=\"1\" max=\"20\"/>\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* Delete Record  */}\n      <Modal title=\"Are you sure!\"\n        visible={show}\n        onOk={() => deleteHandler(ids)}\n        onCancel={() => handleClose()}>\n        Do you want to delete this state?\n      </Modal>\n    </>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  err: state.screenReducer.error,\n  screens: state.screenReducer.screens,\n  singlescreen: state.screenReducer.singlescreen\n})\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getscreen: () => dispatch(getscreen()),\n    deletescreen: (_id) => dispatch(deletescreen(_id)),\n    updatescreen: (postdata, put) => dispatch(updatescreen(postdata, put)),\n    singlescreenrecord: (id) => dispatch(singlescreenrecord(id))\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ScreenList);\n","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\TheaterPanel\\addScreen.js",["684","685","686","687"],"import React, { useState, useEffect } from 'react';\nimport { addscreen } from '../../store/action/screenAction';\nimport {login} from '../../store/action/userAction';\nimport { connect } from 'react-redux';\nimport { Breadcrumb, Card, } from 'antd';\nimport {\n    Form,\n    Input,\n    Button\n} from 'antd';\n\nconst formItemLayout = {\n    labelCol: {\n        span: 4,\n    },\n    wrapperCol: {\n        span: 8,\n    },\n};\nconst formTailLayout = {\n    labelCol: {\n        span: 4,\n    },\n    wrapperCol: {\n        span: 8,\n        offset: 4,\n    },\n};\n\nconst AddForm = (props) => {\n    useEffect(()=>{\n        console.log(props.singleuser._id);\n        // props.singleuser;\n    },[props.singleuser])\n    const [form] = Form.useForm();\n    const [obj, setMyObj] = useState({\n        screen_name: \"\",\n        rows: \"\",\n        cols: \"\",\n        user_id:\"\"\n    })\n    const [error, setError] = useState({\n        screen_nameError: \"\",\n        isValid: false\n    });\n\n\n    const handleSubmit = async () => {\n        try {\n            const values = await form.validateFields();\n            console.log(props.singleuser._id);\n            let olddata = { ...obj };\n            olddata[\"user_id\"]=props.singleuser._id;\n            setMyObj(olddata);\n            await props.addscreen(olddata);\n            props.history.replace(\"/theater/screenList\");\n        } catch (errorInfo) {\n            console.log('Failed:', errorInfo);\n        }\n    }\n\n    const HandleChange = (e, name) => {\n        let olddata = { ...obj };\n        olddata[name] = e.target.value;\n        setMyObj(olddata);\n    }\n\n    return (\n\n        <>\n            <div className={\"Title\"} style={{ marginTop: \"-29px\" }}>\n            </div>\n            <Breadcrumb style={{ marginTop: \"1px\", textAlign: \"right\", marginBottom: \"30px\",fontFamily:\"auto\",textTransform:\"uppercase\"  }}>\n                <Breadcrumb.Item>Home</Breadcrumb.Item>\n                <Breadcrumb.Item>Screen</Breadcrumb.Item>\n                <Breadcrumb.Item>Add Screen</Breadcrumb.Item>\n            </Breadcrumb>\n            <div className=\"site-card-border-less-wrapper\">\n                <Card title=\"Add Screen Form\" bordered={false} style={{ width: \"auto\" }}>\n                    <Form form={form} name=\"AddForm\">\n                        \n                        <Form.Item {...formItemLayout} label=\"Enter Screen Name:-\" name=\"screen_name\" rules={[{ required: true, message: 'Enter Screen Name!' }]}>\n                            <Input type=\"text\" name=\"screen_name\" onChange={(e) => { HandleChange(e, \"screen_name\") }} placeholder=\"Enter Screen name ...\" style={{ maxWidth: \"300px\" }} />\n                        </Form.Item>\n                        <Form.Item {...formItemLayout} label=\"Enter Total Rows:-\" name=\"rows\" rules={[{ required: true, message: 'Please Enter Rows!' }]}>\n                            <Input type=\"number\" name=\"rows\" onChange={(e) => { HandleChange(e, \"rows\") }} placeholder=\"rows no ...\" style={{ maxWidth: \"300px\" }} min=\"1\" max=\"10\"/>\n                        </Form.Item>\n                        <Form.Item {...formItemLayout} label=\"Enter Total Column :-\" name=\"cols\" rules={[{ required: true, message: 'Please Enter Cols!' }]}>\n                            <Input type=\"number\" name=\"cols\" onChange={(e) => { HandleChange(e, \"cols\") }} placeholder=\"cols no ...\" style={{ maxWidth: \"300px\" }} min=\"1\" max=\"20\"/>\n                        </Form.Item>\n                        <Form.Item {...formTailLayout} label=\"\">\n                            <Button type=\"primary\" style={{ backgroundColor: \"#058a5f\" }} onClick={(e) => handleSubmit()}>Add Screen</Button>\n                        </Form.Item>\n                    </Form>\n                </Card>\n            </div>\n\n        </>\n    );\n}\nconst mapStateToProps =  (state) => ({\n    // err:state.userReducer.error,\n    // Loading:state.userReducer.loading,\n    singleuser:state.userReducer.singleuser,\n  })\nconst mapDispatchToProps = dispatch => {\n    return {\n        addscreen: (postdata) => dispatch(addscreen(postdata)),\n        // updateProfile:()=>dispatch(updateProfile())\n\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(AddForm);\n","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\TheaterPanel\\bookingDetails.js",["688","689","690","691","692","693","694","695","696","697","698","699","700","701","702","703","704","705"],"import React, { useState, useEffect } from 'react';\nimport { gettscreen, deletetscreen, updatetscreen, singletscreenrecord } from '../../store/action/theaterscreenAction';\nimport { getscreen } from \"../../store/action/screenAction\";\nimport { fetchmoviedata, singlemovieDataFetch } from \"../../store/action/movieAction\"\nimport { getmbookingTheaterDetails } from \"../../store/action/userAction\"\nimport { connect } from 'react-redux';\nimport '../state.css';\nimport { Table, Space, Button, Breadcrumb, Card, Form, Modal, Input, Col, DatePicker, TimePicker, Row, Select, Switch } from 'antd';\n\nconst { Option } = Select;\nconst formItemLayout = {\n    labelCol: {\n        span: 24,\n    },\n    wrapperCol: {\n        span: 12,\n    },\n};\nconst BookingDetails = (props) => {\n\n    const { form } = Form.useForm();\n    const [obj, setMyObj] = useState({\n        _id: \"\",\n        user_id: \"\",\n        movie_id: \"\",\n        moviename: \"\",\n        rate: \"\",\n        description: \"\",\n    });\n\n    useEffect( async () => {\n        props.getscreen();\n        // props.getmbookingTheaterDetails(props.singleuser._id);\n    }, [props.getscreen])\n\n    const optionTemplate = () => {\n        return props.screens.map((movieList) => {\n            const { _id, screen_name } = movieList;\n            return (\n                <Option value={_id} key={_id}>{screen_name}</Option>\n            )\n        })\n    }\n    \n    const HandleChange = async (e, name) => {\n        if(e !=undefined){\n            let olddata = { ...obj };\n            olddata[name] = e;\n            setMyObj(olddata);\n            await props.getmbookingTheaterDetails(props.singleuser._id,e);\n        }\n    }\n\n    const columns = [\n        {\n            title: 'User name',\n            key: 'user_id',\n            defaultSortOrder: 'descend',\n            render: s => s.user_id.user_name,\n        }, {\n            title: 'Movie_Name',\n            key: 'movie_id',\n            defaultSortOrder: 'descend',\n            render: s => s.movie_id.moviename,\n            sorter: (a, b) => a.movie_id.moviename.length - b.movie_id.moviename.length,\n\n        }, {\n            title: 'Booking Date',\n            key: 'booking_id',\n            defaultSortOrder: 'descend',\n            render: s => s.booking_date\n        }, {\n            title: 'Booking Time',\n            key: 'booking_id',\n            defaultSortOrder: 'descend',\n            render: s => s.booking_time\n        }, {\n            title: 'Total Price ',\n            key: 'booking_id',\n            defaultSortOrder: 'descend',\n            render: s => s.total\n        }\n\n    ];\n\n    return (\n        <>\n            <div className={\"Title\"} style={{ marginTop: \"-29px\" }}>\n            </div>\n            <Breadcrumb style={{ marginTop: \"1px\", textAlign: \"right\", marginBottom: \"29px\", fontFamily: \"auto\", textTransform: \"uppercase\" }}>\n                <Breadcrumb.Item>Home</Breadcrumb.Item>\n                <Breadcrumb.Item>Booking Details</Breadcrumb.Item>\n                <Breadcrumb.Item>View Booking Details List</Breadcrumb.Item>\n            </Breadcrumb>\n            <Form form={form} name=\"AddForm\">\n                <Form.Item {...formItemLayout} label=\"Select Screen :-\" name=\"screen_id\">\n                    <Select name=\"screen_id\" onChange={(e) => HandleChange(e, \"screen_id\")} placeholder=\"------ Select Movie-----\" allowClear>\n                        {optionTemplate()}\n                    </Select>\n                </Form.Item>\n            </Form>\n            <div className=\"site-card-border-less-wrapper\">\n                <Card title=\"View Booking List\" bordered={true} style={{ width: \"auto\", border: \"5px\" }}>\n                    <Table columns={columns} dataSource={props.bookings} pagination={{ pageSize: 4 }} />\n                </Card>\n            </div>\n\n        </>\n    );\n}\n\nconst mapStateToProps = (state) => ({\n    screens: state.screenReducer.screens,\n    singleuser: state.userReducer.singleuser,\n    bookings: state.userReducer.bookings\n})\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getscreen: () => dispatch(getscreen()),\n        getmbookingTheaterDetails: (id,screen_id) => dispatch(getmbookingTheaterDetails(id,screen_id))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(BookingDetails);\n","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\TheaterPanel\\addtheaterscreen.js",["706","707","708","709","710","711","712","713","714","715","716","717"],"import React, { useEffect, useState } from 'react';\nimport { addtscreen } from \"../../store/action/theaterscreenAction\";\nimport { getscreen } from \"../../store/action/screenAction\";\nimport { fetchmoviedata,singlemovieDataFetch } from \"../../store/action/movieAction\"\nimport {login} from '../../store/action/userAction';\nimport { connect } from 'react-redux';\nimport { Breadcrumb,Card,Row,Col,DatePicker,TimePicker,Select } from 'antd';\nimport {\n  Form,\n  Input,\n  Button,\n  Switch\n} from 'antd';\n// import { Row } from 'react-bootstrap';\nconst {Option} = Select;\nconst formItemLayout = {\n  labelCol: {\n    // span: 5,\n  },\n  wrapperCol: {\n    span: 10,\n  },\n};\nconst formTailLayout = {\n  labelCol: {\n    span: 4,\n  },\n  wrapperCol: {\n    span: 8,\n    offset: 4,\n  },\n};\n\nconst AddTScreen = (props) => {\n  const { RangePicker } = DatePicker;\n  const [form] = Form.useForm();\n  const [obj, setMyObj] = useState({\n    user_id: \"\",\n    movie_id: \"\",\n    screen_id: \"\",\n    screen_time: \"\",\n    start_date: \"\",\n    end_date: \"\",\n    end_time: \"\",\n    price:\"\"\n  })\n\n  useEffect(()=>{\n    props.getscreen()\n    props.fetchmoviedata()\n    console.log(props.singleuser._id);\n    // console.log(props.)\n  },[props.getscreen,props.fetchmoviedata,props.singleuser])\n\n  const handleSubmit = async () => {\n    try {\n      const values = await form.validateFields();\n        const formdata = new FormData();\n        formdata.append(\"user_id\",props.singleuser._id)\n        formdata.append(\"screen_id\",obj.screen_id);\n        formdata.append(\"movie_id\",obj.movie_id);\n        formdata.append(\"screen_time\",obj.screen_time);\n        formdata.append(\"end_time\",obj.end_time);\n        formdata.append(\"start_date\",obj.start_date);\n        formdata.append(\"end_date\",obj.end_date);\n        formdata.append(\"price\",obj.price);\n        console.log(obj.screen_time);\n        await props.addtscreen(formdata);\n        props.history.replace(\"/theater/tscreenList\");\n    } catch (errorInfo) {\n      console.log('Failed:', errorInfo);\n    }\n  }\n\n  const HandleChange = (e, name) => {\n    let olddata = {...obj};\n    if((name === \"screen_id\") || (name === \"movie_id\"))\n    {\n      olddata[name] = e;\n    }\n    else if((name == \"start_date\") || (name == \"end_date\"))\n    {\n      if(e!=null)\n      olddata[name] = new Date(e._d).toLocaleDateString();\n    }\n    else if((name == \"screen_time\") || (name == \"end_time\"))\n    {\n      if(e!=null)\n      olddata[name] = new Date(e._d).toLocaleTimeString();\n    }\n    else\n    {\n      if(name== \"movie_id\"){\n        console.log(e.target.value);\n      }\n      olddata[name] = e.target.value;\n    }\n    console.log(olddata);\n    setMyObj(olddata);\n    cityCall(olddata.movie_id);\n  }\n\n  const cityCall =async (id) =>{\n    await props.singlemovieDataFetch(id);\n    console.log(props.singlemovie);\n  }\n\n   const optionTemplate = ()=>{\n     return props.screens.map((screenlist)=>{\n       const{_id,screen_name} = screenlist;\n       return(\n         <option value={_id} key={_id}>{screen_name}</option>\n       )\n     })\n   }\n\n   const optionMovieTemplate = ()=>{\n    return props.movies.map((movielist)=>{\n      const{_id,moviename,relesedate} = movielist;\n      // <input type=\"hidden\" value={relesedate} key={_id}></input>\n      return(\n        <option value={_id} key={_id}>{moviename}{relesedate}</option>\n      )\n    })\n  }\n\n  return (\n    <>\n      <div className={\"Title\"} style={{marginTop: \"-29px\" }}>\n          </div>\n          <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"30px\",fontFamily:\"auto\",textTransform:\"uppercase\"   }}>\n              <Breadcrumb.Item>Home</Breadcrumb.Item>\n              <Breadcrumb.Item>Theater</Breadcrumb.Item>\n              <Breadcrumb.Item>Add Theater Screen</Breadcrumb.Item>\n          </Breadcrumb>\n            <div className=\"site-card-border-less-wrapper\">\n              <Card title=\"Add Theater Screen Form\" bordered={false} style={{ width: \"auto\" }}>\n                      <Form form={form} name=\"AddTScreen\">\n                      <Row gutter={0}>\n                          <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"SELECT SCREEN:-\" name=\"screenname\" rules={[{ required: true, message: 'Please Select Screen Name' }]}>\n                          <Select name=\"screen_id\" onChange={(e)=>HandleChange(e,\"screen_id\")} placeholder=\"------ Select Screen-----\" allowClear>\n                                      {optionTemplate()}\n                                  </Select>\n                          </Form.Item>\n                          \n                      </Col>\n                      <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"SELECT MOVIE:-\" name=\"moviename\" rules={[{ required: true, message: 'Please required movie name!' }]}>\n                          <Select name=\"movie_id\" onChange={(e)=>HandleChange(e,\"movie_id\")} placeholder=\"------ Select Movie-----\" allowClear>\n                                      {optionMovieTemplate()}\n                                  </Select>\n                          </Form.Item>\n                          \n                      </Col>\n                    </Row>\n                      <Row gutter={0}>\n                      <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"Screen Time\" name=\"screen_time\" rules={[{ required: true, message: 'Please Select Screen Time' }]}>\n                              <TimePicker name=\"screen_time\" onChange={(e) => { HandleChange(e, \"screen_time\") }} placeholder=\"Screen Time\" />\n                          </Form.Item>\n                      </Col>\n                        <Col span={12}>\n                        <Form.Item {...formItemLayout} label=\"End Time\" name=\"end_time\" rules={[{ required: true, message: 'Please Select End Time' }]}>\n                              <TimePicker name=\"end_time\" onChange={(e) => { HandleChange(e, \"end_time\") }} placeholder=\"End Time\"/>\n                          </Form.Item>\n                          \n                      </Col>\n                      </Row>\n                      \n                      <Row gutter={0}>\n                      <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"Starting Date:-\" name=\"start_date\" rules={[{ required: true, message: 'Please Select Start Date!' }]}>\n                          <DatePicker format=\"DD/MM/yyyy\" name=\"start_date\" onChange={(e) => { HandleChange(e, \"start_date\") }} placeholder=\"Start Date\"/>\n                          </Form.Item>\n                          \n                      </Col>\n                      <Col span={12}>\n                      <Form.Item {...formItemLayout} label=\"Ending Date:-\" name=\"end_date\" rules={[{ required: true, message: 'Please Select End Date!' }]}>\n                          <DatePicker format=\"DD/MM/yyyy\" name=\"end_date\" onChange={(e) => { HandleChange(e, \"end_date\") }} placeholder=\"End date\"/>\n                          </Form.Item>\n                          </Col>\n                      </Row>\n                      <Row gutter={0}>\n                          <Col span={12}>\n                                <Form.Item {...formItemLayout} label=\"Price:-\"  rules={[{ required: true, message: 'Please Select End Date!' }]}>\n                                    <Input type=\"text\" name=\"price\" value={obj._id} onChange={(e) => { HandleChange(e, \"price\") }} placeholder=\"Price\"/>\n                                  </Form.Item>\n                          </Col>\n                          <Col span={12}>\n                                    <span style={{color:\"#0955ff\",fontStyle:\"inherit\",textTransform: \"capitalize\"}}>Note:- Please Starting and ending Date is select <br></br> After ReleaseDate :- {props.singlemovie.releasedate}<br></br></span>                               \n                          </Col>\n                      </Row>  \n                           <Form.Item {...formTailLayout} label=\"\"> \n                                <Button type=\"primary\" onClick={(e) =>handleSubmit()} loading={props.loading}>Add Theater Screen</Button>\n                          </Form.Item>                           \n                      </Form>\n              </Card>\n            </div>\n    </>\n  );\n}\nconst mapStateToProps =  (state) => ({\n  singlemovie:state.movieReducer.singlemovie,\n   screens:state.screenReducer.screens,\n   error:state.screenReducer.error,\n   movies:state.movieReducer.movies,\n   error:state.movieReducer.error,\n   singleuser:state.userReducer.singleuser\n})\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addtscreen: (postdata) => dispatch(addtscreen(postdata)),\n    singlemovieDataFetch:(id) => dispatch(singlemovieDataFetch(id)),\n    getscreen: ()=> dispatch(getscreen()),\n    fetchmoviedata:()=>dispatch(fetchmoviedata())\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTScreen);\n","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\State_All_Form\\addForm.js",["718"],"import React,{useState} from 'react';\nimport {addstatedata} from '../../store/action/stateAction';\nimport {connect} from 'react-redux';\nimport { Breadcrumb,Card } from 'antd';\nimport \"../state.css\";\nimport {\n  Form,\n  Input,\n  Button\n} from 'antd';\n\n\nconst formItemLayout = {\n  labelCol: {\n    span: 4,\n  },\n  wrapperCol: {\n    span: 8,\n  },\n};\nconst formTailLayout = {\n  labelCol: {\n    span: 4,\n  },\n  wrapperCol: {\n    span: 8,\n    offset: 4,\n  },\n};\n\nconst AddForm = (props) => {\n  const [form] = Form.useForm();\n  const [obj,setMyObj]= useState({\n    state_name:\"\"\n  })\n\n  const handleSubmit = async () =>{\n    try {\n      const values = await form.validateFields();\n     await props.addstatedata(obj);\n     props.history.replace(\"/state\");\n    } catch (errorInfo) {\n      console.log('Failed:', errorInfo);\n    }\n  }\n\n  const HandleChange = (e,name) =>{\n     let olddata = {...obj};\n     olddata[name] = e.target.value;\n     setMyObj(olddata);\n  }\n\n  return (\n    <>    \n          <div className={\"Title\"} style={{marginTop: \"-29px\" }}>\n          </div>\n          <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"30px\",fontFamily:\"auto\",textTransform:\"uppercase\"  }}>\n              <Breadcrumb.Item>Home</Breadcrumb.Item>\n              <Breadcrumb.Item>State</Breadcrumb.Item>\n              <Breadcrumb.Item>Add State</Breadcrumb.Item>\n          </Breadcrumb>\n            <div className=\"site-card-border-less-wrapper\">\n              <Card title=\"Add State Form\" bordered={false} style={{ width: \"auto\" }}>\n                      <Form form={form} name=\"AddForm\">\n                          <Form.Item {...formItemLayout} name=\"state_name\" label=\"Enter State Name:-\" rules={[{ required: true, message: 'Please required State!' }]}>\n                              <Input type=\"text\" name=\"state_name\" onChange={(e)=>{HandleChange(e,\"state_name\")}} placeholder=\"Enter state name ...\" style={{maxWidth : \"300px\"}}/>\n                          </Form.Item>\n                          <Form.Item {...formTailLayout} label=\"\">\n                              <Button type=\"primary\" onClick={handleSubmit}>Add State</Button>\n                          </Form.Item>\n                      </Form>\n              </Card>\n            </div>\n    </>\n  );\n}\n\nconst mapDispatchToProps = dispatch =>{\n  return{\n    addstatedata: (postdata) => dispatch(addstatedata(postdata))\n  }\n}\nexport default connect(null,mapDispatchToProps)(AddForm);\n","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\TheaterPanel\\theaterscreenlist.js",["719","720","721","722","723","724","725","726","727","728","729","730"],"import React, { useState, useEffect } from 'react';\nimport { gettscreen,deletetscreen,updatetscreen,singletscreenrecord } from '../../store/action/theaterscreenAction';\nimport { getscreen } from \"../../store/action/screenAction\";\nimport { fetchmoviedata,singlemovieDataFetch } from \"../../store/action/movieAction\"\nimport { connect } from 'react-redux';\nimport '../state.css';\nimport { Table, Space, Button, Breadcrumb, Card, Form, Modal, Input,Col,DatePicker,TimePicker,Row,Select,Switch } from 'antd';\nimport moment from 'moment'\n\nconst {Option} = Select;\nconst formItemLayout = {\n  labelCol: {\n    span: 24,\n  },\n  wrapperCol: {\n    span: 12,\n  },\n};\nconst formTailLayout = {\n  labelCol: {\n    span: 4,\n  },\n  wrapperCol: {\n    span: 8,\n    offset: 4,\n  },\n};\nconst TheaterScreenList = (props) => {\n  const [form] = Form.useForm();\n  const [error,setError] = useState({\n    IsValid:false,\n    Screen_nameERROR:\"\"\n})\n  const [obj, setMyObj1] = useState({\n    _id: \"\",\n    user_id: \"\",\n    movie_id: \"\",\n    screen_id:\"\",\n    screen_time:\"\",\n    start_date:\"\",\n    end_date:\"\",\n    end_time:\"\",\n    price:\"\"\n  })\n  const [ids, setIds] = useState(\"\");\n  const [show, setShow] = useState(false);\n  const [ushow, usetShow] = useState(false);\n\n  useEffect(() => {\n    props.gettscreen();\n    props.getscreen();\n    props.fetchmoviedata();\n    console.log(props.singletscreen);\n    if (props.singletscreen.screen_id) {\n      let olddata={...obj};\n      console.log(props.singletscreen.screen_id._id)\n      olddata.screen_id = props.singletscreen.screen_id._id;\n      olddata._id = props.singletscreen._id;\n      olddata.user_id = props.singletscreen.user_id._id;\n      olddata.movie_id=props.singletscreen.movie_id._id;\n      olddata.screen_time=props.singletscreen.screen_time;\n      olddata.start_date=props.singletscreen.start_date;\n      olddata.end_date=props.singletscreen.end_date;\n      olddata.end_time=props.singletscreen.end_time;\n      olddata.price=props.singletscreen.price;\n      console.log(olddata);\n      console.log(obj.start_date)\n      setMyObj1(olddata);\n    }\n  }, [props.gettscreen,props.singletscreen])\n\n  const deleteHandler = async (id) => {\n    await props.deletetscreen(id);\n    setShow(false);\n  }\n\n  const SingleSubmit = async () => {\n    // let errors = { ...error, IsValid : true };\n    // if(!obj.screen_name || obj.screen_name === \"\")\n    // {\n      \n    //   if(!obj.screen_name || obj.screen_name === \"\"){\n    //     errors.IsValid = false;\n    //     errors.Screen_nameERROR = \"Screenname Is Required \"\n    //   }\n\n    // }else{\n    //     errors.Screen_nameERROR = \"\"\n    // }\n    //   setError(errors);\n    //   if(errors.IsValid==true){\n    //       console.log(obj);\n        await props.updatetscreen(obj._id, obj);\n        // setOp(true);\n        usetShow(false);\n        obj._id = props.singletscreen._id;\n        obj.screen_id = \"\";\n      // }\n    \n  }\n\n  const handleClose = () => setShow(false);\n  const handleShow = (id) => {\n    setShow(true);\n    setIds(id);\n  }\n\n  const SingleClose = () => {\n    obj.screen_id = \"\";\n    props.singletscreen.screen_id = \"\";\n    usetShow(false)\n  };\n\n  const handleUpdate = async (_id) => {\n    await props.singletscreenrecord(_id);\n    usetShow(true);\n  }\n\n  const columns = [\n    {\n      title: 'Screen_Name',\n    //   dataIndex: 'screen_name',\n      key: 'screen_id',\n      defaultSortOrder: 'descend',\n      render: s=>s.screen_id.screen_name,\n      sorter: (a, b) => a.screen_id.screen_name.length - b.screen_id.screen_name.length,\n    },\n     {\n      title: 'Movie_Name',\n      key: 'movie_id',\n    //   dataIndex: 'moviename',\n      defaultSortOrder:'descend',\n      render: s => s.movie_id.moviename,\n      sorter: (a, b) => a.movie_id.moviename.length - b.movie_id.moviename.length,\n    }, {\n        title: 'screen_time',\n        key: 'screen_time',\n        dataIndex: 'screen_time',\n        sorter: (a, b) => a.screen_time.length - b.screen_time.length,\n      },{\n        title: 'end_time',\n        key: 'end_time',\n        dataIndex: 'end_time',\n        sorter: (a, b) => a.end_time.length - b.end_time.length,\n      },{\n        title: 'Start Date',\n        key: 'start_date',\n        dataIndex: 'start_date',\n        sorter: (a, b) => a.start_date.length - b.start_date.length,\n      },{\n        title: 'End Date',\n        key: 'end_date',\n        dataIndex: 'end_date',\n        sorter: (a, b) => a.end_date.length - b.end_date.length,\n      }\n    , {\n      title: 'Update',\n      key: 'Update',\n      render: (text, record) => (\n        <Space size=\"middle\">\n          <Button onClick={() => handleUpdate(record._id)} type=\"primary\">UPDATE</Button>\n        </Space>\n      ),\n    }, \n    ,{\n      title: 'Delete',\n      key: 'Delete',\n      render: (text, record) => (\n        <Space size=\"middle\">\n          <Button type=\"danger\" onClick={() => handleShow(record._id)} style={{ backgroundColor: \"Red\", borderBlockColor: \"Black\", color: \"White\" }}>Delete</Button>\n        </Space>\n      ),\n    }\n  ];\n\n  const HandleChange = (e, name) => {\n    let olddata = {...obj};\n    if((name === \"screen_id\") || (name === \"movie_id\"))\n    {\n      olddata[name] = e;\n    }\n    else if((name == \"start_date\") || (name == \"end_date\"))\n    {\n      if(e!=null)\n      olddata[name] = new Date(e._d).toLocaleDateString();\n    }\n    else if((name == \"screen_time\") || (name == \"end_time\"))\n    {\n      if(e!=null)\n      olddata[name] = new Date(e._d).toLocaleTimeString();\n    }\n    else\n    {\n      olddata[name] = e.target.value;\n    }\n    console.log(olddata);\n    \n    setMyObj1(olddata);\n    cityCall(olddata.movie_id);\n  }\n\n  const cityCall =async (id) =>{\n    await props.singlemovieDataFetch(id);\n    console.log(props.singlemovie);\n  }\n\n  const optionTemplate = ()=>{\n    return props.screens.map((screenlist)=>{\n      const{_id,screen_name} = screenlist;\n      return(\n        <option value={_id} key={_id}>{screen_name}</option>\n      )\n    })\n  }\n\n  const optionMovieTemplate = ()=>{\n   return props.movies.map((movielist)=>{\n     const{_id,moviename} = movielist;\n     return(\n       <option value={_id} key={_id}>{moviename}</option>\n     )\n   })\n }\n  return (\n    <>\n      <div className={\"Title\"} style={{ marginTop: \"-29px\"}}>\n          </div>\n      <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"29px\",fontFamily:\"auto\",textTransform:\"uppercase\"  }}>\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\n        <Breadcrumb.Item>Theater Screen</Breadcrumb.Item>\n        <Breadcrumb.Item>View Theater Screen List</Breadcrumb.Item>\n      </Breadcrumb>\n      <div className=\"site-card-border-less-wrapper\">\n        <Card title=\"View Screen List\" bordered={true} style={{ width: \"auto\",border:\"5px\" }}>\n          <Table columns={columns} dataSource={props.tscreens} pagination={{ pageSize: 4 }} />\n        </Card>\n      </div>\n      {/* Update Record */}\n      <Modal title=\"Update Theater Screen\"\n       visible={ushow}\n       onOk={() => SingleSubmit()}\n       onCancel={() => SingleClose()}>\n      <Form>\n      <Row gutter={0}>\n                          <Col span={12}>\n                          <Input type=\"hidden\" name=\"_id\" value={obj._id} onChange={(e) => { HandleChange(e, \"_id\") }}/>\n                          <Form.Item {...formItemLayout} label=\"SELECT SCREEN:-\"  rules={[{ required: true, message: 'Please Select Screen Name' }]}>\n                          <Select name=\"screen_id\" value={obj.screen_id} onChange={(e)=>HandleChange(e,\"screen_id\")} placeholder=\"------ Select Screen-----\" allowClear>\n                                      {optionTemplate()}\n                                  </Select>\n                          </Form.Item>\n                          \n                      </Col>\n                      <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"SELECT MOVIE:-\"  rules={[{ required: true, message: 'Please required movie name!' }]}>\n                          <Select name=\"movie_id\" value={obj.movie_id} onChange={(e)=>HandleChange(e,\"movie_id\")} placeholder=\"------ Select Movie-----\" allowClear>\n                                      {optionMovieTemplate()}\n                                  </Select>\n                          </Form.Item>\n                          \n                      </Col>\n                    </Row>\n                      <Row gutter={0}>\n                      <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"Screen Time\" rules={[{ required: true, message: 'Please Select Screen Time' }]}>\n                              <TimePicker name=\"screen_time\" value={moment(obj.screen_time,'HH:mm:ss')} onChange={(e) => { HandleChange(e, \"screen_time\") }} placeholder=\"Screen Time\" />\n                          </Form.Item>\n                      </Col>\n                        <Col span={12}>\n                        <Form.Item {...formItemLayout} label=\"End Time\"  rules={[{ required: true, message: 'Please Select End Time' }]}>\n                              <TimePicker name=\"end_time\" value={moment(obj.end_time,'HH:mm:ss')} onChange={(e) => { HandleChange(e, \"end_time\") }} placeholder=\"End Time\"/>\n                          </Form.Item>\n                          \n                      </Col>\n                      </Row>\n                      \n                      <Row gutter={0}>\n                      <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"Starting Date:-\"  rules={[{ required: true, message: 'Please Select Start Date!' }]}>\n                          <DatePicker format=\"DD/MM/yyyy\" value={moment(obj.start_date,'MM/DD/ YYYY')} name=\"start_date\" onChange={(e) => { HandleChange(e, \"start_date\") }} placeholder=\"Start Date\"/>\n                          </Form.Item>\n                          \n                      </Col>\n                      <Col span={12}>\n                      <Form.Item {...formItemLayout} label=\"Ending Date:-\"  rules={[{ required: true, message: 'Please Select End Date!' }]}>\n                          <DatePicker format=\"DD/MM/yyyy\" value={moment(obj.end_date,'MM/DD/ YYYY')} name=\"end_date\" onChange={(e) => { HandleChange(e, \"end_date\") }} placeholder=\"End date\"/>\n                          </Form.Item>\n                          </Col>\n                      </Row>  \n                      <Row gutter={0}>\n                      <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"Price:-\"  rules={[{ required: true, message: 'Please Select End Date!' }]}>\n                              <Input type=\"text\" name=\"price\" value={obj.price} onChange={(e) => { HandleChange(e, \"price\") }}/>\n                          </Form.Item>\n                       </Col>\n                       <Col span={12}>\n                              <span style={{color:\"#0955ff\",fontStyle:\"inherit\",textTransform: \"capitalize\"}}>Note:- Please Starting and ending Date is select  After ReleaseDate :- {props.singlemovie.releasedate}<br></br></span>                               \n                       </Col>\n                      </Row>                               \n      </Form>\n      </Modal>\n\n      {/* Delete Record  */}\n      <Modal title=\"Are you sure!\"\n        visible={show}\n        onOk={() => deleteHandler(ids)}\n        onCancel={() => handleClose()}>\n        Do you want to delete this state?\n      </Modal>\n    </>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  err: state.theaterscreenReducer.error,\n  singlemovie:state.movieReducer.singlemovie,\n  tscreens:state.theaterscreenReducer.tscreens,\n  singletscreen: state.theaterscreenReducer.singletscreen,\n  screens:state.screenReducer.screens,\n  singleuser:state.userReducer.singleuser,\n  movies:state.movieReducer.movies\n})\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    // getscreen: () => dispatch(getscreen()),\n    // deletescreen: (_id) => dispatch(deletescreen(_id)),\n    updatetscreen: (postdata, put) => dispatch(updatetscreen(postdata, put)),\n    singlemovieDataFetch:(id) => dispatch(singlemovieDataFetch(id)),\n    singletscreenrecord: (id) => dispatch(singletscreenrecord(id)),\n      gettscreen: ()=>dispatch(gettscreen()),\n      deletetscreen: (_id)=>dispatch(deletetscreen(_id)),\n      getscreen: ()=> dispatch(getscreen()),\n      fetchmoviedata:()=>dispatch(fetchmoviedata())\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(TheaterScreenList);\n","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\State_All_Form\\stateList.js",["731","732","733","734","735","736"],"import React, { useState, useEffect } from 'react';\n// import {  Modal } from 'react-bootstrap';\nimport { fetchstatedata, deletestatedata, updatestatedata, singlestateDataFetch } from '../../store/action/stateAction';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { BiPlusMedical, BiSearch } from 'react-icons/bi';\nimport { FiAlignJustify } from \"react-icons/fi\";\nimport { Table,Space,Button,Breadcrumb,Card,Form,Modal,Input } from 'antd';\nimport '../state.css';\n\nconst StateList = (props) => {\n  const [obj, setMyObj1] = useState({\n    _id: \"\",\n    state_name: \"\",\n  })\n\n  const [ids, setIds] = useState(\"\");\n  const [error,setError] = useState({\n    state_nameError:'',\n    IsValid:false\n})\n  useEffect(() => {\n    props.fetchstatedata();\n    if (props.singlestate.state_name) {\n      console.log(props.singlestate.state_name)\n      let olddata={...obj};\n      olddata.state_name = props.singlestate.state_name;\n      olddata._id = props.singlestate._id;\n      setMyObj1(olddata);\n    }\n  }, [props.fetchstatedata,props.singlestate])\n\n  const deleteHandler = async (id) => {\n    await props.deletestatedata(id);\n    setShow(false);\n  }\n\n  const SingleSubmit = async () => {\n    // let categoryData = {...obj}\n    let errors = { ...error, IsValid : true };\n    if(!obj.state_name || obj.state_name === \"\")\n    {\n        errors.IsValid = false;\n        errors.state_nameError = \"StateName Is Required \"\n    }\n    else\n        errors.state_nameError = \"\"\n    setError(errors);\n    if(errors.IsValid==true){\n      await props.updatestatedata(obj._id, obj);\n      usetShow(false);\n      obj.state_name = \"\";\n      props.singlestate.state_name = \"\";\n    }\n  }\n\n  const [show, setShow] = useState(false);\n  const [ushow, usetShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = (id) => {\n    setShow(true);\n    setIds(id);\n  }\n\n  const SingleClose = () => {\n    setError({\n      state_nameError:\"\",\n      IsValid:true\n    })\n    obj.state_name = \"\";\n    props.singlestate.state_name = \"\";\n    usetShow(false)\n  };\n\n  // if (props.singlestate.state_name && !obj.state_name) {\n  //   obj.state_name = props.singlestate.state_name;\n  //   obj._id = props.singlestate._id;\n  // }\n  const handleUpdate = async (_id) => {\n    await props.singlestateDataFetch(_id);\n    usetShow(true);\n  }\n  \n  const columns = [\n    {\n      title: 'state_Name',\n      dataIndex: 'state_name',\n      key: 'state_name',\n      defaultSortOrder: 'descend',\n      // sorter: (a, b) => a.state_name.length - b.state_name.length,\n    },{\n      title: 'Update',\n      key: 'Update',\n      render: (text, record) => (\n        <Space size=\"middle\">\n          <Button onClick={() => handleUpdate(record._id)} type=\"primary\">UPDATE</Button>\n        </Space>\n      ),\n    },{\n      title: 'Delete',\n      key: 'Delete',\n      render: (text, record) => (\n        <Space size=\"middle\">\n          <Button type=\"danger\" onClick={() => handleShow(record._id)} style={{backgroundColor:\"Red\",borderBlockColor:\"Black\",color:\"White\"}}>Delete</Button>\n        </Space>\n      ),\n    }\n  ];\n  // }\n  const HandleChange = (e, name) => {\n    let olddata = { ...obj };\n    olddata[name] = e.target.value;    \n    setMyObj1(olddata);\n  }\n  return (\n    <>\n          <Breadcrumb style={{ marginTop: \"-29px\",textAlign:\"right\",marginBottom:\"29px\" }} key=\"sdsgf\">\n              <Breadcrumb.Item>Home</Breadcrumb.Item>\n              <Breadcrumb.Item>State</Breadcrumb.Item>\n              <Breadcrumb.Item>View State List</Breadcrumb.Item>\n          </Breadcrumb>\n            <div className=\"site-card-border-less-wrapper\" key=\"sdsbhdcb\">\n              <Card title=\"View State List\" bordered={false} style={{ width: \"auto\" }} key=\"sdkbjse\">\n                <Table columns={columns} dataSource={props.states} pagination={{ pageSize: 4 }} key=\"mvseuiwi\"/>\n              </Card>\n            </div>\n      {/* Update Record */}\n       <Modal title=\"Update State\"\n       key=\"ssd\"\n        visible={ushow}\n        onOk={() => SingleSubmit()}\n        onCancel={() =>SingleClose()}>\n            <Form>\n                <Input type=\"hidden\" name=\"_id\" value={obj._id} onChange={(e) => HandleChange(e, \"_id\")} placeholder=\"Enter state name ...\" />\n                <Form.Item label=\"Enter State Name:-\"\n                hasFeedback\n                validateStatus={(error.state_nameError)?\"error\":\"success\"}\n                help={error.state_nameError}>                  \n                    <Input type=\"text\" style={{ backgroundColor: \"#e2e2e2\", color: \"#463334\" }} name=\"state_name\" value={obj.state_name} onChange={(e) => HandleChange(e, \"state_name\")} placeholder=\"Enter state name ...\" />\n                </Form.Item>\n            </Form>\n      </Modal>\n\n      {/* Delete Record  */}\n       <Modal title=\"Are you sure!\"\n       key=\"sdsfd\"\n        visible={show}\n        onOk={() => deleteHandler(ids)}\n        onCancel={() =>handleClose()}>\n              Do you want to delete this state?\n      </Modal> \n    </>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  err: state.stateReducer.error,\n  Loading: state.stateReducer.loading,\n  states: state.stateReducer.states,\n  singlestate: state.stateReducer.singlestate,\n})\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchstatedata: () => dispatch(fetchstatedata()),\n    deletestatedata: (_id) => dispatch(deletestatedata(_id)),\n    updatestatedata: (postdata, put) => dispatch(updatestatedata(postdata, put)),\n    singlestateDataFetch: (id) => dispatch(singlestateDataFetch(id))\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(StateList);\n","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\common\\Header.js",["737","738","739","740","741","742","743"],"import React, { useState, useEffect } from 'react';\nimport { logout } from '../../store/action/userAction';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Logo from '../../Movie_logo/logo1.png'\nimport { Layout, Menu, Dropdown, Modal, Form, Input } from 'antd';\nimport 'antd/dist/antd.css';\nimport { changepassword } from '../../store/action/userAction';\n\nimport {\n  HomeOutlined, AntDesignOutlined,\n  MenuUnfoldOutlined,\n  MenuFoldOutlined,\n  UserOutlined,\n  DribbbleOutlined, LockOutlined, LogoutOutlined,\n  SlackSquareOutlined, WeiboSquareOutlined,\n  AlibabaOutlined, QqOutlined\n} from '@ant-design/icons';\n\nconst { Header, Sider } = Layout;\nconst { SubMenu } = Menu;\n\nconst SiderDemo = (props) => {\n\n  const [active, setActive] = useState(false);\n\n  const [error, setError] = useState({\n    IsValid: true,\n    confirmError: \"\",\n    newError: \"\",\n    passwordError: \"\"\n  });\n  const [show, setShow] = useState(false);\n\n  useEffect(() => {\n    if (props.err.length != 0) {\n      setError({\n        passwordError: props.err,\n      })\n      setActive(true);\n      console.log(active);\n    }\n  }, [props.err])\n\n  const [obj, setMyObj1] = useState({\n    password: \"\",\n    new_password: \"\",\n    confirm_password: \"\"\n  });\n\n  const handleClose = () => {\n    setShow(false);\n  }\n  const handleShow = async () => {\n    setShow(true);\n  }\n\n  const changePassword = async () => {\n    let errors = { ...error, IsValid: true };\n    if (!obj.new_password || !obj.password || !obj.confirm_password) {\n      errors.confirmError = \"\";\n      errors.newError = \"\";\n      errors.passwordError = \"\";\n      if (!obj.new_password) {\n        errors.IsValid = false;\n        errors.newError = \"Please enter new password !!\"\n      }\n      if (!obj.password) {\n        errors.IsValid = false;\n        errors.passwordError = \"Please enter old password !!\"\n      }\n      if (!obj.confirm_password) {\n        errors.IsValid = false;\n        errors.confirmError = \"Please enter confirm password !!\"\n      }\n    } else if (obj.new_password != obj.confirm_password) {\n      errors.newError = \"\";\n      errors.passwordError = \"\";\n      if (obj.new_password != obj.confirm_password) {\n        errors.IsValid = false;\n        errors.confirmError = \"Confirm Password Is Not Matched\"\n      }\n    } else {\n      errors.confirmError = \"\";\n      errors.newError = \"\";\n      errors.passwordError = \"\";\n      errors.IsValid = true;\n    }\n    setError(errors);\n    if (errors.IsValid == true) {\n      try {\n        await props.changepassword(obj.password, obj.new_password);\n        setShow(false);\n      } catch {\n\n      }\n    }\n  }\n\n  const HandleChange = (e, name) => {\n    let olddata = { ...obj };\n    olddata[name] = e.target.value;\n    setMyObj1(olddata);\n  }\n\n  const HandleLogOut = async () => {\n    await props.logout();\n  }\n  const [collapsed, setCollapsed] = useState(false);\n\n  const toggle = () => {\n    setCollapsed(!collapsed);\n  };\n\n  const userMenu = (\n    <Menu>\n      <Menu.Item key=\"admin\"><h4><UserOutlined /> Welcome, Admin</h4></Menu.Item>\n      <Menu.Item key=\"/admin/changepassword\" onClick={() => handleShow()}><LockOutlined />Change Password</Menu.Item>\n      <Menu.Divider />\n      <Menu.Item key=\"/admin/logout\" onClick={() => HandleLogOut()}><LogoutOutlined />Logout</Menu.Item>\n    </Menu>\n  );\n  return (\n    <Layout style={{ minHeight: \"100vh\" }}>\n      <Sider trigger={null} collapsible collapsed={collapsed}>\n        <div className=\"logo\"><img src={Logo} style={{ height: \"60px\", width: \"60px\", marginLeft: \"05px\" }} /></div>\n        <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']} style={{ color: \"white\", fontFamily: \"auto\", textTransform: \"uppercase\" }}>\n          <Menu.Item key=\"/dashboard\" icon={<HomeOutlined />} style={{ color: \"white\", fontFamily: \"auto\", textTransform: \"uppercase\" }}>\n            <Link to=\"/dashboard\">Dashboard</Link>\n          </Menu.Item>\n          <SubMenu key=\"sub1\" icon={<AntDesignOutlined />} title=\"State\" style={{ color: \"white\", fontFamily: \"auto\", textTransform: \"uppercase\" }}>\n            <Menu.Item key=\"/state/stateAdd\"><Link to=\"/state/stateAdd\">Add State</Link></Menu.Item>\n            <Menu.Item key=\"/state\"><Link to=\"/state\">View State</Link></Menu.Item>\n          </SubMenu>\n          <SubMenu key=\"sub2\" icon={<QqOutlined />} title=\"City\" style={{ color: \"white\", fontFamily: \"auto\", textTransform: \"uppercase\" }}>\n            <Menu.Item key=\"/city/cityAdd\"><Link to=\"/city/cityAdd\">Add City</Link></Menu.Item>\n            <Menu.Item key=\"/city\"><Link to=\"/city\">View City</Link></Menu.Item>\n          </SubMenu>\n          <SubMenu key=\"sub3\" icon={<DribbbleOutlined />} title=\"Movie\" style={{ color: \"white\", fontFamily: \"auto\", textTransform: \"uppercase\" }}>\n            <Menu.Item key=\"/movie/movieAdd\"><Link to=\"/movie/movieAdd\">Add Movie</Link></Menu.Item>\n            <Menu.Item key=\"/movie\"><Link to=\"/movie\">View Movies</Link></Menu.Item>\n          </SubMenu>\n          <SubMenu key=\"sub4\" icon={<AlibabaOutlined />} title=\"User/Theater\" style={{ color: \"white\", fontFamily: \"auto\", textTransform: \"uppercase\" }}>\n            <Menu.Item key=\"/users\"><Link to=\"/users\">View Users</Link></Menu.Item>\n            <Menu.Item key=\"/theaters\"><Link to=\"/theaters\">View Theater</Link></Menu.Item>\n          </SubMenu>\n          <SubMenu key=\"sub5\" icon={<SlackSquareOutlined />} title=\"MovieReview\" style={{ color: \"white\", fontFamily: \"auto\", textTransform: \"uppercase\" }}>\n            <Menu.Item key=\"/review\"><Link to=\"/review\">Movie View</Link></Menu.Item>\n          </SubMenu>\n        </Menu>\n      </Sider>\n\n      <Layout className=\"site-layout\">\n        <Header className=\"site-layout-background\" style={{ padding: 0, color: \"white\" }}>\n          {React.createElement(collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\n            className: 'trigger',\n            onClick: toggle, color: \"red\"\n          })}\n          <Dropdown.Button\n            style={{ float: 'right', marginTop: \"20px\", marginRight: \"13px\" }}\n            overlay={userMenu}\n            icon={\n              <UserOutlined\n                style={{\n                  marginTop: \"-3px\",\n                  fontSize: '28px',\n                  backgroundColor: '#f0f0f0',\n                  borderRadius: '50%',\n                }}\n              />\n            }\n          ></Dropdown.Button>;\n          </Header>\n        {props.content}\n      </Layout>\n      <Modal title=\"Are you sure!\"\n        visible={show}\n        onOk={() => changePassword()}\n        onCancel={() => handleClose()}>\n\n        <Form>\n          <Form.Item label=\"Enter Old Password:-\"\n            hasFeedback\n            style={{ marginLeft: \"30px\" }}\n            validateStatus={(error.passwordError) ? \"error\" : \"success\"}\n            help={error.passwordError}>\n            <Input type=\"password\" style={{ backgroundColor: \"#e2e2e2\", color: \"#463334\" }} name=\"password\" onChange={(e) => HandleChange(e, \"password\")} placeholder=\"Enter old password ...\" />\n          </Form.Item>\n          <Form.Item label=\"Enter New Password:-\"\n            hasFeedback\n            style={{ marginLeft: \"24px\" }}\n            validateStatus={(error.newError) ? \"error\" : \"success\"}\n            help={error.newError}>\n            <Input type=\"password\" style={{ backgroundColor: \"#e2e2e2\", color: \"#463334\" }} name=\"new_password\" onChange={(e) => HandleChange(e, \"new_password\")} placeholder=\"Enter New password ...\" />\n          </Form.Item>\n          <Form.Item label=\"Enter Confirm Password:-       \"\n            hasFeedback\n            style={{ marginLeft: \"4px\" }}\n            validateStatus={(error.confirmError) ? \"error\" : \"success\"}\n            help={error.confirmError}>\n            <Input type=\"password\" style={{ backgroundColor: \"#e2e2e2\", color: \"#463334\" }} name=\"confirm_password\" onChange={(e) => HandleChange(e, \"confirm_password\")} placeholder=\"Enter Confirm password ...\" />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </Layout>\n\n  );\n}\nconst mapStateToProps = (state) => ({\n  err: state.userReducer.error1,\n  Loading: state.userReducer.loading,\n  singleuser2: state.userReducer.singleuser2,\n})\nconst mapDispatchToProps = dispatch => {\n  return {\n    logout: () => dispatch(logout()),\n    changepassword: (pass, newpass) => dispatch(changepassword(pass, newpass))\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(SiderDemo);","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\common\\HeaderTheater.js",["744","745","746","747","748","749","750","751","752","753"],"import React,{useState,useEffect} from 'react';\nimport {Link} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport { Layout, Menu,Dropdown,Modal,Form,Input,Breadcrumb } from 'antd';\nimport { logout} from '../../store/action/userAction';\nimport {changepassword} from '../../store/action/userAction';\nimport {\n  HomeOutlined,\n  UserOutlined,\n  LockOutlined,\n  LogoutOutlined,\n  AlibabaOutlined,\n  QqOutlined\n} from '@ant-design/icons';\nimport Logo from '../../Movie_logo/logo1.png'\n\nconst { Header, Content, Footer, Sider } = Layout;\nconst { SubMenu } = Menu;\n\nconst TheaterHeader = (props) => {\n\n  \n  const [active,setActive] =useState(false);\n    \n      const [error,setError] =useState({\n        IsValid:true,        \n        confirmError:\"\",\n        newError:\"\",\n        passwordError:\"\"\n      });\n      const [show, setShow] = useState(false);\n\n      useEffect(() =>{\n        if(props.err.length!=0)\n        {\n          setError({\n            passwordError:props.err,\n          })\n          setActive(true);\n          console.log(active);\n        }\n      },[props.err])\n\n      const [obj,setMyObj1] =useState({\n        password:\"\",\n        new_password:\"\",\n        confirm_password:\"\"\n      });      \n      \n      const handleClose = () => {\n        setShow(false);\n      }\n      const handleShow = async () => {\n        setShow(true);\n      }\n      \n      const changePassword = async()=>{\n          let errors = { ...error, IsValid : true };\n            if(!obj.new_password || !obj.password || !obj.confirm_password ){\n              errors.confirmError = \"\";\n              errors.newError = \"\";\n              errors.passwordError = \"\";\n              if(!obj.new_password){\n                errors.IsValid = false;\n                errors.newError = \"Please enter new password !!\"\n              }\n              if(!obj.password){\n                errors.IsValid = false;\n                errors.passwordError = \"Please enter old password !!\"\n              }\n              if(!obj.confirm_password){\n                errors.IsValid = false;\n                errors.confirmError = \"Please enter confirm password !!\"\n              }\n            }else if(obj.new_password!=obj.confirm_password){\n                    errors.newError = \"\";\n                    errors.passwordError = \"\";\n                  if(obj.new_password!=obj.confirm_password){\n                    errors.IsValid = false;\n                    errors.confirmError = \"Confirm Password Is Not Matched\"\n                  }\n            }else{\n              errors.confirmError = \"\";\n              errors.newError = \"\";\n              errors.passwordError = \"\";\n              errors.IsValid=true;\n            }\n            setError(errors);\n            if(errors.IsValid==true){\n              try {\n                await props.changepassword(obj.password,obj.new_password);\n                setShow(false);\n              } catch {\n\n              }\n            }   \n      }\n      \n      const HandleChange = (e, name) => {\n        let olddata = { ...obj };\n        olddata[name] = e.target.value;    \n        setMyObj1(olddata);\n      }\n\n      const HandleLogOut = async () =>{\n        await props.logout();\n      }\n      const[collapsed,setCollapsed] = useState(false);\n\n    const onCollapse=() =>{\n        if(collapsed==true){\n            setCollapsed(false);\n        }else{\n            setCollapsed(true);\n        }\n    }\n\n    const userMenu = (\n      <Menu>\n        <Menu.Item key=\"admin\"><h4><UserOutlined /> Welcome, Admin</h4></Menu.Item>  \n        <Menu.Item key=\"/theater/changepassword\" onClick={() => handleShow()}><LockOutlined />Change Password</Menu.Item>\n        <Menu.Divider />\n        <Menu.Item key=\"/theater/logout\" onClick={() => HandleLogOut()}><LogoutOutlined />Logout</Menu.Item>\n      </Menu>\n    );\n\n    return (\n        <Layout style={{ minHeight: '100vh',backgroundColor:\"#287688\" }}>\n        <Sider collapsible collapsed={collapsed} onCollapse={()=>onCollapse()} style={{backgroundColor:\"#800000\"}}>\n          <div className=\"logo\" /><img src={Logo} height=\"80px\" width=\"50px\"></img>\n          <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\" style={{backgroundColor:\"#800000\",color:\"white\",fontFamily:\"auto\",textTransform:\"uppercase\"}}>\n            <Menu.Item key=\"/theater/dashboard\"  icon={<HomeOutlined />} >\n                <Link to=\"/theater/dashboard\">Dashboard</Link>\n            </Menu.Item>\n            <SubMenu key=\"Screen\" icon={<UserOutlined />} title=\"Screen\">\n              <Menu.Item key=\"4\"><Link to=\"/theater/addScreen\">Add Scrren</Link></Menu.Item>\n              <Menu.Item key=\"3\"><Link to=\"/theater/screenList\">View Screen</Link></Menu.Item>\n            </SubMenu>\n            <SubMenu key=\"sub2\" icon={<AlibabaOutlined />} title=\"Theater Screen\">\n              <Menu.Item key=\"6\"><Link to=\"/theater/addtscreen\">Add Theater Screen</Link></Menu.Item>\n              <Menu.Item key=\"8\"><Link to=\"/theater/tscreenList\">View Theater Screen</Link></Menu.Item>\n            </SubMenu>\n            <SubMenu key=\"sub3\" icon={<AlibabaOutlined />} title=\"Booking Details\">\n              <Menu.Item key=\"9\"><Link to=\"/theater/bookingdetail\">View Booking Details</Link></Menu.Item>\n            </SubMenu>\n          </Menu>\n        </Sider>\n        <Layout className=\"site-layout\">\n          <Header className=\"site-layout-background\" style={{ padding: 0,backgroundColor:\" #002140\" }} >\n          <Dropdown.Button\n                style={{ float: 'right',marginTop: \"20px\", marginRight: \"13px\" }}\n                overlay={userMenu}\n                icon={\n                  <UserOutlined\n                  style={{\n                    marginTop: \"-3px\",\n                    fontSize: '28px',\n                    backgroundColor: '#f0f0f0',\n                    borderRadius: '50%',\n                  }}\n                  />\n                }\n                ></Dropdown.Button>\n          </Header>\n          {props.content};\n          <Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>\n        </Layout>\n        <Modal title=\"CHANGE PASSWORD\"\n              visible={show}\n              onOk={() => changePassword()}\n              onCancel={() => handleClose()}>\n                  <Form>\n                    <Form.Item label=\"Enter Old Password:-\"\n                        hasFeedback\n                        style={{    marginLeft:\"30px\"}}\n                        validateStatus={(error.passwordError)?\"error\":\"success\"}\n                        help={error.passwordError}>                  \n                          <Input type=\"password\" style={{ backgroundColor: \"#e2e2e2\", color: \"#463334\" }} name=\"password\"  onChange={(e) => HandleChange(e, \"password\")} placeholder=\"Enter old password ...\" />\n                        </Form.Item>\n                    <Form.Item label=\"Enter New Password:-\"\n                        hasFeedback\n                        style={{    marginLeft:\"24px\"}}\n                        validateStatus={(error.newError)?\"error\":\"success\"}\n                        help={error.newError}>                  \n                        <Input type=\"password\" style={{ backgroundColor: \"#e2e2e2\", color: \"#463334\" }} name=\"new_password\"  onChange={(e) => HandleChange(e, \"new_password\")} placeholder=\"Enter New password ...\" />\n                    </Form.Item>\n                    <Form.Item label=\"Enter Confirm Password:-       \"\n                        hasFeedback\n                        style={{    marginLeft:\"4px\"}}\n                        validateStatus={(error.confirmError)?\"error\":\"success\"}\n                        help={error.confirmError}>                  \n                        <Input type=\"password\" style={{ backgroundColor: \"#e2e2e2\", color: \"#463334\" }} name=\"confirm_password\"  onChange={(e) => HandleChange(e, \"confirm_password\")} placeholder=\"Enter Confirm password ...\" />\n                    </Form.Item>\n                </Form>\n              </Modal>\n      </Layout>\n        );\n}\n\nconst mapStateToProps = (state) => ({\n  err: state.userReducer.error1,\n  Loading: state.userReducer.loading,\n  singleuser2: state.userReducer.singleuser2,\n})\nconst mapDispatchToProps = dispatch =>{\n  return{\n    logout:()=>dispatch(logout()),\n    changepassword:(pass,newpass)=> dispatch(changepassword(pass,newpass))\n  }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(TheaterHeader);","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\City_All_Form\\addForm.js",["754","755","756","757","758","759","760","761","762","763","764","765","766","767","768"],"import React,{useState,useEffect} from 'react';\n// import Form from 'react-bootstrap/Form';\nimport {Row,Col,Modal,CardGroup} from 'react-bootstrap';\n// import Card from 'react-bootstrap/Card';\n// import Button from 'react-bootstrap/Button'/;\nimport {addcitiesdata} from '../../store/action/cityAction';\nimport {fetchstatedata} from '../../store/action/stateAction';\nimport {connect} from 'react-redux';\nimport { Breadcrumb,Card,Select,Space } from 'antd';\nimport {\n  Form,\n  Input,\n  Button\n} from 'antd';\nconst {Option} = Select;\n\nconst formItemLayout = {\n  labelCol: {\n    span: 4,\n  },\n  wrapperCol: {\n    span: 8,\n  },\n};\nconst formTailLayout = {\n  labelCol: {\n    span: 4,\n  },\n  wrapperCol: {\n    span: 8,\n    offset: 4,\n  },\n};\n\nconst AddForm = (props) => {\n  const [form] = Form.useForm();\n    const [obj,setMyObj]= useState({\n      city_name:\"\",\n      state_id:\"\"\n    })\n    const [error,setError]=useState({\n        city_nameError:\"\",\n        isValid:false\n    });\n    \nconst [show, setShow] = useState(false);\nconst [ids,setIds] = useState(\"\");\n\nconst handleClose = () => setShow(false);\nconst handleShow = (id) => {setShow(true);\n  setIds(id);\n}\n\nconst deleteHandler = async (id) =>{\n    await props.deletestatedata(id);\n    setShow(false);\n  }\n    useEffect(()=>{\n      form.validateFields(['nickname']);\n        props.fetchstatedata();\n      // console.log(props.states);\n    },[props.fetchstatedata])\n    \n    const handleSubmit = async () =>{\n      try {\n        const values = await form.validateFields();\n        // console.log('Success:', values);\n        await props.addcitiesdata(obj);\n        props.history.replace(\"/city\");\n        obj.city_name=\"\";\n      } catch (errorInfo) {\n        console.log('Failed:', errorInfo);\n      }\n    }\n  \n\n    const HandleChange = (e,name) =>{\n      let olddata = {...obj};\n      if(name!=\"state_id\"){\n        olddata[name] = e.target.value;\n        }else{\n          olddata[name] = e;\n        }\n       setMyObj(olddata);\n    }\n\n    const optionTemplate = () => {\n      return props.states.map((stateslist) => {\n      const { _id, state_name } = stateslist;\n      return (\n          <Option value={_id} key={_id}>{state_name}</Option>\n       )\n      })    \n    }\n  return (\n\n    <>\n     <div className={\"Title\"} style={{marginTop: \"-29px\" }}>\n          </div>\n          <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"30px\",fontFamily:\"auto\",textTransform:\"uppercase\"  }}>\n              <Breadcrumb.Item>Home</Breadcrumb.Item>\n              <Breadcrumb.Item>City</Breadcrumb.Item>\n              <Breadcrumb.Item>Add City</Breadcrumb.Item>\n          </Breadcrumb>\n            <div className=\"site-card-border-less-wrapper\">\n              <Card title=\"Add City Form\" bordered={false} style={{ width: \"auto\" }}>\n                      <Form form={form} name=\"AddForm\">\n                      <Form.Item {...formItemLayout} label=\"Enter City Name:-\" name=\"city_name\" rules={[{ required: true, message: 'Please required City!' }]}>\n                              <Input type=\"text\" name=\"city_name\" onChange={(e)=>{HandleChange(e,\"city_name\")}} placeholder=\"Enter city name ...\" style={{maxWidth : \"300px\"}}/>\n                          </Form.Item>\n                          <Form.Item {...formItemLayout} label=\"Select State :-\" name=\"state_id\" rules={[{ required: true, message: 'Please required State!' }]}>\n                                <Select name=\"state_id\" onChange={(e)=>HandleChange(e,\"state_id\")} placeholder=\"------ Select State-----\" allowClear>\n                                      {optionTemplate()}\n                                  </Select>\n                          </Form.Item>\n                           <Form.Item {...formTailLayout} label=\"\"> \n                                <Button type=\"primary\" onClick={(e) =>handleSubmit()}>Add City</Button>\n                          </Form.Item> \n                      </Form>\n              </Card>\n            </div>\n    \n    </>\n  );\n}\nconst mapStateToProps =  (state) => ({\n    err:state.stateReducer.error,\n    states:state.stateReducer.states,\n  })\n\nconst mapDispatchToProps = dispatch =>{\n  return{\n    fetchstatedata:()=>dispatch(fetchstatedata()),\n    addcitiesdata: (postdata) => dispatch(addcitiesdata(postdata))\n  }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(AddForm);\n","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\City_All_Form\\cityList.js",["769","770","771","772"],"import React, { useState, useEffect } from 'react';\nimport { fetchcitiesdata, deletecitiesdata, updatecitiesdata, singlecitiesDataFetch } from '../../store/action/cityAction';\nimport { fetchstatedata } from '../../store/action/stateAction';\nimport { connect } from 'react-redux';\nimport '../state.css';\nimport { Table, Space, Button, Breadcrumb, Card, Form, Modal, Input, Select } from 'antd';\n\nconst formItemLayout = {\n  labelCol: {\n    span: 8,\n  },\n  wrapperCol: {\n    span: 10,\n  },\n};\n\nconst CityList = (props) => {\n  const { Option } = Select;\n  const [form] = Form.useForm();\n  const [error,setError] = useState({\n    state_nameError:'',\n    IsValid:false,\n    city_nameError:\"\"\n})\n  const [obj, setMyObj1] = useState({\n    _id: \"\",\n    city_name: \"\",\n    state_id: \"\"\n  })\n  const [op,setOp] = useState(true);\n  const [ids, setIds] = useState(\"\");\n  const [show, setShow] = useState(false);\n  const [ushow, usetShow] = useState(false);\n\n  useEffect(() => {\n    props.fetchcitiesdata();\n    props.fetchstatedata();\n    if (props.singlecities.city_name) {\n      console.log(props.singlecities.city_name)\n      let olddata={...obj};\n      olddata.city_name = props.singlecities.city_name;\n      olddata._id = props.singlecities._id;\n      olddata.state_id=props.singlecities.state_id;\n      setMyObj1(olddata);\n    }\n  }, [props.fetchcitiesdata, props.fetchstatedata,props.singlecities])\n\n  const deleteHandler = async (id) => {\n    await props.deletecitiesdata(id);\n    setShow(false);\n  }\n\n  const SingleSubmit = async () => {\n    let errors = { ...error, IsValid : true };\n    if(!obj.state_id || obj.state_id === \"\" || !obj.city_name || obj.city_name === \"\")\n    {\n      if(!obj.state_id || obj.state_id === \"\"){\n        errors.IsValid = false;\n        errors.state_nameError = \"StateName Is Required \"\n      }\n      if(!obj.city_name || obj.city_name === \"\"){\n        errors.IsValid = false;\n        errors.city_nameError = \"cityname Is Required \"\n      }\n\n    }else{\n        errors.state_nameError = \"\"\n        errors.city_nameError = \"\"\n    }\n      setError(errors);\n      if(errors.IsValid==true){\n        await props.updatecitiesdata(obj._id, obj);\n        setOp(true);\n        usetShow(false);\n        obj._id = props.singlecities._id;\n        obj.city_name = \"\";\n      }\n    \n  }\n\n  const handleClose = () => setShow(false);\n  const handleShow = (id) => {\n    setOp(true);\n    setShow(true);\n    setIds(id);\n  }\n\n  const SingleClose = () => {\n    setOp(true);\n    obj.city_name = \"\";\n    props.singlecities.city_name = \"\";\n    usetShow(false)\n  };\n\n  // if (props.singlecities.city_name && !obj.city_name) {\n  //   if(op!=false){\n  //     console.log(op);\n  //     setMyObj1(props.singlecities)\n  //   }\n  // }\n  const handleUpdate = async (_id) => {\n    await props.singlecitiesDataFetch(_id);\n    usetShow(true);\n  }\n\n  const columns = [\n    {\n      title: 'city_Name',\n      dataIndex: 'city_name',\n      key: 'city_name',\n      defaultSortOrder: 'descend',\n      sorter: (a, b) => a.city_name.length - b.city_name.length,\n    }, {\n      title: 'state_name',\n      key: 'state_id',\n      defaultSortOrder: 'descend',\n      render: s => s.state_id.state_name,\n      sorter: (a, b) => a.state_id.state_name.length - b.state_id.state_name.length,\n    }, {\n      title: 'Update',\n      key: 'Update',\n      render: (text, record) => (\n        <Space size=\"middle\">\n          <Button onClick={() => handleUpdate(record._id)} type=\"primary\">UPDATE</Button>\n        </Space>\n      ),\n    }, {\n      title: 'Delete',\n      key: 'Delete',\n      render: (text, record) => (\n        <Space size=\"middle\">\n          <Button type=\"danger\" onClick={() => handleShow(record._id)} style={{ backgroundColor: \"Red\", borderBlockColor: \"Black\", color: \"White\" }}>Delete</Button>\n        </Space>\n      ),\n    }\n  ];\n\n  const HandleChange = (e, name) => {\n    let olddata = { ...obj };\n    if (name != \"state_id\") {\n      olddata[name] = e.target.value;\n    } else {\n      olddata[name] = e;\n    }\n    setOp(false);\n    setMyObj1(olddata);\n  }\n\n  const optionTemplate = () => {\n    return props.states.map((stateslist) => {\n      const { _id, state_name } = stateslist;\n      return (\n        <Option value={_id} key={_id}>{state_name}</Option>\n      )\n    })\n  }\n  return (\n    <>\n      <div className={\"Title\"} style={{ marginTop: \"-29px\"}}>\n        {/* City List */}\n          </div>\n      <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"29px\",fontFamily:\"auto\",textTransform:\"uppercase\" }}>\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\n        <Breadcrumb.Item>City</Breadcrumb.Item>\n        <Breadcrumb.Item>View City List</Breadcrumb.Item>\n      </Breadcrumb>\n      <div className=\"site-card-border-less-wrapper\">\n        <Card title=\"View City List\" bordered={true} style={{ width: \"auto\",border:\"5px\" }}>\n          <Table columns={columns} dataSource={props.cities} pagination={{ pageSize: 4 }} />\n        </Card>\n      </div>\n      {/* Update Record */}\n      <Modal title=\"Update State\"\n        visible={ushow}\n        onOk={() => SingleSubmit()}\n        onCancel={() => SingleClose()}>\n        <Form form={form} name=\"CityList\">\n          <Input type=\"hidden\" name=\"_id\" value={obj._id} onChange={(e) => HandleChange(e, \"_id\")} />\n          <Form.Item {...formItemLayout} label=\"Enter City Name:-\" \n                hasFeedback\n                validateStatus={(error.city_nameError)?\"error\":\"success\"}\n                help={error.city_nameError}>\n            <Input type=\"text\" name=\"city_name\" value={obj.city_name || \" \"} onChange={(e) => { HandleChange(e, \"city_name\") }} placeholder=\"Enter city name ...\" />\n          </Form.Item>\n          <Form.Item {...formItemLayout} label=\"Select State :-\" \n                hasFeedback\n                validateStatus={(error.state_nameError)?\"error\":\"success\"}\n                help={error.state_nameError}>\n            <Select name=\"state_id\" value={obj.state_id} onChange={(e) => HandleChange(e, \"state_id\")} placeholder=\"------ Select State-----\">\n              {optionTemplate()}\n            </Select>\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* Delete Record  */}\n      <Modal title=\"Are you sure!\"\n        visible={show}\n        onOk={() => deleteHandler(ids)}\n        onCancel={() => handleClose()}>\n        Do you want to delete this state?\n      </Modal>\n    </>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  err: state.cityReducer.error,\n  cities: state.cityReducer.cities,\n  states: state.stateReducer.states,\n  singlecities: state.cityReducer.singlecities\n})\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchstatedata: () => dispatch(fetchstatedata()),\n    fetchcitiesdata: () => dispatch(fetchcitiesdata()),\n    deletecitiesdata: (_id) => dispatch(deletecitiesdata(_id)),\n    updatecitiesdata: (postdata, put) => dispatch(updatecitiesdata(postdata, put)),\n    singlecitiesDataFetch: (id) => dispatch(singlecitiesDataFetch(id))\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(CityList);\n","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\Users_Theater_List\\allUsersList.js",["773","774","775","776","777"],"import React,{useEffect,useState} from 'react';\nimport {getAllUser,fetchProfile,updateProfile} from '../../store/action/userAction';\nimport {connect} from 'react-redux';\nimport '../state.css';\nimport { Table, Breadcrumb, Card,Space,Button,Modal } from 'antd';\nconst AllUsersList = (props) => {\n  \n  const [show, setShow] = useState(false);\n  const [ids, setIds] = useState(false);  \n  useEffect(()=>{  \n      props.getAllUser();\n    },[props.getAllUser,props.singleuser1])\n\n  const [obj,setMyObj] = useState({\n    user_name:\"\",\n    password:\"\",\n    email:\"\",\n    gender:\"Male\",\n    photo1:\"\",\n    state_id:\"\",\n    city_id:\"\",\n    group_id:\"\",\n    is_active:\"\"\n  });\n  if(ids==true){\n        setIds(false);\n  }\n\n  if (obj.user_name!=\"\"){\n  }\n  const deleteHandler = async (id) => {\n    if(props.singleuser1.user_name){\n        let olddata={...obj};\n        olddata._id=props.singleuser1._id;\n        olddata.user_name = props.singleuser1.user_name;\n        olddata.password = props.singleuser1.password;\n        olddata.email = props.singleuser1.email;\n        olddata.gender = props.singleuser1.gender;\n        olddata.state_id = props.singleuser1.state_id;\n        olddata.photo1 = props.singleuser1.photo1;\n        olddata.city_id = props.singleuser1.city_id;\n        olddata.group_id = props.singleuser1.group_id;\n            if(props.singleuser1.is_active==\"1\"){ \n              olddata.is_active = \"0\";\n            }else{\n              olddata.is_active = \"1\";\n            }\n            setMyObj(olddata);\n            console.log(olddata);\n            props.updateProfile(olddata._id,olddata);\n    }\n    setShow(false);\n  }\n\n\n  const handleClose = () => setShow(false);\n  const handleShow = async (id) => {\n    await props.fetchProfile(id);\n    setShow(true);\n    setIds(id);\n  }\n\nconst columns = [\n  {\n    title: () => <b>Index</b>,\n    key: 'Index',\n    fixed:\"left\",\n    render : (text, record, index) => index+1,\n  },{\n    title: () => <b>User Name</b>,\n    dataIndex: 'user_name',\n    key: 'user_name',\n    defaultSortOrder: 'descend',\n    fixed:\"left\",\n    sorter: (a, b) => a.user_name.length - b.user_name.length,\n  },{\n    title: () => <b>Email</b>,\n    dataIndex: 'email',\n    key: 'email',\n    defaultSortOrder: 'descend',\n    sorter: (a, b) => a.email.length - b.email.length,\n  },{\n    title: () => <b>Gender</b>,\n    dataIndex: 'gender',\n    key: 'gender',\n    defaultSortOrder: 'descend',\n    sorter: (a, b) => a.gender.length - b.gender.length,\n  },{\n      title: () => <b>City Name</b>,\n      key: 'city_id',\n      defaultSortOrder: 'descend',\n      render: s => s.city_id.city_name,\n      sorter: (a, b) => a.city_id.city_name.length - b.city_id.city_name.length,\n},{\n    title: () => <b>State Name</b>,\n    key: 'state_id',\n    defaultSortOrder: 'descend',\n    render: s => s.state_id.state_name,\n    sorter: (a, b) => a.state_id.state_name.length - b.state_id.state_name.length,\n  },{\n    title: () => <b>Status</b>,\n    key: 'is_active',\n    defaultSortOrder: 'descend',\n    // render: ,\n    render: (text, record) => (\n      <Space size=\"middle\">\n        {record.is_active==\"1\"?<Button type='danger' onClick={() => handleShow(record._id)} style={{ backgroundColor: '#005f00', borderBlockColor: 'Black', color: 'White' }}>Active</Button>:<Button type='danger' onClick={() => handleShow(record._id)} style={{ backgroundColor: '#820000', borderBlockColor: 'Black', color: 'White' }}>Block</Button>}\n        {/* <Button type=\"danger\" onClick={() => handleShow(record._id)} style={{ backgroundColor: \"Green\", borderBlockColor: \"Black\", color: \"White\" }}>{record.is_active==\"1\"?\"Active\":\"Block\"}</Button> */}\n      </Space>\n    ),\n  }\n];\n\n  return (\n    <>\n      <div className={\"Title\"} style={{ marginTop: \"-29px\"}}>\n          </div>\n      <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"29px\",fontFamily:\"auto\",textTransform:\"uppercase\"  }}>\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\n        <Breadcrumb.Item>All User</Breadcrumb.Item>\n        <Breadcrumb.Item>View Users List</Breadcrumb.Item>\n      </Breadcrumb>\n      <div className=\"site-card-border-less-wrapper\">\n        <Card title=\"View Users List\" bordered={true} style={{ width: \"auto\",border:\"5px\" }}>\n          <Table columns={columns} dataSource={props.users} pagination={{ pageSize: 4 }} />\n        </Card>\n      </div>\n\n      <Modal title=\"Are you sure!\"\n        visible={show}\n        onOk={() => deleteHandler(ids)}\n        onCancel={() => handleClose()}>\n        Do you want to change this state?\n      </Modal>\n    </>\n  );\n}\n\nconst mapStateToProps =  (state) => ({\n  err:state.movieReducer.error,\n  users:state.userReducer.users,\n  singleuser1:state.userReducer.singleuser1\n})\n\nconst mapDispatchToProps = dispatch =>{\n  return{\n    updateProfile:(_id,put)=>dispatch(updateProfile(_id,put)),\n    fetchProfile:(_id)=>dispatch(fetchProfile(_id)),\n    getAllUser:()=>dispatch(getAllUser())\n  }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(AllUsersList);","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\Users_Theater_List\\allTheaterList.js",["778","779","780","781"],"import React,{useEffect,useState} from 'react';\nimport {getAllTheater,fetchProfile,updateProfile} from '../../store/action/userAction';\nimport {connect} from 'react-redux';\nimport '../state.css';\nimport { Table, Breadcrumb, Card,Space,Button,Modal } from 'antd';\nconst AllUsersList = (props) => {\n  \n  const [show, setShow] = useState(false);\n  const [ids, setIds] = useState(false);  \n  useEffect(()=>{  \n      props.getAllTheater();\n    },[props.getAllTheater,props.singleuser1])\n\n  const [obj,setMyObj] = useState({\n    user_name:\"\",\n    password:\"\",\n    email:\"\",\n    gender:\"Male\",\n    photo1:\"\",\n    state_id:\"\",\n    city_id:\"\",\n    group_id:\"\",\n    is_active:\"\"\n  });\n  if(ids==true){\n        setIds(false);\n  }\n\n  const deleteHandler = async (id) => {\n    if(props.singleuser1.user_name){\n        let olddata={...obj};\n        olddata._id=props.singleuser1._id;\n        olddata.user_name = props.singleuser1.user_name;\n        olddata.cinema_name = props.singleuser1.cinema_name;\n        olddata.password = props.singleuser1.password;\n        olddata.email = props.singleuser1.email;\n        olddata.gender = props.singleuser1.gender;\n        olddata.state_id = props.singleuser1.state_id;\n        olddata.photo1 = props.singleuser1.photo1;\n        olddata.city_id = props.singleuser1.city_id;\n        olddata.group_id = props.singleuser1.group_id;\n            if(props.singleuser1.is_active==\"1\"){ \n              olddata.is_active = \"0\";\n            }else{\n              olddata.is_active = \"1\";\n            }\n            setMyObj(olddata);\n            console.log(olddata);\n            props.updateProfile(olddata._id,olddata);\n    }\n    setShow(false);\n  }\n\n\n  const handleClose = () => setShow(false);\n  const handleShow = async (id) => {\n    await props.fetchProfile(id);\n    setShow(true);\n    setIds(id);\n  }\n\nconst columns = [\n  {\n    title: () => <b>Index</b>,\n    key: 'Index',\n    fixed:\"left\",\n    render : (text, record, index) => index+1,\n  },{\n    title: () => <b>Cinema Name</b>,\n    dataIndex: 'cinema_name',\n    key: 'cinema_name',\n    defaultSortOrder: 'descend',\n  },{\n    title: () => <b>User Name</b>,\n    dataIndex: 'user_name',\n    key: 'user_name',\n    defaultSortOrder: 'descend',\n    fixed:\"left\",\n    sorter: (a, b) => a.user_name.length - b.user_name.length,\n  },{\n    title: () => <b>Email</b>,\n    dataIndex: 'email',\n    key: 'email',\n    defaultSortOrder: 'descend',\n    sorter: (a, b) => a.email.length - b.email.length,\n  },{\n    title: () => <b>Gender</b>,\n    dataIndex: 'gender',\n    key: 'gender',\n    defaultSortOrder: 'descend',\n    sorter: (a, b) => a.gender.length - b.gender.length,\n  },{\n      title: () => <b>City Name</b>,\n      key: 'city_id',\n      defaultSortOrder: 'descend',\n      render: s => s.city_id.city_name,\n      sorter: (a, b) => a.city_id.city_name.length - b.city_id.city_name.length,\n},{\n    title: () => <b>State Name</b>,\n    key: 'state_id',\n    defaultSortOrder: 'descend',\n    render: s => s.state_id.state_name,\n    sorter: (a, b) => a.state_id.state_name.length - b.state_id.state_name.length,\n  },{\n    title: () => <b>Status</b>,\n    key: 'is_active',\n    defaultSortOrder: 'descend',\n    // render: ,\n    render: (text, record) => (\n      <Space size=\"middle\">\n        {record.is_active==\"1\"?<Button type='danger' onClick={() => handleShow(record._id)} style={{ backgroundColor: '#005f00', borderBlockColor: 'Black', color: 'White' }}>Active</Button>:<Button type='danger' onClick={() => handleShow(record._id)} style={{ backgroundColor: '#820000', borderBlockColor: 'Black', color: 'White' }}>Block</Button>}\n      </Space>\n    ),\n  }\n];\n\n  return (\n    <>\n      <div className={\"Title\"} style={{ marginTop: \"-29px\"}}>\n          </div>\n      <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"29px\",fontFamily:\"auto\",textTransform:\"uppercase\"  }}>\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\n        <Breadcrumb.Item>All Theater</Breadcrumb.Item>\n        <Breadcrumb.Item>View Theaters List</Breadcrumb.Item>\n      </Breadcrumb>\n      <div className=\"site-card-border-less-wrapper\">\n        <Card title=\"View Theaters List\" bordered={true} style={{ width: \"auto\",border:\"5px\" }}>\n          <Table columns={columns} dataSource={props.users} pagination={{ pageSize: 4 }} />\n        </Card>\n      </div>\n\n      <Modal title=\"Are you sure!\"\n        visible={show}\n        onOk={() => deleteHandler(ids)}\n        onCancel={() => handleClose()}>\n        Do you want to change this state?\n      </Modal>\n    </>\n  );\n}\n\nconst mapStateToProps =  (state) => ({\n  err:state.movieReducer.error,\n  users:state.userReducer.users,\n  singleuser1:state.userReducer.singleuser1\n})\n\nconst mapDispatchToProps = dispatch =>{\n  return{\n    updateProfile:(_id,put)=>dispatch(updateProfile(_id,put)),\n    fetchProfile:(_id)=>dispatch(fetchProfile(_id)),\n    getAllTheater:()=>dispatch(getAllTheater())\n  }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(AllUsersList);","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\Movie_All_Form\\addMovie.js",["782","783","784","785","786","787","788","789"],"import React, { useState } from 'react';\nimport { addmoviedata } from \"../../store/action/movieAction\";\nimport { connect } from 'react-redux';\nimport { Breadcrumb,Card,Row,Col,DatePicker,Select } from 'antd';\nimport {\n  Form,\n  Input,\n  Button,\n  Switch\n} from 'antd';\n// import { Row } from 'react-bootstrap';\nconst {Option} = Select;\nconst formItemLayout = {\n  labelCol: {\n    // span: 5,\n  },\n  wrapperCol: {\n    span: 10,\n  },\n};\nconst formTailLayout = {\n  labelCol: {\n    span: 4,\n  },\n  wrapperCol: {\n    span: 8,\n    offset: 4,\n  },\n};\n\nconst AddMovie = (props) => {\n  const { RangePicker } = DatePicker;\n  const [form] = Form.useForm();\n  const [obj, setMyObj] = useState({\n    moviename: \"\",\n    releasedate: \"\",\n    movie_languages:\"\",\n    movie_status: \"\",\n    movie_category: \"\",\n    director_name: \"\",\n    Actors_name: \"\",\n    movie_description: \"\",\n    movie_type: \"\",\n    movie_logo: \"\",\n    booking_status: \"\"\n  })\n\n  const handleSubmit = async () => {\n    try {\n        const values = await form.validateFields();\n        // console.log(obj);\n        if(obj.booking_status==\"\" || obj.movie_status==\"\"){\n          if(obj.movie_status==\"\"){\n            obj.booking_status=false;\n          }if(obj.booking_status==\"\"){\n            obj.movie_status=false;\n          }\n        }\n        const formdata = new FormData();\n        formdata.append(\"moviename\",obj.moviename);\n        formdata.append(\"releasedate\",obj.releasedate);\n        formdata.append(\"movie_status\",obj.movie_status);\n        formdata.append(\"movie_category\",obj.movie_category);\n        formdata.append(\"director_name\",obj.director_name);\n        formdata.append(\"Actors_name\",obj.Actors_name);\n        formdata.append(\"movie_description\",obj.movie_description);\n        formdata.append(\"movie_type\",obj.movie_type);\n        formdata.append(\"movie_languages\",obj.movie_languages);\n        formdata.append(\"movie_logo\",obj.movie_logo);\n        formdata.append(\"booking_status\",obj.booking_status);\n      \n        console.log(obj.moviename);\n        await props.addmoviedata(formdata);\n        props.history.replace(\"/movie\");\n    } catch (errorInfo) {\n    }\n  }\n\n  const HandleChange = (e, name) => {\n    let olddata = { ...obj };\n    if (name == \"movie_logo\") {\n      const { target: { files } } = e\n      olddata[name] = files.length === 1 ? files[0] : files\n      olddata[name] = e.target.files[0];\n    }else if(name == \"releasedate\"){\n      if(e!=null){\n        olddata[name] = new Date(e._d).toLocaleDateString();\n      }\n    }else if((name === \"movie_type\") || (name === \"movie_category\") || (name === \"booking_status\") || (name === \"movie_status\") || (name=== \"movie_languages\")){\n        olddata[name] = e;\n    }else\n    {\n      olddata[name] = e.target.value;\n    }\n    setMyObj(olddata);\n  }\n\n  return (\n    <>\n      <div className={\"Title\"} style={{marginTop: \"-29px\" }}>\n          </div>\n          <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"30px\",fontFamily:\"auto\",textTransform:\"uppercase\"   }}>\n              <Breadcrumb.Item>Home</Breadcrumb.Item>\n              <Breadcrumb.Item>Movie</Breadcrumb.Item>\n              <Breadcrumb.Item>Add Movie</Breadcrumb.Item>\n          </Breadcrumb>\n            <div className=\"site-card-border-less-wrapper\">\n              <Card title=\"Add Movie Form\" bordered={false} style={{ width: \"auto\" }}>\n                      <Form form={form} name=\"AddMovie\">\n                      <Row gutter={0}>\n                          <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Name:-\" name=\"moviename\" rules={[{ required: true, message: 'Please required movie name!' }]}>\n                              <Input type=\"text\" name=\"moviename\" onChange={(e) => { HandleChange(e, \"moviename\") }} placeholder=\"Enter moviename ...\" style={{maxWidth : \"300px\", width:\"100%\"}}/>\n                          </Form.Item>\n                          \n                      </Col>\n                      <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Category:-\" name=\"movie_category\" rules={[{ required: true, message: 'Please required movie category!' }]}>\n                                  <Select name=\"movie_category\" onChange={(e)=>HandleChange(e,\"movie_category\")} placeholder=\"------ Select Movie Category-----\" allowClear style={{maxWidth : \"300px\"}}>\n                                      <Option value=\"A\" key={\"A\"}>A</Option>\n                                      <Option value=\"B\" key={\"B\"}>B</Option>\n                                      <Option value=\"C\" key={\"C\"}>C</Option>\n                                      <Option value=\"D\" key={\"D\"}>D</Option>\n                                  </Select>\n                              {/* <Input type=\"text\" name=\"movie_category\" onChange={(e) => { HandleChange(e, \"movie_category\") }} placeholder=\"Enter movie_category ...\" style={{maxWidth : \"300px\", width:\"100%\"}}/> */}\n                          </Form.Item>\n                      </Col>\n                    </Row>\n                      <Row gutter={0}>\n                      <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"Enter Release Date:-\" name=\"releasedate\" rules={[{ required: true, message: 'Please required Releasedate!' }]}>\n                              <DatePicker onChange={(e) => { HandleChange(e, \"releasedate\") }} format={\"YYYY/MM/DD\"}/>\n                          </Form.Item>\n                      </Col>\n                        <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"Enter Director Name:-\" name=\"director_name\" rules={[{ required: true, message: 'Please required director name!' }]}>\n                              <Input type=\"text\" name=\"director_name\" onChange={(e) => { HandleChange(e, \"director_name\") }} placeholder=\"Enter director_name ...\" style={{maxWidth : \"300px\"}}/>\n                          </Form.Item>\n                          \n                      </Col>\n                      </Row>\n                      <Row gutter={0}>\n                      <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"Enter Actors Name:-\" name=\"Actors_name\" rules={[{ required: true, message: 'Please required actors name!' }]}>\n                              <Input type=\"text\" name=\"Actors_name\" onChange={(e) => { HandleChange(e, \"Actors_name\") }} placeholder=\"Enter Actors ...\" style={{maxWidth : \"300px\"}}/>\n                          </Form.Item>\n                          \n                      </Col>\n                      <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Description:-\" name=\"movie_description\" rules={[{ required: true, message: 'Please required movie description!' }]}>\n                              <Input type=\"text\" name=\"movie_description\" onChange={(e) => { HandleChange(e, \"movie_description\") }} placeholder=\"Enter movie_description ...\" style={{maxWidth : \"300px\"}}/>\n                          </Form.Item>\n                          </Col>\n                      </Row>\n                      <Row gutter={0}>\n                        <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Type:-\" name=\"movie_type\" rules={[{ required: true, message: 'Please required movie type!' }]}>\n                                  <Select name=\"movie_type\" onChange={(e)=>HandleChange(e,\"movie_type\")} placeholder=\"------ Select Movie Type-----\" allowClear style={{maxWidth : \"300px\"}}>\n                                      <Option value=\"Action\" key={\"Action\"}>Action</Option>\n                                      <Option value=\"Comedy\" key={\"Comedy\"}>Comedy</Option>\n                                      <Option value=\"Drama\" key={\"Drama\"}>Drama</Option>\n                                      <Option value=\"Fantasy\" key={\"Fantasy\"}>Fantasy</Option>\n                                      <Option value=\"Horror\" key={\"Horror\"}>Horror</Option>\n                                      <Option value=\"Mystery\" key={\"Mystery\"}>Mystery</Option>\n                                      <Option value=\"Romance\" key={\"Romance\"}>Romance</Option>\n                                      <Option value=\"Thriller\" key={\"Thriller\"}>Thriller</Option>\n                                      <Option value=\"Western\" key={\"Western\"}>Western</Option>\n                                      <Option value=\"Crime Film\" key={\"Crime Film\"}>Crime Film</Option>\n                                      <Option value=\"Romantic Comedy\" key={\"Romantic Comedy\"}>Romantic Comedy</Option>\n                                      <Option value=\"Documentary\" key={\"Documentary\"}>Documentary</Option>\n                                  </Select>\n                              {/* <Input type=\"text\" name=\"movie_type\" onChange={(e) => { HandleChange(e, \"movie_type\") }} placeholder=\"Enter movie_type...\" style={{maxWidth : \"300px\"}}/> */}\n                          </Form.Item>\n                          \n                      </Col>\n                      <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"Choice Movie Logo:-\" name=\"movie_logo\" rules={[{ required: true, message: 'Please required movie logo!' }]}>\n                              <Input type=\"file\" name=\"movie_logo\" onChange={(e)=>{HandleChange(e,\"movie_logo\")}} placeholder=\"Enter movie_logo ...\" style={{maxWidth : \"300px\"}}/>\n                          </Form.Item>\n                          \n                      </Col>\n                      </Row>\n                      <Row gutter={0}>\n                        <Col span={12}>\n                        <Form.Item {...formItemLayout} label=\"Movie Languages:-\" name=\"movie_languages\" rules={[{ required: true, message: 'Please required movie Languages !' }]}>\n                                  <Select name=\"movie_languages\" onChange={(e)=>HandleChange(e,\"movie_languages\")} placeholder=\"------ Select Movie Languages Type-----\" allowClear style={{maxWidth : \"300px\"}}>\n                                      <Option value=\"English\" key={\"English\"}>English</Option>\n                                      <Option value=\"Hindi\" key={\"Hindi\"}>Hindi</Option>\n                                      <Option value=\"Tamil\" key={\"Tamil\"}>Tamil</Option>\n                                      <Option value=\"Gujarati\" key={\"Gujarati\"}>Gujarati</Option>\n                                      <Option value=\"Telugu\" key={\"Telugu\"}>Telugu</Option>\n                                      <Option value=\"Bengali\" key={\"Bengali\"}>Bengali</Option>\n                                      <Option value=\"Marathi\" key={\"Marathi\"}>Marathi</Option>\n                                      <Option value=\"Telugu\" key={\"Telugu\"}>Telugu</Option>\n                                      <Option value=\"Bhojpuri\" key={\"Bhojpuri\"}>Bhojpuri</Option>\n                                  </Select>\n                          </Form.Item>\n                        </Col>\n                      </Row>\n                      <Row gutter={0}>\n                      <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"Select Booking Status:-\" name=\"booking_status\" valuePropName=\"checked\" >\n                          {/* <Form.Item label=\"Switch\"> */}\n                              <Switch name=\"booking_status\" onChange={(e) => { HandleChange(e, \"booking_status\") }} required/>\n                            {/* </Form.Item> */}\n                              {/* <Input type=\"text\" name=\"booking_status\" onChange={(e) => { HandleChange(e, \"booking_status\") }} placeholder=\"Enter booking_status ...\" style={{maxWidth : \"300px\"}}/> */}\n                          </Form.Item>\n                          </Col>\n                      <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"Select Movie Status:-\" name=\"movie_status\">\n                          <Switch name=\"movie_status\" onChange={(e) => { HandleChange(e, \"movie_status\") }} />\n                              {/* <Input type=\"text\" name=\"movie_status\" onChange={(e) => { HandleChange(e, \"movie_status\") }} placeholder=\"Enter movie_status ...\" style={{ maxWidth: \"300px\" }} /> */}\n                          </Form.Item>\n                          </Col>\n                      </Row>\n                        \n                           <Form.Item {...formTailLayout} label=\"\"> \n                                <Button type=\"primary\" onClick={(e) =>handleSubmit()} loading={props.loading}>Add Movie</Button>\n                          </Form.Item>                           \n                      </Form>\n              </Card>\n            </div>\n    </>\n  );\n}\nconst mapStateToProps =  (state) => ({\n  loading:state.movieReducer.loading,\n})\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addmoviedata: (postdata) => dispatch(addmoviedata(postdata))\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(AddMovie);\n","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\Movie_All_Form\\movieList.js",["790","791","792","793","794","795","796","797","798","799","800","801","802","803","804","805"],"import React,{useState,useEffect} from 'react';\n// import {Button,Card,Table,Modal,Form, Spinner }from 'react-bootstrap';\nimport {fetchmoviedata,updatemoviedata,singlemovieDataFetch,deletemoviedata} from '../../store/action/movieAction';\nimport {connect} from 'react-redux';\nimport '../state.css';\nimport { Table, Space, Button, Breadcrumb, Card, Form, Modal, Input, Row, Col,DatePicker,Switch,Select } from 'antd';\nimport moment from 'moment';\n\nconst {Option} = Select;\nconst formItemLayout = {\n  labelCol: {\n    span: 24,\n  },\n  wrapperCol: {\n    span: 12,\n  },\n};\n\nconst MovieList = (props) => {\n  const {form} =Form.useForm();\n  const [obj,setMyObj1]= useState({\n    _id:\"\",\n    moviename:\"\",\n    releasedate:\"\",\n    movie_category:\"\",\n    movie_languages:\"\",\n    director_name:\"\",\n    Actors_name:\"\",\n    movie_description:\"\",\n    movie_type:\"\",\n    movie_logo:\"\",\n    movie_status:\"\",\n    booking_status:\"\"\n  })\n  \n  const [op,setOp] = useState(true);\n  const [ids,setIds] = useState(\"\");\n  const [show, setShow] = useState(false);\n  const [ushow, usetShow] = useState(false);\n  \n  const [error,setError] = useState({\n    movie_nameError:'',\n    IsValid:false,\n})\n  useEffect(()=>{    \n    props.fetchmoviedata();\n    if (props.singlemovie.moviename || props.singlemovie.movie_category || props.singlemovie.releasedate) {\n      console.log(props.singlemovie.moviename)\n      let olddata={...obj};\n      olddata.moviename = props.singlemovie.moviename;\n      olddata._id = props.singlemovie._id;\n      olddata.movie_category=props.singlemovie.movie_category;\n      olddata.releasedate=props.singlemovie.releasedate;\n      olddata.movie_languages = props.singlemovie.movie_languages;\n      olddata.director_name=props.singlemovie.director_name;\n      olddata.Actors_name=props.singlemovie.Actors_name;\n      olddata.movie_description=props.singlemovie.movie_description;\n      olddata.movie_type=props.singlemovie.movie_type;\n      olddata.movie_logo=props.singlemovie.movie_logo;\n      if(props.singlemovie.movie_status==\"true\"){\n        olddata.movie_status=true;\n      }else{\n        olddata.movie_status=false;        \n      }\n      if(props.singlemovie.booking_status==\"true\"){\n        olddata.booking_status=true;\n      }else{\n        olddata.booking_status=false;\n      }\n      setMyObj1(olddata);\n    }\n  },[props.fetchmoviedata,props.singlemovie])\n  \n  const deleteHandler = async (id) =>{\n      await props.deletemoviedata(id);\n      setShow(false);\n  }\n\nconst SingleSubmit = async () =>{\n  let errors = { ...error, IsValid : true };\n    if(!obj.moviename || obj.moviename === \"\")\n    {\n      console.log(errors.IsValid);\n      if(!obj.moviename || obj.moviename === \"\"){\n        errors.IsValid = false;\n        errors.movie_nameError = \"moviename Is Required \"\n      }\n\n    }else{\n        errors.movie_nameError = \"\"\n    }\n    setError(errors);\n    if(errors.IsValid==true){\n      // const values = await form.validateFields();\n      console.log(obj);\n          const formdata = new FormData();\n          formdata.append(\"moviename\",obj.moviename);\n          formdata.append(\"releasedate\",obj.releasedate);\n          formdata.append(\"movie_status\",obj.movie_status);\n          formdata.append(\"movie_category\",obj.movie_category);\n          formdata.append(\"movie_languages\",obj.movie_languages);\n          formdata.append(\"director_name\",obj.director_name);\n          formdata.append(\"Actors_name\",obj.Actors_name);\n          formdata.append(\"movie_description\",obj.movie_description);\n          formdata.append(\"movie_type\",obj.movie_type);\n          formdata.append(\"movie_logo\",obj.movie_logo);\n          formdata.append(\"booking_status\",obj.booking_status);\n        await props.updatemoviedata(obj._id,formdata);\n        // setOp(true);\n        usetShow(false);\n        obj._id=props.singlemovie._id;\n        obj.moviename=\"\";\n        props.history.replace(`/movie`);\n    }\n}\n\n\nconst handleClose = () => setShow(false);\nconst handleShow = (id) => {\n  let errors = { ...error, IsValid : true };\n  setError(errors);\n  // setOp(true);\n  setShow(true);\n  setIds(id);\n}\n\nconst SingleClose = () => {\n  let errors = { ...error, IsValid : true }; \n  errors.movie_nameError = \"\"\n  setError(errors);\n  // setOp(true);\n  obj.releasedate=\"\";\n  obj.booking_status=false;\n  obj.moviename=\"\";\n  props.singlemovie.moviename = \"\";\n  usetShow(false) \n};\n\n// if(props.singlemovie.moviename && !obj.moviename){\n//   // if(op!=false){\n//     setMyObj1(props.singlemovie)\n//   // }\n// }\nconst handleUpdate = async (_id) => {\n  await props.singlemovieDataFetch(_id); \n  usetShow(true);\n}\n const HandleChange = (e,name) =>{\n  let olddata = {...obj};\n  if (name == \"movie_logo\") {\n    console.log(name);\n    const { target: { files } } = e\n    olddata[name] = files.length === 1 ? files[0] : files\n    olddata[name] = e.target.files[0];\n  }else if(name == \"releasedate\"){\n    if(e!=null){\n      olddata[name] = new Date(e._d).toLocaleDateString();\n    }\n  }else if((name==\"booking_status\") || (name===\"movie_status\") || (name === \"movie_type\")  || (name === \"movie_category\") || (name === \"movie_languages\")){\n      olddata[name]=e;\n  }else\n  {\n    olddata[name] = e.target.value;\n  }\n  // console.log(olddata);\n  // setOp(false);\n  setMyObj1(olddata);\n  console.log(obj);\n}\nconst columns = [\n  {\n    title: () => <b>Index</b>,\n    key: 'Index',\n    fixed:\"left\",\n    render : (text, record, index) => index+1,\n  },{\n    title: () => <b>Movie Name</b>,\n    dataIndex: 'moviename',\n    key: 'moviename',\n    defaultSortOrder: 'descend',\n    fixed:\"left\",\n    sorter: (a, b) => a.moviename.length - b.moviename.length,\n  },{\n    title: () => <b>Release Date</b>,\n    dataIndex: 'releasedate',\n    key: 'releasedate',\n    defaultSortOrder: 'descend',\n    sorter: (a, b) => a.releasedate.length - b.releasedate.length,\n  },{\n    title: () => <b>Movie Description</b>,\n    dataIndex: 'movie_description',\n    key: 'movie_description',\n    defaultSortOrder: 'descend',\n    sorter: (a, b) => a.movie_description.length - b.movie_description.length,\n  },{\n    title: () => <b>Director Name</b>,\n    dataIndex: 'director_name',\n    key: 'director_name',\n    defaultSortOrder: 'descend',\n    sorter: (a, b) => a.director_name.length - b.director_name.length,\n  },{\n    title: () => <b>Actors Name</b>,\n    dataIndex: 'Actors_name',\n    key: 'Actors_name',\n    defaultSortOrder: 'descend',\n    // sorter: (a, b) => a.Actors_name.length - b.Actors_name.length,\n  },{\n    title: () => <b>Movie Category</b>,\n    dataIndex: 'movie_category',\n    key: 'movie_category',\n    defaultSortOrder: 'descend',\n    sorter: (a, b) => a.movie_category.length - b.movie_category.length,\n  },{\n    title: () => <b>Movie Languages</b>,\n    dataIndex: 'movie_languages',\n    key: 'movie_languages',\n    defaultSortOrder: 'descend',\n    sorter: (a, b) => a.movie_languages.length - b.movie_languages.length,\n  },{\n    title: () => <b>Movie Type</b>,\n    dataIndex: 'movie_type',\n    key: 'movie_type',\n    defaultSortOrder: 'descend',\n    // sorter: (a, b) => a.movie_type.length - b.movie_types.length,\n  },{\n    title: () => <b>Movie Status</b>,\n    render : (text, record, index) => <Switch name=\"movie_status\" checked={text.movie_status==\"true\"} style={{color:\"red\"}}/>,\n    key: 'movie_status',\n    defaultSortOrder: 'descend',\n    sorter: (a, b) => a.movie_status.length - b.movie_status.length,\n  },{\n    title: () => <b>Booking Status</b>,\n    render : (text, record, index) => text.booking_status==\"true\"?<div style={{color:\"Green\"}}>Available</div>:<div style={{color:\"Red\"}}>Not Available</div>,\n    key: 'booking_status',\n    defaultSortOrder: 'descend',\n    sorter: (a, b) => a.movie_status - b.movie_status,\n  },{\n    title: () => <b>Image</b>,\n    dataIndex: \"movie_logo\",\n    key: 'movie_logo',\n    defaultSortOrder: 'descend',\n    render:  (text,record) => <img src={\"http://localhost:3001\"+record.movie_logo} height=\"25px\" width=\"25px\" />\n    // sorter: (a, b) => a.movie_status - b.movie_status,\n  },{\n    title: () => <b>Update</b>,\n    key: 'Update',\n    fixed:\"right\",\n    render: (text, record) => (\n      <Space size=\"middle\">\n        <Button onClick={() => handleUpdate(record._id)} type=\"primary\">UPDATE</Button>\n      </Space>\n    ),\n  },{\n    title: () => <b>Delete</b>,\n    key: 'Delete',\n    fixed:\"right\",\n    render: (text, record) => (\n      <Space size=\"middle\">\n        <Button type=\"danger\" onClick={() => handleShow(record._id)} style={{backgroundColor:\"Red\",borderBlockColor:\"Black\",color:\"White\"}}>Delete</Button>\n      </Space>\n    ),\n  }\n];\n\n  return (\n    <>\n      <div className={\"Title\"} style={{ marginTop: \"-29px\"}}>\n        {/* City List */}\n          </div>\n      <Breadcrumb style={{ marginTop: \"1px\",textAlign:\"right\",marginBottom:\"29px\" }}>\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\n        <Breadcrumb.Item>Movie</Breadcrumb.Item>\n        <Breadcrumb.Item>View Movie List</Breadcrumb.Item>\n      </Breadcrumb>\n      <div className=\"site-card-border-less-wrapper\">\n        <Card title=\"View Movie List\" bordered={true} style={{ width: \"auto\",border:\"5px\" }}>\n          <Table columns={columns} dataSource={props.movies} pagination={{ pageSize: 4 }} scroll={{ x: 1300 }}/>\n        </Card>\n      </div>\n\n      {/* Update Record */}\n      <Modal title=\"Update State\"\n        visible={ushow}\n        onOk={() => SingleSubmit()}\n        onCancel={() => SingleClose()}>\n       <Form>\n                      <Row gutter={0}>\n                          <Col span={12} >\n                              <Input type=\"hidden\" name=\"_id\" value={obj._id} onChange={(e) => { HandleChange(e, \"_id\") }}/>\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Name:-\" \n                                      hasFeedback\n                                      validateStatus={(error.movie_nameError)?\"error\":\"success\"}\n                                      help={error.movie_nameError}\n                                      style={{width: \"400px\"}}>\n                              <Input type=\"text\" name=\"moviename\" value={obj.moviename} onChange={(e) => { HandleChange(e, \"moviename\") }} placeholder=\"Enter moviename ...\" style={{maxWidth : \"300px\", width:\"100%\"}}/>\n                          </Form.Item>\n                          \n                      </Col>\n                      <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Category:-\" rules={[{ required: true, message: 'Please required movie category!' }]} style={{width: \"400px\"}}>\n                                  <Select name=\"movie_category\" value={obj.movie_category} onChange={(e)=>HandleChange(e,\"movie_category\")} placeholder=\"------ Select Movie Category-----\" allowClear style={{maxWidth : \"300px\"}}>\n                                      <Option value=\"A\" key={\"A\"}>A</Option>\n                                      <Option value=\"B\" key={\"B\"}>B</Option>\n                                      <Option value=\"C\" key={\"C\"}>C</Option>\n                                      <Option value=\"D\" key={\"D\"}>D</Option>\n                                  </Select>\n                              {/* <Input type=\"text\" name=\"movie_category\" value={obj.movie_category} onChange={(e) => { HandleChange(e, \"movie_category\") }} placeholder=\"Enter movie_category ...\" style={{maxWidth : \"300px\", width:\"100%\"}}/> */}\n                          </Form.Item>\n                      </Col>\n                    </Row>\n                      <Row gutter={0}>\n                      <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"Enter Release Date:-\" rules={[{ required: true, message: 'Please required Releasedate!' }]} style={{width: \"400px\"}}>\n                              <DatePicker name=\"releasedate\" onChange={(e) => { HandleChange(e, \"releasedate\") }} value={moment(obj.releasedate,\"MM/DD/ YYYY\")} />\n                          </Form.Item>\n                      </Col>\n                        <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"Enter Director Name:-\" rules={[{ required: true, message: 'Please required director name!' }]} style={{width: \"400px\"}}>\n                              <Input type=\"text\" name=\"director_name\" value={obj.director_name} onChange={(e) => { HandleChange(e, \"director_name\") }} placeholder=\"Enter director_name ...\" style={{maxWidth : \"300px\"}}/>\n                          </Form.Item>\n                          \n                      </Col>\n                      </Row>\n                      <Row gutter={0}>\n                      <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"Enter Actors Name:-\" rules={[{ required: true, message: 'Please required actors name!' }]} style={{width: \"400px\"}}>\n                              <Input type=\"text\" name=\"Actors_name\" value={obj.Actors_name} onChange={(e) => { HandleChange(e, \"Actors_name\") }} placeholder=\"Enter Actors ...\" style={{maxWidth : \"300px\"}}/>\n                          </Form.Item>\n                          \n                      </Col>\n                      <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Description:-\" rules={[{ required: true, message: 'Please required movie description!' }]} style={{width: \"400px\"}}>\n                              <Input type=\"text\" name=\"movie_description\" value={obj.movie_description} onChange={(e) => { HandleChange(e, \"movie_description\") }} placeholder=\"Enter movie_description ...\" style={{maxWidth : \"300px\"}}/>\n                          </Form.Item>\n                          </Col>\n                      </Row>\n                      <Row gutter={0}>\n                        <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Type:-\" rules={[{ required: true, message: 'Please required movie type!' }]} style={{width: \"400px\"}}>\n                          <Select name=\"movie_type\" value={obj.movie_type} onChange={(e)=>HandleChange(e,\"movie_type\")} placeholder=\"------ Select Movie Type-----\" allowClear style={{maxWidth : \"300px\"}}>\n                                      <Option value=\"Action\" key={\"Action\"}>Action</Option>\n                                      <Option value=\"Comedy\" key={\"Comedy\"}>Comedy</Option>\n                                      <Option value=\"Drama\" key={\"Drama\"}>Drama</Option>\n                                      <Option value=\"Fantasy\" key={\"Fantasy\"}>Fantasy</Option>\n                                      <Option value=\"Horror\" key={\"Horror\"}>Horror</Option>\n                                      <Option value=\"Mystery\" key={\"Mystery\"}>Mystery</Option>\n                                      <Option value=\"Romance\" key={\"Romance\"}>Romance</Option>\n                                      <Option value=\"Thriller\" key={\"Thriller\"}>Thriller</Option>\n                                      <Option value=\"Western\" key={\"Western\"}>Western</Option>\n                                      <Option value=\"Crime Film\" key={\"Crime Film\"}>Crime Film</Option>\n                                      <Option value=\"Romantic Comedy\" key={\"Romantic Comedy\"}>Romantic Comedy</Option>\n                                      <Option value=\"Documentary\" key={\"Documentary\"}>Documentary</Option>\n                                  </Select>\n                              {/* <Input type=\"text\" name=\"movie_type\" value={obj.movie_type} onChange={(e) => { HandleChange(e, \"movie_type\") }} placeholder=\"Enter movie_type...\" style={{maxWidth : \"300px\"}}/> */}\n                          </Form.Item>\n                          \n                      </Col>\n                      <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"Choice Movie Logo:-\" style={{width: \"400px\"}}>\n                              <Input type=\"file\" name=\"movie_logo\"  onChange={(e)=>{HandleChange(e,\"movie_logo\")}} placeholder=\"Enter movie_logo ...\" style={{maxWidth : \"100px\"}}>\n                              </Input>\n                          </Form.Item>\n                                <img src={\"http://localhost:3001\"+obj.movie_logo} height=\"25px\" width=\"25px\" />\n                          \n                      </Col>\n                      </Row>\n                      <Row gutter={0}>\n                        <Col span={12}>\n                        <Form.Item {...formItemLayout} label=\"Movie Languages:-\" rules={[{ required: true, message: 'Please required movie Languages !' }]}>\n                                  <Select name=\"movie_languages\" value={obj.movie_languages} onChange={(e)=>HandleChange(e,\"movie_languages\")} placeholder=\"------ Select Movie Languages Type-----\" allowClear style={{maxWidth : \"300px\"}}>\n                                      <Option value=\"English\" key={\"English\"}>English</Option>\n                                      <Option value=\"Hindi\" key={\"Hindi\"}>Hindi</Option>\n                                      <Option value=\"Tamil\" key={\"Tamil\"}>Tamil</Option>\n                                      <Option value=\"Gujarati\" key={\"Gujarati\"}>Gujarati</Option>\n                                      <Option value=\"Telugu\" key={\"Telugu\"}>Telugu</Option>\n                                      <Option value=\"Bengali\" key={\"Bengali\"}>Bengali</Option>\n                                      <Option value=\"Marathi\" key={\"Marathi\"}>Marathi</Option>\n                                      <Option value=\"Telugu\" key={\"Telugu\"}>Telugu</Option>\n                                      <Option value=\"Bhojpuri\" key={\"Bhojpuri\"}>Bhojpuri</Option>\n                                  </Select>\n                          </Form.Item>\n                          \n                      </Col>\n                      </Row>\n                      \n                      <Row gutter={0}>\n                      <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"Enter Movie Status:-\">\n                          <Switch name=\"movie_status\" checked={Boolean(obj.movie_status)==true} onChange={(e) => { HandleChange(e, \"movie_status\") }}  style={{ maxWidth: \"300px\" }}/>\n                              {/* <Input type=\"text\" name=\"movie_status\" value={obj.movie_status} onChange={(e) => { HandleChange(e, \"movie_status\") }} placeholder=\"Enter movie_status ...\" style={{ maxWidth: \"300px\" }} /> */}\n                          </Form.Item>\n                          </Col>\n                      <Col span={12}>\n                          <Form.Item {...formItemLayout} label=\"Enter Booking Status:-\">\n                            <Switch name=\"booking_status\" checked={Boolean(obj.booking_status)==true} onChange={(e) => { HandleChange(e, \"booking_status\") }}  style={{ maxWidth: \"300px\" }}>\n                                \n                            </Switch>\n                              {/* <Input type=\"text\" name=\"booking_status\" value={obj.booking_status} onChange={(e) => { HandleChange(e, \"booking_status\") }} placeholder=\"Enter booking_status ...\" style={{maxWidth : \"300px\"}}/> */}\n                          </Form.Item>\n                          </Col>\n                      </Row>                          \n                      </Form>\n      </Modal>\n\n      {/* Delete Record  */}\n      <Modal title=\"Are you sure!\"\n        visible={show}\n        onOk={() => deleteHandler(ids)}\n        onCancel={() => handleClose()}>\n        Do you want to delete this state?\n      </Modal>\n    </>\n  );\n}\n\nconst mapStateToProps =  (state) => ({\n  err:state.movieReducer.error,\n  Loading:state.movieReducer.loading,\n  movies:state.movieReducer.movies,\n  singlemovie:state.movieReducer.singlemovie,\n})\n\nconst mapDispatchToProps = dispatch =>{\n  return{\n    fetchmoviedata:()=>dispatch(fetchmoviedata()),\n    deletemoviedata:(_id)=>dispatch(deletemoviedata(_id)),\n    updatemoviedata:(postdata,put) => dispatch(updatemoviedata(postdata,put)),\n    singlemovieDataFetch:(id)=>dispatch(singlemovieDataFetch(id))\n  }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(MovieList);","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\action\\stateAction.js",[],"D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\action\\cityAction.js",[],"D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\action\\screenAction.js",["806"],"import axios from \"axios\";\nimport * as actionTypes from \"../screenActionType\";\n\nexport const getscreen = () => {\n    return async (dispatch) => {\n        dispatch({\n            type: actionTypes.INIT_FETCH_SCREEN\n        })\n        try {\n            let verifytoken = localStorage.getItem(\"Token\");\n            let response = await axios.get(\"http://localhost:3001/getscreen\", {\n                headers: { 'Authorization': verifytoken }\n            })\n            console.log(response.data);\n            dispatch({\n                type: actionTypes.FETCH_SCREEN_SUCCESS,\n                screens: response.data\n            })\n        } catch (error) {\n            console.log(error.response.data.message);\n            dispatch({\n                type: actionTypes.FETCH_SCREEN_FAILED,\n                error: error.response.data.message\n            });\n            throw new Error();\n        }\n    }\n}\n\nexport const addscreen = (postdata) => {\n    console.log(postdata);\n    return async (dispatch) => {\n        dispatch({\n            type: actionTypes.INIT_ADD_SCREEN\n        })\n        try {\n            let response = await axios.post(\"http://localhost:3001/addscreen\", postdata)\n            dispatch({\n                type: actionTypes.ADD_SCREEN_SUCCESS,\n                screens: response.data\n            })\n        } catch (error) {\n            console.log(error.response.data.message);\n            dispatch({\n                type: actionTypes.ADD_SCREEN_FAILED,\n                error: error.response.data.message\n            });\n            throw new Error();\n        }\n    }\n}\n\nexport const deletescreen = (id) => {\n    console.log(id);\n    return async (dispatch) => {\n        dispatch({\n            type: actionTypes.INIT_DELETE_SCREEN\n        })\n        try {\n            let response = await axios.delete(`http://localhost:3001/deletescreen/${id}`)\n            dispatch({\n                type: actionTypes.DELETE_SCREEN_SUCCESS,\n                id: id\n            })\n        } catch (error) {\n            console.log(error.response.data.message);\n            dispatch({\n                type: actionTypes.DELETE_SCREEN_FAILED,\n                error: error.response.data.message\n            });\n            throw new Error();\n        }\n    }\n}\n\nexport const singlescreenrecord = (id) => {\n    return async (dispatch) => {\n        dispatch({\n            type: actionTypes.INIT_SINGLE_SCREEN\n        })\n        try {\n            let response = await axios.get(`http://localhost:3001/singlescreen/${id}`)\n            dispatch({\n                type: actionTypes.SINGLE_SCREEN_SUCCESS,\n                singlescreen: response.data\n            })\n        } catch (error) {\n            console.log(error.response.data.message);\n            dispatch({\n                type: actionTypes.SINGLE_SCREEN_FAILED,\n                error: error.response.data.message\n            });\n            throw new Error();\n        }\n    }\n}\n\nexport const updatescreen = (id, put) => {\n    console.log(put);\n    return async (dispatch) => {\n        dispatch({\n            type: actionTypes.INIT_UPDATE_SCREEN\n        })\n        try {\n            let response = await axios.put(`http://localhost:3001/updatescreen/${id}`, put)\n            dispatch({\n                type: actionTypes.UPDATE_SCREEN_SUCCESS,\n                screens: response.data\n            })\n        } catch (error) {\n            console.log(error.response.data.message);\n            dispatch({\n                type: actionTypes.UPDATE_SCREEN_FAILED,\n                error: error.response.data.message\n            });\n            throw new Error();\n        }\n    }\n} ","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\action\\theaterscreenAction.js",["807"],"import axios from 'axios';\nimport * as actionTypes from '../theaterscreenActionType';\n\nexport const gettscreen = () => {\n    return async (dispatch) => {\n        dispatch({\n            type: actionTypes.INIT_FETCH_THEATER_SCREEN\n        })\n        try {\n            let verifytoken = localStorage.getItem(\"Token\");\n            let response = await axios.get(\"http://localhost:3001/gettscreen\", {\n                headers: { 'Authorization': verifytoken }\n            })\n            console.log(response.data);\n            dispatch({\n                type: actionTypes.FETCH_SCREEN_THEATER_SUCCESS,\n                theaterscreens: response.data\n            })\n        } catch (error) {\n            console.log(error.message);\n            dispatch({\n                type: actionTypes.FETCH_SCREEN_THEATER_FAILED,\n                error: error.message\n            });\n            throw new Error();\n        }\n    }\n}\n\nexport const addtscreen = (postdata) =>{\n    return async(dispatch)=>{\n        dispatch({\n            type:actionTypes.INIT_ADD_THEATER_SCREEN\n        })\n        try\n        {\n            let response = await axios.post(\"http://localhost:3001/addtscreen\",postdata)\n            dispatch({\n                type:actionTypes.ADD_SCREEN_THEATER_SUCCESS,\n                theaterscreens:response.data\n            })\n        }\n        catch(error)\n        {\n            dispatch({\n                type:actionTypes.ADD_SCREEN_THEATER_FAILED,\n                error:error.response.data.message\n            });\n            throw new Error();\n        }\n    }\n}\n\nexport const deletetscreen = (id) => {\n    console.log(id);\n    return async (dispatch) => {\n        dispatch({\n            type: actionTypes.INIT_DELETE_THEATER_SCREEN\n        })\n        try {\n            let response = await axios.delete(`http://localhost:3001/deletetscreen/${id}`)\n            dispatch({\n                type: actionTypes.DELETE_SCREEN_THEATER_SUCCESS,\n                id: id\n            })\n        } catch (error) {\n            console.log(error.response.data.message);\n            dispatch({\n                type: actionTypes.DELETE_SCREEN_THEATER_FAILED,\n                error: error.response.data.message\n            });\n            throw new Error();\n        }\n    }\n}\n\nexport const singletscreenrecord = (id) => {\n    return async (dispatch) => {\n        dispatch({\n            type: actionTypes.INIT_SINGLE_THEATER_SCREEN\n        })\n        try {\n            let response = await axios.get(`http://localhost:3001/singletscreen/${id}`)\n            console.log(response.data);\n            dispatch({\n                type: actionTypes.SINGLE_SCREEN_THEATER_SUCCESS,\n                singletscreen: response.data\n            })\n        } catch (error) {\n            console.log(error.response.data.message);\n            dispatch({\n                type: actionTypes.SINGLE_SCREEN_THEATERFAILED,\n                error: error.response.data.message\n            });\n            throw new Error();\n        }\n    }\n}\n\nexport const updatetscreen = (id, put) => {\n    console.log(put);\n    return async (dispatch) => {\n        dispatch({\n            type: actionTypes.INIT_UPDATE_THEATER_SCREEN\n        })\n        try {\n            let response = await axios.put(`http://localhost:3001/updatetscreen/${id}`, put)\n            dispatch({\n                type: actionTypes.UPDATE_SCREEN_THEATER_SUCCESS,\n                tscreens: response.data\n            })\n        } catch (error) {\n            console.log(error.response.data.message);\n            dispatch({\n                type: actionTypes.UPDATE_SCREEN_THEATER_FAILED,\n                error: error.response.data.message\n            });\n            throw new Error();\n        }\n    }\n} ","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\action\\movieAction.js",[],"D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\reducer\\moviereviewReducer.js",["808","809"],"import * as actionTypes from \"../moviereviewActionTypes\";\r\n\r\nconst initialstore = {\r\n    mreviews:[],\r\n    loading:false,\r\n    error:\"\"\r\n}\r\n\r\nconst store = (state = initialstore , action) => {\r\n    switch (action.type) {\r\n        case actionTypes.INIT_FETCH_MOVIEWREVIEW:\r\n            return {\r\n                ...state,\r\n                loading:true\r\n            }\r\n            break;\r\n        case actionTypes.FETCH_MOVIEREVIEW_SUCESS:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                mreviews:action.mreviews\r\n            }\r\n        case actionTypes.FETCH_MOVIEREVIEW_FAILED:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                error:action.error\r\n            }\r\n        case actionTypes.INIT_ADD_MOVIEWREVIEW:\r\n                return {\r\n                    ...state,\r\n                    loading:true\r\n                }\r\n                break;\r\n            case actionTypes.ADD_MOVIEREVIEW_SUCESS:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    mreviews:action.mreviews\r\n                }\r\n            case actionTypes.ADD_MOVIEREVIEW_FAILED:\r\n                return{\r\n                    ...state,\r\n                    loading:false,\r\n                    error:action.error\r\n                }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default store;","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\components\\Users_Theater_List\\movieReviewList.js",["810","811","812","813","814"],"import React, { useEffect, useState } from 'react';\r\nimport { Form } from 'antd';\r\nimport { fetchProfile, updateProfile } from '../../store/action/userAction';\r\nimport { fetchmoviedata } from '../../store/action/movieAction';\r\nimport { fetchreview } from '../../store/action/moviereviewAction';\r\nimport { connect } from 'react-redux';\r\nimport '../state.css';\r\nimport { Table, Breadcrumb, Card, Space, Button, Modal, Select } from 'antd';\r\n\r\nconst { Option } = Select;\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        span: 24,\r\n    },\r\n    wrapperCol: {\r\n        span: 12,\r\n    },\r\n};\r\n\r\nconst AllMovieReview = (props) => {\r\n\r\n    const { form } = Form.useForm();\r\n    useEffect(async () => {\r\n        await props.fetchmoviedata();\r\n\r\n        // if(props.movies.length!=0){\r\n        //     console.log(props.movies._id)\r\n        //     props.fetchreview(props.movies._id);\r\n        // }\r\n    }, [props.singleuser1, props.fetchmoviedata, props.fetchreview])\r\n\r\n    const [obj, setMyObj] = useState({\r\n        _id: \"\",\r\n        user_id: \"\",\r\n        movie_id: \"\",\r\n        moviename: \"\",\r\n        rate: \"\",\r\n        description: \"\",\r\n    });\r\n\r\n    const optionTemplate = () => {\r\n        return props.movies.map((movieList) => {\r\n            const { _id, moviename } = movieList;\r\n            return (\r\n                <Option value={_id} key={_id}>{moviename}</Option>\r\n            )\r\n        })\r\n    }\r\n\r\n    const HandleChange = (e, name) => {\r\n        console.log(name);\r\n        console.log(e);\r\n        let olddata = { ...obj };\r\n        olddata[name] = e;\r\n        console.log(e);\r\n        setMyObj(olddata);\r\n        props.fetchreview(e);\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            title: () => <b>Index</b>,\r\n            key: 'Index',\r\n            fixed: \"left\",\r\n            render: (text, record, index) => index + 1,\r\n        }, {\r\n            title: () => <b>User Name</b>,\r\n            key: 'user_id',\r\n            defaultSortOrder: 'descend',\r\n            render: s => s.user_id.user_name,\r\n            sorter: (a, b) => a.user_id.user_name.length - b.user_id.user_name.length,\r\n        }, {\r\n            title: () => <b>Rate</b>,\r\n            dataIndex: 'rate',\r\n            key: 'rate',\r\n            defaultSortOrder: 'descend',\r\n            fixed: \"left\",\r\n            sorter: (a, b) => a.rate.length - b.rate.length,\r\n        }, {\r\n            title: () => <b>Description</b>,\r\n            dataIndex: 'description',\r\n            key: 'description',\r\n            defaultSortOrder: 'descend',\r\n            sorter: (a, b) => a.description.length - b.description.length,\r\n        }\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <div className={\"Title\"} style={{ marginTop: \"-29px\" }}>\r\n            </div>\r\n            <Breadcrumb style={{ marginTop: \"1px\", textAlign: \"right\", marginBottom: \"29px\", fontFamily: \"auto\", textTransform: \"uppercase\" }}>\r\n                <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n                <Breadcrumb.Item>All Review</Breadcrumb.Item>\r\n                <Breadcrumb.Item>View MovieReview List</Breadcrumb.Item>\r\n            </Breadcrumb>\r\n            <Form form={form} name=\"AddForm\">\r\n                <Form.Item {...formItemLayout} label=\"Select Movie :-\" name=\"movie_id\">\r\n                    <Select name=\"movie_id\" onChange={(e) => HandleChange(e, \"movie_id\")} placeholder=\"------ Select Movie-----\" allowClear>\r\n                        {optionTemplate()}\r\n                    </Select>\r\n                </Form.Item>\r\n            </Form>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card title=\"View Users List\" bordered={true} style={{ width: \"auto\", border: \"5px\" }}>\r\n                    <Table columns={columns} dataSource={props.mreviews} pagination={{ pageSize: 4 }} />\r\n                </Card>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    err: state.movieReducer.error,\r\n    users: state.userReducer.users,\r\n    movies: state.movieReducer.movies,\r\n    mreviews: state.moviereviewReducer.mreviews,\r\n    singleuser1: state.userReducer.singleuser1\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchmoviedata: () => dispatch(fetchmoviedata()),\r\n        updateProfile: (_id, put) => dispatch(updateProfile(_id, put)),\r\n        fetchProfile: (_id) => dispatch(fetchProfile(_id)),\r\n        fetchreview: (_id) => dispatch(fetchreview(_id)),\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AllMovieReview);","D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\moviereviewActionTypes.js",[],"D:\\Sem-9_Project_Movie\\Movie-7\\Movie\\ui\\src\\store\\action\\moviereviewAction.js",[],{"ruleId":"815","replacedBy":"816"},{"ruleId":"817","replacedBy":"818"},{"ruleId":"819","severity":1,"message":"820","line":91,"column":36,"nodeType":"821","messageId":"822","endLine":91,"endColumn":38},{"ruleId":"819","severity":1,"message":"820","line":91,"column":32,"nodeType":"821","messageId":"822","endLine":91,"endColumn":34},{"ruleId":"819","severity":1,"message":"820","line":91,"column":45,"nodeType":"821","messageId":"822","endLine":91,"endColumn":47},{"ruleId":"819","severity":1,"message":"820","line":89,"column":32,"nodeType":"821","messageId":"822","endLine":89,"endColumn":34},{"ruleId":"819","severity":1,"message":"820","line":90,"column":36,"nodeType":"821","messageId":"822","endLine":90,"endColumn":38},{"ruleId":"823","severity":1,"message":"824","line":20,"column":8,"nodeType":"825","endLine":20,"endColumn":66,"suggestions":"826"},{"ruleId":"827","severity":1,"message":"828","line":30,"column":109,"nodeType":"829","messageId":"830","endLine":30,"endColumn":111},{"ruleId":"827","severity":1,"message":"828","line":52,"column":108,"nodeType":"829","messageId":"830","endLine":52,"endColumn":110},{"ruleId":"827","severity":1,"message":"828","line":63,"column":109,"nodeType":"829","messageId":"830","endLine":63,"endColumn":111},{"ruleId":"831","severity":1,"message":"832","line":1,"column":17,"nodeType":"833","messageId":"834","endLine":1,"endColumn":26},{"ruleId":"831","severity":1,"message":"835","line":1,"column":28,"nodeType":"833","messageId":"834","endLine":1,"endColumn":37},{"ruleId":"831","severity":1,"message":"836","line":4,"column":11,"nodeType":"833","messageId":"834","endLine":4,"endColumn":14},{"ruleId":"831","severity":1,"message":"837","line":4,"column":16,"nodeType":"833","messageId":"834","endLine":4,"endColumn":19},{"ruleId":"831","severity":1,"message":"838","line":4,"column":26,"nodeType":"833","messageId":"834","endLine":4,"endColumn":35},{"ruleId":"823","severity":1,"message":"839","line":14,"column":5,"nodeType":"825","endLine":14,"endColumn":18,"suggestions":"840"},{"ruleId":"841","severity":1,"message":"842","line":42,"column":62,"nodeType":"843","endLine":42,"endColumn":256},{"ruleId":"844","severity":1,"message":"845","line":81,"column":67,"nodeType":"843","endLine":81,"endColumn":153},{"ruleId":"831","severity":1,"message":"846","line":4,"column":21,"nodeType":"833","messageId":"834","endLine":4,"endColumn":35},{"ruleId":"831","severity":1,"message":"847","line":7,"column":10,"nodeType":"833","messageId":"834","endLine":7,"endColumn":22},{"ruleId":"831","severity":1,"message":"848","line":7,"column":24,"nodeType":"833","messageId":"834","endLine":7,"endColumn":30},{"ruleId":"831","severity":1,"message":"849","line":7,"column":32,"nodeType":"833","messageId":"834","endLine":7,"endColumn":38},{"ruleId":"831","severity":1,"message":"850","line":7,"column":40,"nodeType":"833","messageId":"834","endLine":7,"endColumn":46},{"ruleId":"831","severity":1,"message":"851","line":7,"column":48,"nodeType":"833","messageId":"834","endLine":7,"endColumn":55},{"ruleId":"831","severity":1,"message":"852","line":7,"column":57,"nodeType":"833","messageId":"834","endLine":7,"endColumn":65},{"ruleId":"823","severity":1,"message":"824","line":13,"column":5,"nodeType":"825","endLine":13,"endColumn":27,"suggestions":"853"},{"ruleId":"827","severity":1,"message":"828","line":48,"column":21,"nodeType":"829","messageId":"830","endLine":48,"endColumn":23},{"ruleId":"827","severity":1,"message":"828","line":48,"column":42,"nodeType":"829","messageId":"830","endLine":48,"endColumn":44},{"ruleId":"827","severity":1,"message":"828","line":48,"column":65,"nodeType":"829","messageId":"830","endLine":48,"endColumn":67},{"ruleId":"827","severity":1,"message":"828","line":48,"column":87,"nodeType":"829","messageId":"830","endLine":48,"endColumn":89},{"ruleId":"827","severity":1,"message":"828","line":48,"column":106,"nodeType":"829","messageId":"830","endLine":48,"endColumn":108},{"ruleId":"827","severity":1,"message":"854","line":48,"column":125,"nodeType":"829","messageId":"830","endLine":48,"endColumn":127},{"ruleId":"827","severity":1,"message":"828","line":49,"column":23,"nodeType":"829","messageId":"830","endLine":49,"endColumn":25},{"ruleId":"827","severity":1,"message":"828","line":53,"column":22,"nodeType":"829","messageId":"830","endLine":53,"endColumn":24},{"ruleId":"827","severity":1,"message":"828","line":57,"column":24,"nodeType":"829","messageId":"830","endLine":57,"endColumn":26},{"ruleId":"827","severity":1,"message":"828","line":61,"column":23,"nodeType":"829","messageId":"830","endLine":61,"endColumn":25},{"ruleId":"827","severity":1,"message":"828","line":65,"column":20,"nodeType":"829","messageId":"830","endLine":65,"endColumn":22},{"ruleId":"827","severity":1,"message":"854","line":69,"column":20,"nodeType":"829","messageId":"830","endLine":69,"endColumn":22},{"ruleId":"827","severity":1,"message":"828","line":84,"column":22,"nodeType":"829","messageId":"830","endLine":84,"endColumn":24},{"ruleId":"827","severity":1,"message":"828","line":104,"column":14,"nodeType":"829","messageId":"830","endLine":104,"endColumn":16},{"ruleId":"844","severity":1,"message":"845","line":163,"column":19,"nodeType":"843","endLine":163,"endColumn":135},{"ruleId":"844","severity":1,"message":"845","line":166,"column":19,"nodeType":"843","endLine":166,"endColumn":186},{"ruleId":"844","severity":1,"message":"845","line":239,"column":126,"nodeType":"843","endLine":239,"endColumn":218},{"ruleId":"823","severity":1,"message":"824","line":12,"column":5,"nodeType":"825","endLine":12,"endColumn":27,"suggestions":"855"},{"ruleId":"827","severity":1,"message":"828","line":50,"column":21,"nodeType":"829","messageId":"830","endLine":50,"endColumn":23},{"ruleId":"827","severity":1,"message":"828","line":50,"column":42,"nodeType":"829","messageId":"830","endLine":50,"endColumn":44},{"ruleId":"827","severity":1,"message":"828","line":50,"column":65,"nodeType":"829","messageId":"830","endLine":50,"endColumn":67},{"ruleId":"827","severity":1,"message":"828","line":50,"column":87,"nodeType":"829","messageId":"830","endLine":50,"endColumn":89},{"ruleId":"827","severity":1,"message":"828","line":50,"column":106,"nodeType":"829","messageId":"830","endLine":50,"endColumn":108},{"ruleId":"827","severity":1,"message":"854","line":50,"column":125,"nodeType":"829","messageId":"830","endLine":50,"endColumn":127},{"ruleId":"827","severity":1,"message":"854","line":50,"column":149,"nodeType":"829","messageId":"830","endLine":50,"endColumn":151},{"ruleId":"827","severity":1,"message":"828","line":51,"column":23,"nodeType":"829","messageId":"830","endLine":51,"endColumn":25},{"ruleId":"827","severity":1,"message":"828","line":55,"column":22,"nodeType":"829","messageId":"830","endLine":55,"endColumn":24},{"ruleId":"827","severity":1,"message":"828","line":59,"column":24,"nodeType":"829","messageId":"830","endLine":59,"endColumn":26},{"ruleId":"827","severity":1,"message":"828","line":63,"column":23,"nodeType":"829","messageId":"830","endLine":63,"endColumn":25},{"ruleId":"827","severity":1,"message":"828","line":67,"column":20,"nodeType":"829","messageId":"830","endLine":67,"endColumn":22},{"ruleId":"827","severity":1,"message":"828","line":71,"column":26,"nodeType":"829","messageId":"830","endLine":71,"endColumn":28},{"ruleId":"827","severity":1,"message":"854","line":75,"column":20,"nodeType":"829","messageId":"830","endLine":75,"endColumn":22},{"ruleId":"827","severity":1,"message":"828","line":91,"column":22,"nodeType":"829","messageId":"830","endLine":91,"endColumn":24},{"ruleId":"827","severity":1,"message":"828","line":112,"column":14,"nodeType":"829","messageId":"830","endLine":112,"endColumn":16},{"ruleId":"844","severity":1,"message":"845","line":170,"column":19,"nodeType":"843","endLine":170,"endColumn":180},{"ruleId":"844","severity":1,"message":"845","line":173,"column":19,"nodeType":"843","endLine":173,"endColumn":141},{"ruleId":"844","severity":1,"message":"845","line":255,"column":126,"nodeType":"843","endLine":255,"endColumn":218},{"ruleId":"831","severity":1,"message":"832","line":1,"column":17,"nodeType":"833","messageId":"834","endLine":1,"endColumn":26},{"ruleId":"831","severity":1,"message":"836","line":4,"column":11,"nodeType":"833","messageId":"834","endLine":4,"endColumn":14},{"ruleId":"831","severity":1,"message":"837","line":4,"column":16,"nodeType":"833","messageId":"834","endLine":4,"endColumn":19},{"ruleId":"831","severity":1,"message":"838","line":4,"column":26,"nodeType":"833","messageId":"834","endLine":4,"endColumn":35},{"ruleId":"823","severity":1,"message":"824","line":12,"column":5,"nodeType":"825","endLine":12,"endColumn":33,"suggestions":"856"},{"ruleId":"831","severity":1,"message":"857","line":3,"column":9,"nodeType":"833","messageId":"834","endLine":3,"endColumn":14},{"ruleId":"831","severity":1,"message":"858","line":42,"column":12,"nodeType":"833","messageId":"834","endLine":42,"endColumn":17},{"ruleId":"831","severity":1,"message":"859","line":42,"column":19,"nodeType":"833","messageId":"834","endLine":42,"endColumn":27},{"ruleId":"831","severity":1,"message":"860","line":50,"column":19,"nodeType":"833","messageId":"834","endLine":50,"endColumn":25},{"ruleId":"831","severity":1,"message":"832","line":1,"column":17,"nodeType":"833","messageId":"834","endLine":1,"endColumn":26},{"ruleId":"823","severity":1,"message":"824","line":11,"column":5,"nodeType":"825","endLine":11,"endColumn":45,"suggestions":"861"},{"ruleId":"823","severity":1,"message":"862","line":44,"column":6,"nodeType":"825","endLine":44,"endColumn":42,"suggestions":"863"},{"ruleId":"827","severity":1,"message":"828","line":65,"column":24,"nodeType":"829","messageId":"830","endLine":65,"endColumn":26},{"ruleId":"831","severity":1,"message":"857","line":5,"column":9,"nodeType":"833","messageId":"834","endLine":5,"endColumn":14},{"ruleId":"831","severity":1,"message":"864","line":12,"column":3,"nodeType":"833","messageId":"834","endLine":12,"endColumn":9},{"ruleId":"831","severity":1,"message":"865","line":15,"column":8,"nodeType":"833","messageId":"834","endLine":15,"endColumn":14},{"ruleId":"831","severity":1,"message":"866","line":35,"column":11,"nodeType":"833","messageId":"834","endLine":35,"endColumn":22},{"ruleId":"823","severity":1,"message":"824","line":53,"column":5,"nodeType":"825","endLine":53,"endColumn":60,"suggestions":"867"},{"ruleId":"831","severity":1,"message":"860","line":57,"column":13,"nodeType":"833","messageId":"834","endLine":57,"endColumn":19},{"ruleId":"827","severity":1,"message":"828","line":81,"column":19,"nodeType":"829","messageId":"830","endLine":81,"endColumn":21},{"ruleId":"827","severity":1,"message":"828","line":81,"column":45,"nodeType":"829","messageId":"830","endLine":81,"endColumn":47},{"ruleId":"827","severity":1,"message":"828","line":86,"column":19,"nodeType":"829","messageId":"830","endLine":86,"endColumn":21},{"ruleId":"827","severity":1,"message":"828","line":86,"column":46,"nodeType":"829","messageId":"830","endLine":86,"endColumn":48},{"ruleId":"827","severity":1,"message":"828","line":93,"column":14,"nodeType":"829","messageId":"830","endLine":93,"endColumn":16},{"ruleId":"868","severity":1,"message":"869","line":208,"column":4,"nodeType":"870","messageId":"830","endLine":208,"endColumn":9},{"ruleId":"831","severity":1,"message":"860","line":39,"column":13,"nodeType":"833","messageId":"834","endLine":39,"endColumn":19},{"ruleId":"831","severity":1,"message":"864","line":7,"column":106,"nodeType":"833","messageId":"834","endLine":7,"endColumn":112},{"ruleId":"831","severity":1,"message":"865","line":10,"column":8,"nodeType":"833","messageId":"834","endLine":10,"endColumn":14},{"ruleId":"831","severity":1,"message":"871","line":19,"column":7,"nodeType":"833","messageId":"834","endLine":19,"endColumn":21},{"ruleId":"831","severity":1,"message":"872","line":29,"column":10,"nodeType":"833","messageId":"834","endLine":29,"endColumn":14},{"ruleId":"831","severity":1,"message":"858","line":30,"column":10,"nodeType":"833","messageId":"834","endLine":30,"endColumn":15},{"ruleId":"831","severity":1,"message":"859","line":30,"column":16,"nodeType":"833","messageId":"834","endLine":30,"endColumn":24},{"ruleId":"823","severity":1,"message":"862","line":70,"column":6,"nodeType":"825","endLine":70,"endColumn":44,"suggestions":"873"},{"ruleId":"874","severity":1,"message":"875","line":119,"column":19,"nodeType":"825","messageId":"876","endLine":174,"endColumn":4},{"ruleId":"827","severity":1,"message":"828","line":182,"column":19,"nodeType":"829","messageId":"830","endLine":182,"endColumn":21},{"ruleId":"827","severity":1,"message":"828","line":182,"column":45,"nodeType":"829","messageId":"830","endLine":182,"endColumn":47},{"ruleId":"827","severity":1,"message":"828","line":187,"column":19,"nodeType":"829","messageId":"830","endLine":187,"endColumn":21},{"ruleId":"827","severity":1,"message":"828","line":187,"column":46,"nodeType":"829","messageId":"830","endLine":187,"endColumn":48},{"ruleId":"831","severity":1,"message":"877","line":16,"column":3,"nodeType":"833","messageId":"834","endLine":16,"endColumn":22},{"ruleId":"831","severity":1,"message":"878","line":16,"column":23,"nodeType":"833","messageId":"834","endLine":16,"endColumn":42},{"ruleId":"827","severity":1,"message":"854","line":36,"column":28,"nodeType":"829","messageId":"830","endLine":36,"endColumn":30},{"ruleId":"823","severity":1,"message":"879","line":44,"column":9,"nodeType":"825","endLine":44,"endColumn":20,"suggestions":"880"},{"ruleId":"827","severity":1,"message":"854","line":77,"column":38,"nodeType":"829","messageId":"830","endLine":77,"endColumn":40},{"ruleId":"827","severity":1,"message":"854","line":80,"column":38,"nodeType":"829","messageId":"830","endLine":80,"endColumn":40},{"ruleId":"827","severity":1,"message":"828","line":91,"column":30,"nodeType":"829","messageId":"830","endLine":91,"endColumn":32},{"ruleId":"841","severity":1,"message":"842","line":127,"column":37,"nodeType":"843","endLine":127,"endColumn":111},{"ruleId":"831","severity":1,"message":"881","line":4,"column":49,"nodeType":"833","messageId":"834","endLine":4,"endColumn":59},{"ruleId":"831","severity":1,"message":"882","line":13,"column":3,"nodeType":"833","messageId":"834","endLine":13,"endColumn":13},{"ruleId":"831","severity":1,"message":"883","line":17,"column":17,"nodeType":"833","messageId":"834","endLine":17,"endColumn":24},{"ruleId":"827","severity":1,"message":"854","line":34,"column":28,"nodeType":"829","messageId":"830","endLine":34,"endColumn":30},{"ruleId":"823","severity":1,"message":"879","line":42,"column":9,"nodeType":"825","endLine":42,"endColumn":20,"suggestions":"884"},{"ruleId":"827","severity":1,"message":"854","line":75,"column":38,"nodeType":"829","messageId":"830","endLine":75,"endColumn":40},{"ruleId":"827","severity":1,"message":"854","line":78,"column":38,"nodeType":"829","messageId":"830","endLine":78,"endColumn":40},{"ruleId":"827","severity":1,"message":"828","line":89,"column":30,"nodeType":"829","messageId":"830","endLine":89,"endColumn":32},{"ruleId":"827","severity":1,"message":"828","line":111,"column":21,"nodeType":"829","messageId":"830","endLine":111,"endColumn":23},{"ruleId":"841","severity":1,"message":"842","line":130,"column":35,"nodeType":"843","endLine":130,"endColumn":78},{"ruleId":"831","severity":1,"message":"885","line":5,"column":10,"nodeType":"833","messageId":"834","endLine":5,"endColumn":14},{"ruleId":"831","severity":1,"message":"886","line":6,"column":10,"nodeType":"833","messageId":"834","endLine":6,"endColumn":23},{"ruleId":"831","severity":1,"message":"887","line":6,"column":25,"nodeType":"833","messageId":"834","endLine":6,"endColumn":33},{"ruleId":"831","severity":1,"message":"888","line":7,"column":10,"nodeType":"833","messageId":"834","endLine":7,"endColumn":24},{"ruleId":"823","severity":1,"message":"862","line":31,"column":6,"nodeType":"825","endLine":31,"endColumn":46,"suggestions":"889"},{"ruleId":"827","severity":1,"message":"828","line":49,"column":22,"nodeType":"829","messageId":"830","endLine":49,"endColumn":24},{"ruleId":"831","severity":1,"message":"836","line":3,"column":9,"nodeType":"833","messageId":"834","endLine":3,"endColumn":12},{"ruleId":"831","severity":1,"message":"837","line":3,"column":13,"nodeType":"833","messageId":"834","endLine":3,"endColumn":16},{"ruleId":"831","severity":1,"message":"890","line":3,"column":17,"nodeType":"833","messageId":"834","endLine":3,"endColumn":22},{"ruleId":"831","severity":1,"message":"838","line":3,"column":23,"nodeType":"833","messageId":"834","endLine":3,"endColumn":32},{"ruleId":"831","severity":1,"message":"891","line":9,"column":33,"nodeType":"833","messageId":"834","endLine":9,"endColumn":38},{"ruleId":"831","severity":1,"message":"858","line":41,"column":12,"nodeType":"833","messageId":"834","endLine":41,"endColumn":17},{"ruleId":"831","severity":1,"message":"859","line":41,"column":18,"nodeType":"833","messageId":"834","endLine":41,"endColumn":26},{"ruleId":"831","severity":1,"message":"892","line":46,"column":8,"nodeType":"833","messageId":"834","endLine":46,"endColumn":12},{"ruleId":"831","severity":1,"message":"893","line":47,"column":8,"nodeType":"833","messageId":"834","endLine":47,"endColumn":11},{"ruleId":"831","severity":1,"message":"894","line":49,"column":7,"nodeType":"833","messageId":"834","endLine":49,"endColumn":18},{"ruleId":"831","severity":1,"message":"895","line":50,"column":7,"nodeType":"833","messageId":"834","endLine":50,"endColumn":17},{"ruleId":"831","severity":1,"message":"896","line":54,"column":7,"nodeType":"833","messageId":"834","endLine":54,"endColumn":20},{"ruleId":"823","severity":1,"message":"897","line":62,"column":7,"nodeType":"825","endLine":62,"endColumn":29,"suggestions":"898"},{"ruleId":"831","severity":1,"message":"860","line":66,"column":15,"nodeType":"833","messageId":"834","endLine":66,"endColumn":21},{"ruleId":"827","severity":1,"message":"854","line":79,"column":14,"nodeType":"829","messageId":"830","endLine":79,"endColumn":16},{"ruleId":"831","severity":1,"message":"899","line":30,"column":10,"nodeType":"833","messageId":"834","endLine":30,"endColumn":12},{"ruleId":"823","severity":1,"message":"862","line":46,"column":6,"nodeType":"825","endLine":46,"endColumn":70,"suggestions":"900"},{"ruleId":"827","severity":1,"message":"828","line":71,"column":24,"nodeType":"829","messageId":"830","endLine":71,"endColumn":26},{"ruleId":"827","severity":1,"message":"854","line":140,"column":14,"nodeType":"829","messageId":"830","endLine":140,"endColumn":16},{"ruleId":"831","severity":1,"message":"866","line":32,"column":11,"nodeType":"833","messageId":"834","endLine":32,"endColumn":22},{"ruleId":"831","severity":1,"message":"860","line":50,"column":15,"nodeType":"833","messageId":"834","endLine":50,"endColumn":21},{"ruleId":"827","severity":1,"message":"828","line":52,"column":30,"nodeType":"829","messageId":"830","endLine":52,"endColumn":32},{"ruleId":"827","severity":1,"message":"828","line":52,"column":54,"nodeType":"829","messageId":"830","endLine":52,"endColumn":56},{"ruleId":"827","severity":1,"message":"828","line":53,"column":30,"nodeType":"829","messageId":"830","endLine":53,"endColumn":32},{"ruleId":"827","severity":1,"message":"828","line":55,"column":33,"nodeType":"829","messageId":"830","endLine":55,"endColumn":35},{"ruleId":"827","severity":1,"message":"828","line":81,"column":14,"nodeType":"829","messageId":"830","endLine":81,"endColumn":16},{"ruleId":"827","severity":1,"message":"828","line":85,"column":19,"nodeType":"829","messageId":"830","endLine":85,"endColumn":21},{"ruleId":"831","severity":1,"message":"871","line":18,"column":7,"nodeType":"833","messageId":"834","endLine":18,"endColumn":21},{"ruleId":"831","severity":1,"message":"872","line":29,"column":10,"nodeType":"833","messageId":"834","endLine":29,"endColumn":14},{"ruleId":"831","severity":1,"message":"899","line":45,"column":10,"nodeType":"833","messageId":"834","endLine":45,"endColumn":12},{"ruleId":"831","severity":1,"message":"901","line":45,"column":13,"nodeType":"833","messageId":"834","endLine":45,"endColumn":18},{"ruleId":"827","severity":1,"message":"828","line":69,"column":40,"nodeType":"829","messageId":"830","endLine":69,"endColumn":42},{"ruleId":"827","severity":1,"message":"828","line":74,"column":42,"nodeType":"829","messageId":"830","endLine":74,"endColumn":44},{"ruleId":"823","severity":1,"message":"862","line":81,"column":5,"nodeType":"825","endLine":81,"endColumn":45,"suggestions":"902"},{"ruleId":"827","severity":1,"message":"828","line":102,"column":22,"nodeType":"829","messageId":"830","endLine":102,"endColumn":24},{"ruleId":"827","severity":1,"message":"828","line":159,"column":12,"nodeType":"829","messageId":"830","endLine":159,"endColumn":14},{"ruleId":"827","severity":1,"message":"828","line":164,"column":17,"nodeType":"829","messageId":"830","endLine":164,"endColumn":19},{"ruleId":"827","severity":1,"message":"828","line":168,"column":17,"nodeType":"829","messageId":"830","endLine":168,"endColumn":19},{"ruleId":"827","severity":1,"message":"828","line":236,"column":93,"nodeType":"829","messageId":"830","endLine":236,"endColumn":95},{"ruleId":"827","severity":1,"message":"828","line":242,"column":58,"nodeType":"829","messageId":"830","endLine":242,"endColumn":60},{"ruleId":"841","severity":1,"message":"842","line":251,"column":31,"nodeType":"843","endLine":251,"endColumn":113},{"ruleId":"841","severity":1,"message":"842","line":372,"column":33,"nodeType":"843","endLine":372,"endColumn":112},{"ruleId":"827","severity":1,"message":"828","line":398,"column":89,"nodeType":"829","messageId":"830","endLine":398,"endColumn":91},{"ruleId":"827","severity":1,"message":"828","line":404,"column":95,"nodeType":"829","messageId":"830","endLine":404,"endColumn":97},{"ruleId":"823","severity":1,"message":"824","line":12,"column":7,"nodeType":"825","endLine":12,"endColumn":43,"suggestions":"903"},{"ruleId":"827","severity":1,"message":"828","line":25,"column":9,"nodeType":"829","messageId":"830","endLine":25,"endColumn":11},{"ruleId":"827","severity":1,"message":"854","line":29,"column":20,"nodeType":"829","messageId":"830","endLine":29,"endColumn":22},{"ruleId":"827","severity":1,"message":"828","line":43,"column":43,"nodeType":"829","messageId":"830","endLine":43,"endColumn":45},{"ruleId":"827","severity":1,"message":"828","line":107,"column":26,"nodeType":"829","messageId":"830","endLine":107,"endColumn":28},{"ruleId":"823","severity":1,"message":"824","line":12,"column":7,"nodeType":"825","endLine":12,"endColumn":46,"suggestions":"904"},{"ruleId":"827","severity":1,"message":"828","line":25,"column":9,"nodeType":"829","messageId":"830","endLine":25,"endColumn":11},{"ruleId":"827","severity":1,"message":"828","line":42,"column":43,"nodeType":"829","messageId":"830","endLine":42,"endColumn":45},{"ruleId":"827","severity":1,"message":"828","line":111,"column":26,"nodeType":"829","messageId":"830","endLine":111,"endColumn":28},{"ruleId":"831","severity":1,"message":"905","line":60,"column":17,"nodeType":"833","messageId":"834","endLine":60,"endColumn":25},{"ruleId":"831","severity":1,"message":"905","line":61,"column":17,"nodeType":"833","messageId":"834","endLine":61,"endColumn":25},{"ruleId":"815","replacedBy":"906"},{"ruleId":"817","replacedBy":"907"},{"ruleId":"819","severity":1,"message":"820","line":91,"column":32,"nodeType":"821","messageId":"822","endLine":91,"endColumn":34},{"ruleId":"819","severity":1,"message":"820","line":91,"column":36,"nodeType":"821","messageId":"822","endLine":91,"endColumn":38},{"ruleId":"819","severity":1,"message":"820","line":90,"column":36,"nodeType":"821","messageId":"822","endLine":90,"endColumn":38},{"ruleId":"819","severity":1,"message":"820","line":91,"column":45,"nodeType":"821","messageId":"822","endLine":91,"endColumn":47},{"ruleId":"819","severity":1,"message":"820","line":89,"column":32,"nodeType":"821","messageId":"822","endLine":89,"endColumn":34},{"ruleId":"823","severity":1,"message":"824","line":20,"column":8,"nodeType":"825","endLine":20,"endColumn":66,"suggestions":"908"},{"ruleId":"827","severity":1,"message":"828","line":30,"column":109,"nodeType":"829","messageId":"830","endLine":30,"endColumn":111},{"ruleId":"827","severity":1,"message":"828","line":53,"column":108,"nodeType":"829","messageId":"830","endLine":53,"endColumn":110},{"ruleId":"827","severity":1,"message":"828","line":64,"column":109,"nodeType":"829","messageId":"830","endLine":64,"endColumn":111},{"ruleId":"823","severity":1,"message":"839","line":14,"column":5,"nodeType":"825","endLine":14,"endColumn":18,"suggestions":"909"},{"ruleId":"841","severity":1,"message":"842","line":42,"column":62,"nodeType":"843","endLine":42,"endColumn":256},{"ruleId":"844","severity":1,"message":"845","line":81,"column":67,"nodeType":"843","endLine":81,"endColumn":153},{"ruleId":"831","severity":1,"message":"832","line":1,"column":17,"nodeType":"833","messageId":"834","endLine":1,"endColumn":26},{"ruleId":"831","severity":1,"message":"835","line":1,"column":28,"nodeType":"833","messageId":"834","endLine":1,"endColumn":37},{"ruleId":"831","severity":1,"message":"836","line":4,"column":11,"nodeType":"833","messageId":"834","endLine":4,"endColumn":14},{"ruleId":"831","severity":1,"message":"837","line":4,"column":16,"nodeType":"833","messageId":"834","endLine":4,"endColumn":19},{"ruleId":"831","severity":1,"message":"838","line":4,"column":26,"nodeType":"833","messageId":"834","endLine":4,"endColumn":35},{"ruleId":"831","severity":1,"message":"846","line":4,"column":21,"nodeType":"833","messageId":"834","endLine":4,"endColumn":35},{"ruleId":"831","severity":1,"message":"847","line":7,"column":10,"nodeType":"833","messageId":"834","endLine":7,"endColumn":22},{"ruleId":"831","severity":1,"message":"848","line":7,"column":24,"nodeType":"833","messageId":"834","endLine":7,"endColumn":30},{"ruleId":"831","severity":1,"message":"849","line":7,"column":32,"nodeType":"833","messageId":"834","endLine":7,"endColumn":38},{"ruleId":"831","severity":1,"message":"850","line":7,"column":40,"nodeType":"833","messageId":"834","endLine":7,"endColumn":46},{"ruleId":"831","severity":1,"message":"851","line":7,"column":48,"nodeType":"833","messageId":"834","endLine":7,"endColumn":55},{"ruleId":"831","severity":1,"message":"852","line":7,"column":57,"nodeType":"833","messageId":"834","endLine":7,"endColumn":65},{"ruleId":"823","severity":1,"message":"824","line":13,"column":5,"nodeType":"825","endLine":13,"endColumn":27,"suggestions":"910"},{"ruleId":"827","severity":1,"message":"828","line":48,"column":21,"nodeType":"829","messageId":"830","endLine":48,"endColumn":23},{"ruleId":"827","severity":1,"message":"828","line":48,"column":42,"nodeType":"829","messageId":"830","endLine":48,"endColumn":44},{"ruleId":"827","severity":1,"message":"828","line":48,"column":65,"nodeType":"829","messageId":"830","endLine":48,"endColumn":67},{"ruleId":"827","severity":1,"message":"828","line":48,"column":87,"nodeType":"829","messageId":"830","endLine":48,"endColumn":89},{"ruleId":"827","severity":1,"message":"828","line":48,"column":106,"nodeType":"829","messageId":"830","endLine":48,"endColumn":108},{"ruleId":"827","severity":1,"message":"854","line":48,"column":125,"nodeType":"829","messageId":"830","endLine":48,"endColumn":127},{"ruleId":"827","severity":1,"message":"828","line":49,"column":23,"nodeType":"829","messageId":"830","endLine":49,"endColumn":25},{"ruleId":"827","severity":1,"message":"828","line":53,"column":22,"nodeType":"829","messageId":"830","endLine":53,"endColumn":24},{"ruleId":"827","severity":1,"message":"828","line":57,"column":24,"nodeType":"829","messageId":"830","endLine":57,"endColumn":26},{"ruleId":"827","severity":1,"message":"828","line":61,"column":23,"nodeType":"829","messageId":"830","endLine":61,"endColumn":25},{"ruleId":"827","severity":1,"message":"828","line":65,"column":20,"nodeType":"829","messageId":"830","endLine":65,"endColumn":22},{"ruleId":"827","severity":1,"message":"854","line":69,"column":20,"nodeType":"829","messageId":"830","endLine":69,"endColumn":22},{"ruleId":"827","severity":1,"message":"828","line":84,"column":22,"nodeType":"829","messageId":"830","endLine":84,"endColumn":24},{"ruleId":"827","severity":1,"message":"828","line":104,"column":14,"nodeType":"829","messageId":"830","endLine":104,"endColumn":16},{"ruleId":"844","severity":1,"message":"845","line":163,"column":19,"nodeType":"843","endLine":163,"endColumn":135},{"ruleId":"844","severity":1,"message":"845","line":166,"column":19,"nodeType":"843","endLine":166,"endColumn":186},{"ruleId":"844","severity":1,"message":"845","line":239,"column":126,"nodeType":"843","endLine":239,"endColumn":218},{"ruleId":"823","severity":1,"message":"824","line":12,"column":5,"nodeType":"825","endLine":12,"endColumn":27,"suggestions":"911"},{"ruleId":"827","severity":1,"message":"828","line":50,"column":21,"nodeType":"829","messageId":"830","endLine":50,"endColumn":23},{"ruleId":"827","severity":1,"message":"828","line":50,"column":42,"nodeType":"829","messageId":"830","endLine":50,"endColumn":44},{"ruleId":"827","severity":1,"message":"828","line":50,"column":65,"nodeType":"829","messageId":"830","endLine":50,"endColumn":67},{"ruleId":"827","severity":1,"message":"828","line":50,"column":87,"nodeType":"829","messageId":"830","endLine":50,"endColumn":89},{"ruleId":"827","severity":1,"message":"828","line":50,"column":106,"nodeType":"829","messageId":"830","endLine":50,"endColumn":108},{"ruleId":"827","severity":1,"message":"854","line":50,"column":125,"nodeType":"829","messageId":"830","endLine":50,"endColumn":127},{"ruleId":"827","severity":1,"message":"854","line":50,"column":149,"nodeType":"829","messageId":"830","endLine":50,"endColumn":151},{"ruleId":"827","severity":1,"message":"828","line":51,"column":23,"nodeType":"829","messageId":"830","endLine":51,"endColumn":25},{"ruleId":"827","severity":1,"message":"828","line":55,"column":22,"nodeType":"829","messageId":"830","endLine":55,"endColumn":24},{"ruleId":"827","severity":1,"message":"828","line":59,"column":24,"nodeType":"829","messageId":"830","endLine":59,"endColumn":26},{"ruleId":"827","severity":1,"message":"828","line":63,"column":23,"nodeType":"829","messageId":"830","endLine":63,"endColumn":25},{"ruleId":"827","severity":1,"message":"828","line":67,"column":20,"nodeType":"829","messageId":"830","endLine":67,"endColumn":22},{"ruleId":"827","severity":1,"message":"828","line":71,"column":26,"nodeType":"829","messageId":"830","endLine":71,"endColumn":28},{"ruleId":"827","severity":1,"message":"854","line":75,"column":20,"nodeType":"829","messageId":"830","endLine":75,"endColumn":22},{"ruleId":"827","severity":1,"message":"828","line":91,"column":22,"nodeType":"829","messageId":"830","endLine":91,"endColumn":24},{"ruleId":"827","severity":1,"message":"828","line":112,"column":14,"nodeType":"829","messageId":"830","endLine":112,"endColumn":16},{"ruleId":"844","severity":1,"message":"845","line":170,"column":19,"nodeType":"843","endLine":170,"endColumn":180},{"ruleId":"844","severity":1,"message":"845","line":173,"column":19,"nodeType":"843","endLine":173,"endColumn":141},{"ruleId":"844","severity":1,"message":"845","line":255,"column":126,"nodeType":"843","endLine":255,"endColumn":218},{"ruleId":"831","severity":1,"message":"832","line":1,"column":17,"nodeType":"833","messageId":"834","endLine":1,"endColumn":26},{"ruleId":"831","severity":1,"message":"836","line":4,"column":11,"nodeType":"833","messageId":"834","endLine":4,"endColumn":14},{"ruleId":"831","severity":1,"message":"837","line":4,"column":16,"nodeType":"833","messageId":"834","endLine":4,"endColumn":19},{"ruleId":"831","severity":1,"message":"838","line":4,"column":26,"nodeType":"833","messageId":"834","endLine":4,"endColumn":35},{"ruleId":"823","severity":1,"message":"824","line":12,"column":5,"nodeType":"825","endLine":12,"endColumn":33,"suggestions":"912"},{"ruleId":"831","severity":1,"message":"832","line":1,"column":17,"nodeType":"833","messageId":"834","endLine":1,"endColumn":26},{"ruleId":"823","severity":1,"message":"824","line":11,"column":5,"nodeType":"825","endLine":11,"endColumn":45,"suggestions":"913"},{"ruleId":"823","severity":1,"message":"862","line":44,"column":6,"nodeType":"825","endLine":44,"endColumn":42,"suggestions":"914"},{"ruleId":"827","severity":1,"message":"828","line":65,"column":24,"nodeType":"829","messageId":"830","endLine":65,"endColumn":26},{"ruleId":"831","severity":1,"message":"857","line":3,"column":9,"nodeType":"833","messageId":"834","endLine":3,"endColumn":14},{"ruleId":"831","severity":1,"message":"858","line":42,"column":12,"nodeType":"833","messageId":"834","endLine":42,"endColumn":17},{"ruleId":"831","severity":1,"message":"859","line":42,"column":19,"nodeType":"833","messageId":"834","endLine":42,"endColumn":27},{"ruleId":"831","severity":1,"message":"860","line":50,"column":19,"nodeType":"833","messageId":"834","endLine":50,"endColumn":25},{"ruleId":"831","severity":1,"message":"915","line":2,"column":10,"nodeType":"833","messageId":"834","endLine":2,"endColumn":20},{"ruleId":"831","severity":1,"message":"916","line":2,"column":22,"nodeType":"833","messageId":"834","endLine":2,"endColumn":35},{"ruleId":"831","severity":1,"message":"917","line":2,"column":37,"nodeType":"833","messageId":"834","endLine":2,"endColumn":50},{"ruleId":"831","severity":1,"message":"918","line":2,"column":52,"nodeType":"833","messageId":"834","endLine":2,"endColumn":71},{"ruleId":"831","severity":1,"message":"919","line":4,"column":10,"nodeType":"833","messageId":"834","endLine":4,"endColumn":24},{"ruleId":"831","severity":1,"message":"920","line":4,"column":26,"nodeType":"833","messageId":"834","endLine":4,"endColumn":46},{"ruleId":"831","severity":1,"message":"891","line":8,"column":17,"nodeType":"833","messageId":"834","endLine":8,"endColumn":22},{"ruleId":"831","severity":1,"message":"921","line":8,"column":24,"nodeType":"833","messageId":"834","endLine":8,"endColumn":30},{"ruleId":"831","severity":1,"message":"890","line":8,"column":56,"nodeType":"833","messageId":"834","endLine":8,"endColumn":61},{"ruleId":"831","severity":1,"message":"922","line":8,"column":63,"nodeType":"833","messageId":"834","endLine":8,"endColumn":68},{"ruleId":"831","severity":1,"message":"837","line":8,"column":70,"nodeType":"833","messageId":"834","endLine":8,"endColumn":73},{"ruleId":"831","severity":1,"message":"923","line":8,"column":75,"nodeType":"833","messageId":"834","endLine":8,"endColumn":85},{"ruleId":"831","severity":1,"message":"924","line":8,"column":87,"nodeType":"833","messageId":"834","endLine":8,"endColumn":97},{"ruleId":"831","severity":1,"message":"836","line":8,"column":99,"nodeType":"833","messageId":"834","endLine":8,"endColumn":102},{"ruleId":"831","severity":1,"message":"864","line":8,"column":112,"nodeType":"833","messageId":"834","endLine":8,"endColumn":118},{"ruleId":"823","severity":1,"message":"925","line":31,"column":16,"nodeType":"821","endLine":34,"endColumn":6},{"ruleId":"823","severity":1,"message":"824","line":34,"column":8,"nodeType":"825","endLine":34,"endColumn":25,"suggestions":"926"},{"ruleId":"827","severity":1,"message":"854","line":46,"column":14,"nodeType":"829","messageId":"830","endLine":46,"endColumn":16},{"ruleId":"831","severity":1,"message":"857","line":5,"column":9,"nodeType":"833","messageId":"834","endLine":5,"endColumn":14},{"ruleId":"831","severity":1,"message":"864","line":12,"column":3,"nodeType":"833","messageId":"834","endLine":12,"endColumn":9},{"ruleId":"831","severity":1,"message":"865","line":15,"column":8,"nodeType":"833","messageId":"834","endLine":15,"endColumn":14},{"ruleId":"831","severity":1,"message":"866","line":35,"column":11,"nodeType":"833","messageId":"834","endLine":35,"endColumn":22},{"ruleId":"823","severity":1,"message":"824","line":53,"column":5,"nodeType":"825","endLine":53,"endColumn":60,"suggestions":"927"},{"ruleId":"831","severity":1,"message":"860","line":57,"column":13,"nodeType":"833","messageId":"834","endLine":57,"endColumn":19},{"ruleId":"827","severity":1,"message":"828","line":81,"column":19,"nodeType":"829","messageId":"830","endLine":81,"endColumn":21},{"ruleId":"827","severity":1,"message":"828","line":81,"column":45,"nodeType":"829","messageId":"830","endLine":81,"endColumn":47},{"ruleId":"827","severity":1,"message":"828","line":86,"column":19,"nodeType":"829","messageId":"830","endLine":86,"endColumn":21},{"ruleId":"827","severity":1,"message":"828","line":86,"column":46,"nodeType":"829","messageId":"830","endLine":86,"endColumn":48},{"ruleId":"827","severity":1,"message":"828","line":93,"column":14,"nodeType":"829","messageId":"830","endLine":93,"endColumn":16},{"ruleId":"868","severity":1,"message":"869","line":208,"column":4,"nodeType":"870","messageId":"830","endLine":208,"endColumn":9},{"ruleId":"831","severity":1,"message":"860","line":39,"column":13,"nodeType":"833","messageId":"834","endLine":39,"endColumn":19},{"ruleId":"831","severity":1,"message":"864","line":7,"column":106,"nodeType":"833","messageId":"834","endLine":7,"endColumn":112},{"ruleId":"831","severity":1,"message":"865","line":10,"column":8,"nodeType":"833","messageId":"834","endLine":10,"endColumn":14},{"ruleId":"831","severity":1,"message":"871","line":19,"column":7,"nodeType":"833","messageId":"834","endLine":19,"endColumn":21},{"ruleId":"831","severity":1,"message":"872","line":29,"column":10,"nodeType":"833","messageId":"834","endLine":29,"endColumn":14},{"ruleId":"831","severity":1,"message":"858","line":30,"column":10,"nodeType":"833","messageId":"834","endLine":30,"endColumn":15},{"ruleId":"831","severity":1,"message":"859","line":30,"column":16,"nodeType":"833","messageId":"834","endLine":30,"endColumn":24},{"ruleId":"823","severity":1,"message":"862","line":70,"column":6,"nodeType":"825","endLine":70,"endColumn":44,"suggestions":"928"},{"ruleId":"874","severity":1,"message":"875","line":119,"column":19,"nodeType":"825","messageId":"876","endLine":174,"endColumn":4},{"ruleId":"827","severity":1,"message":"828","line":182,"column":19,"nodeType":"829","messageId":"830","endLine":182,"endColumn":21},{"ruleId":"827","severity":1,"message":"828","line":182,"column":45,"nodeType":"829","messageId":"830","endLine":182,"endColumn":47},{"ruleId":"827","severity":1,"message":"828","line":187,"column":19,"nodeType":"829","messageId":"830","endLine":187,"endColumn":21},{"ruleId":"827","severity":1,"message":"828","line":187,"column":46,"nodeType":"829","messageId":"830","endLine":187,"endColumn":48},{"ruleId":"831","severity":1,"message":"885","line":5,"column":10,"nodeType":"833","messageId":"834","endLine":5,"endColumn":14},{"ruleId":"831","severity":1,"message":"886","line":6,"column":10,"nodeType":"833","messageId":"834","endLine":6,"endColumn":23},{"ruleId":"831","severity":1,"message":"887","line":6,"column":25,"nodeType":"833","messageId":"834","endLine":6,"endColumn":33},{"ruleId":"831","severity":1,"message":"888","line":7,"column":10,"nodeType":"833","messageId":"834","endLine":7,"endColumn":24},{"ruleId":"823","severity":1,"message":"862","line":31,"column":6,"nodeType":"825","endLine":31,"endColumn":46,"suggestions":"929"},{"ruleId":"827","severity":1,"message":"828","line":49,"column":22,"nodeType":"829","messageId":"830","endLine":49,"endColumn":24},{"ruleId":"831","severity":1,"message":"878","line":16,"column":24,"nodeType":"833","messageId":"834","endLine":16,"endColumn":43},{"ruleId":"827","severity":1,"message":"854","line":36,"column":26,"nodeType":"829","messageId":"830","endLine":36,"endColumn":28},{"ruleId":"823","severity":1,"message":"879","line":43,"column":6,"nodeType":"825","endLine":43,"endColumn":17,"suggestions":"930"},{"ruleId":"827","severity":1,"message":"854","line":76,"column":33,"nodeType":"829","messageId":"830","endLine":76,"endColumn":35},{"ruleId":"827","severity":1,"message":"854","line":79,"column":28,"nodeType":"829","messageId":"830","endLine":79,"endColumn":30},{"ruleId":"827","severity":1,"message":"828","line":90,"column":24,"nodeType":"829","messageId":"830","endLine":90,"endColumn":26},{"ruleId":"841","severity":1,"message":"842","line":126,"column":31,"nodeType":"843","endLine":126,"endColumn":111},{"ruleId":"831","severity":1,"message":"881","line":4,"column":49,"nodeType":"833","messageId":"834","endLine":4,"endColumn":59},{"ruleId":"831","severity":1,"message":"882","line":13,"column":3,"nodeType":"833","messageId":"834","endLine":13,"endColumn":13},{"ruleId":"831","severity":1,"message":"883","line":17,"column":17,"nodeType":"833","messageId":"834","endLine":17,"endColumn":24},{"ruleId":"827","severity":1,"message":"854","line":34,"column":28,"nodeType":"829","messageId":"830","endLine":34,"endColumn":30},{"ruleId":"823","severity":1,"message":"879","line":42,"column":9,"nodeType":"825","endLine":42,"endColumn":20,"suggestions":"931"},{"ruleId":"827","severity":1,"message":"854","line":75,"column":38,"nodeType":"829","messageId":"830","endLine":75,"endColumn":40},{"ruleId":"827","severity":1,"message":"854","line":78,"column":38,"nodeType":"829","messageId":"830","endLine":78,"endColumn":40},{"ruleId":"827","severity":1,"message":"828","line":89,"column":30,"nodeType":"829","messageId":"830","endLine":89,"endColumn":32},{"ruleId":"827","severity":1,"message":"828","line":111,"column":21,"nodeType":"829","messageId":"830","endLine":111,"endColumn":23},{"ruleId":"841","severity":1,"message":"842","line":130,"column":35,"nodeType":"843","endLine":130,"endColumn":78},{"ruleId":"831","severity":1,"message":"836","line":3,"column":9,"nodeType":"833","messageId":"834","endLine":3,"endColumn":12},{"ruleId":"831","severity":1,"message":"837","line":3,"column":13,"nodeType":"833","messageId":"834","endLine":3,"endColumn":16},{"ruleId":"831","severity":1,"message":"890","line":3,"column":17,"nodeType":"833","messageId":"834","endLine":3,"endColumn":22},{"ruleId":"831","severity":1,"message":"838","line":3,"column":23,"nodeType":"833","messageId":"834","endLine":3,"endColumn":32},{"ruleId":"831","severity":1,"message":"891","line":9,"column":33,"nodeType":"833","messageId":"834","endLine":9,"endColumn":38},{"ruleId":"831","severity":1,"message":"858","line":41,"column":12,"nodeType":"833","messageId":"834","endLine":41,"endColumn":17},{"ruleId":"831","severity":1,"message":"859","line":41,"column":18,"nodeType":"833","messageId":"834","endLine":41,"endColumn":26},{"ruleId":"831","severity":1,"message":"892","line":46,"column":8,"nodeType":"833","messageId":"834","endLine":46,"endColumn":12},{"ruleId":"831","severity":1,"message":"893","line":47,"column":8,"nodeType":"833","messageId":"834","endLine":47,"endColumn":11},{"ruleId":"831","severity":1,"message":"894","line":49,"column":7,"nodeType":"833","messageId":"834","endLine":49,"endColumn":18},{"ruleId":"831","severity":1,"message":"895","line":50,"column":7,"nodeType":"833","messageId":"834","endLine":50,"endColumn":17},{"ruleId":"831","severity":1,"message":"896","line":54,"column":7,"nodeType":"833","messageId":"834","endLine":54,"endColumn":20},{"ruleId":"823","severity":1,"message":"897","line":62,"column":7,"nodeType":"825","endLine":62,"endColumn":29,"suggestions":"932"},{"ruleId":"831","severity":1,"message":"860","line":66,"column":15,"nodeType":"833","messageId":"834","endLine":66,"endColumn":21},{"ruleId":"827","severity":1,"message":"854","line":79,"column":14,"nodeType":"829","messageId":"830","endLine":79,"endColumn":16},{"ruleId":"831","severity":1,"message":"899","line":30,"column":10,"nodeType":"833","messageId":"834","endLine":30,"endColumn":12},{"ruleId":"823","severity":1,"message":"862","line":46,"column":6,"nodeType":"825","endLine":46,"endColumn":70,"suggestions":"933"},{"ruleId":"827","severity":1,"message":"828","line":71,"column":24,"nodeType":"829","messageId":"830","endLine":71,"endColumn":26},{"ruleId":"827","severity":1,"message":"854","line":140,"column":14,"nodeType":"829","messageId":"830","endLine":140,"endColumn":16},{"ruleId":"823","severity":1,"message":"824","line":12,"column":7,"nodeType":"825","endLine":12,"endColumn":43,"suggestions":"934"},{"ruleId":"827","severity":1,"message":"828","line":25,"column":9,"nodeType":"829","messageId":"830","endLine":25,"endColumn":11},{"ruleId":"827","severity":1,"message":"854","line":29,"column":20,"nodeType":"829","messageId":"830","endLine":29,"endColumn":22},{"ruleId":"827","severity":1,"message":"828","line":43,"column":43,"nodeType":"829","messageId":"830","endLine":43,"endColumn":45},{"ruleId":"827","severity":1,"message":"828","line":107,"column":26,"nodeType":"829","messageId":"830","endLine":107,"endColumn":28},{"ruleId":"823","severity":1,"message":"824","line":12,"column":7,"nodeType":"825","endLine":12,"endColumn":46,"suggestions":"935"},{"ruleId":"827","severity":1,"message":"828","line":25,"column":9,"nodeType":"829","messageId":"830","endLine":25,"endColumn":11},{"ruleId":"827","severity":1,"message":"828","line":42,"column":43,"nodeType":"829","messageId":"830","endLine":42,"endColumn":45},{"ruleId":"827","severity":1,"message":"828","line":111,"column":26,"nodeType":"829","messageId":"830","endLine":111,"endColumn":28},{"ruleId":"831","severity":1,"message":"866","line":32,"column":11,"nodeType":"833","messageId":"834","endLine":32,"endColumn":22},{"ruleId":"831","severity":1,"message":"860","line":50,"column":15,"nodeType":"833","messageId":"834","endLine":50,"endColumn":21},{"ruleId":"827","severity":1,"message":"828","line":52,"column":30,"nodeType":"829","messageId":"830","endLine":52,"endColumn":32},{"ruleId":"827","severity":1,"message":"828","line":52,"column":54,"nodeType":"829","messageId":"830","endLine":52,"endColumn":56},{"ruleId":"827","severity":1,"message":"828","line":53,"column":30,"nodeType":"829","messageId":"830","endLine":53,"endColumn":32},{"ruleId":"827","severity":1,"message":"828","line":55,"column":33,"nodeType":"829","messageId":"830","endLine":55,"endColumn":35},{"ruleId":"827","severity":1,"message":"828","line":81,"column":14,"nodeType":"829","messageId":"830","endLine":81,"endColumn":16},{"ruleId":"827","severity":1,"message":"828","line":85,"column":19,"nodeType":"829","messageId":"830","endLine":85,"endColumn":21},{"ruleId":"831","severity":1,"message":"872","line":20,"column":10,"nodeType":"833","messageId":"834","endLine":20,"endColumn":14},{"ruleId":"831","severity":1,"message":"899","line":36,"column":10,"nodeType":"833","messageId":"834","endLine":36,"endColumn":12},{"ruleId":"831","severity":1,"message":"901","line":36,"column":13,"nodeType":"833","messageId":"834","endLine":36,"endColumn":18},{"ruleId":"827","severity":1,"message":"828","line":60,"column":40,"nodeType":"829","messageId":"830","endLine":60,"endColumn":42},{"ruleId":"827","severity":1,"message":"828","line":65,"column":42,"nodeType":"829","messageId":"830","endLine":65,"endColumn":44},{"ruleId":"823","severity":1,"message":"862","line":72,"column":5,"nodeType":"825","endLine":72,"endColumn":45,"suggestions":"936"},{"ruleId":"827","severity":1,"message":"828","line":93,"column":22,"nodeType":"829","messageId":"830","endLine":93,"endColumn":24},{"ruleId":"827","severity":1,"message":"828","line":150,"column":12,"nodeType":"829","messageId":"830","endLine":150,"endColumn":14},{"ruleId":"827","severity":1,"message":"828","line":155,"column":17,"nodeType":"829","messageId":"830","endLine":155,"endColumn":19},{"ruleId":"827","severity":1,"message":"828","line":159,"column":17,"nodeType":"829","messageId":"830","endLine":159,"endColumn":19},{"ruleId":"827","severity":1,"message":"828","line":227,"column":93,"nodeType":"829","messageId":"830","endLine":227,"endColumn":95},{"ruleId":"827","severity":1,"message":"828","line":233,"column":58,"nodeType":"829","messageId":"830","endLine":233,"endColumn":60},{"ruleId":"841","severity":1,"message":"842","line":242,"column":31,"nodeType":"843","endLine":242,"endColumn":113},{"ruleId":"841","severity":1,"message":"842","line":363,"column":33,"nodeType":"843","endLine":363,"endColumn":112},{"ruleId":"827","severity":1,"message":"828","line":389,"column":89,"nodeType":"829","messageId":"830","endLine":389,"endColumn":91},{"ruleId":"827","severity":1,"message":"828","line":395,"column":95,"nodeType":"829","messageId":"830","endLine":395,"endColumn":97},{"ruleId":"831","severity":1,"message":"905","line":60,"column":17,"nodeType":"833","messageId":"834","endLine":60,"endColumn":25},{"ruleId":"831","severity":1,"message":"905","line":61,"column":17,"nodeType":"833","messageId":"834","endLine":61,"endColumn":25},{"ruleId":"937","severity":1,"message":"938","line":16,"column":13,"nodeType":"939","messageId":"940","endLine":16,"endColumn":19},{"ruleId":"937","severity":1,"message":"938","line":34,"column":17,"nodeType":"939","messageId":"940","endLine":34,"endColumn":23},{"ruleId":"831","severity":1,"message":"891","line":8,"column":35,"nodeType":"833","messageId":"834","endLine":8,"endColumn":40},{"ruleId":"831","severity":1,"message":"921","line":8,"column":42,"nodeType":"833","messageId":"834","endLine":8,"endColumn":48},{"ruleId":"831","severity":1,"message":"890","line":8,"column":50,"nodeType":"833","messageId":"834","endLine":8,"endColumn":55},{"ruleId":"823","severity":1,"message":"925","line":23,"column":15,"nodeType":"821","endLine":30,"endColumn":6},{"ruleId":"823","severity":1,"message":"824","line":30,"column":8,"nodeType":"825","endLine":30,"endColumn":68,"suggestions":"941"},"no-native-reassign",["942"],"no-negated-in-lhs",["943"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["944"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'CardGroup' is defined but never used.","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["945"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'fetchusersdata' is defined but never used.","'MDBContainer' is defined but never used.","'MDBRow' is defined but never used.","'MDBCol' is defined but never used.","'MDBBtn' is defined but never used.","'MDBCard' is defined but never used.","'MDBInput' is defined but never used.",["946"],"Expected '!==' and instead saw '!='.",["947"],["948"],"'login' is defined but never used.","'error' is assigned a value but never used.","'setError' is assigned a value but never used.","'values' is assigned a value but never used.",["949"],"React Hook useEffect has missing dependencies: 'obj' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["950"],"'Switch' is defined but never used.","'Option' is assigned a value but never used.","'RangePicker' is assigned a value but never used.",["951"],"no-dupe-keys","Duplicate key 'error'.","ObjectExpression","'formTailLayout' is assigned a value but never used.","'form' is assigned a value but never used.",["952"],"no-sparse-arrays","Unexpected comma in middle of array.","unexpectedSparseArray","'SlackSquareOutlined' is defined but never used.","'WeiboSquareOutlined' is defined but never used.","React Hook useEffect has a missing dependency: 'active'. Either include it or remove the dependency array.",["953"],"'Breadcrumb' is defined but never used.","'QqOutlined' is defined but never used.","'Content' is assigned a value but never used.",["954"],"'Link' is defined but never used.","'BiPlusMedical' is defined but never used.","'BiSearch' is defined but never used.","'FiAlignJustify' is defined but never used.",["955"],"'Modal' is defined but never used.","'Space' is defined but never used.","'show' is assigned a value but never used.","'ids' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'handleShow' is assigned a value but never used.","'deleteHandler' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'form' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["956"],"'op' is assigned a value but never used.",["957"],"'setOp' is assigned a value but never used.",["958"],["959"],["960"],"'response' is assigned a value but never used.",["942"],["943"],["961"],["962"],["963"],["964"],["965"],["966"],["967"],"'gettscreen' is defined but never used.","'deletetscreen' is defined but never used.","'updatetscreen' is defined but never used.","'singletscreenrecord' is defined but never used.","'fetchmoviedata' is defined but never used.","'singlemovieDataFetch' is defined but never used.","'Button' is defined but never used.","'Input' is defined but never used.","'DatePicker' is defined but never used.","'TimePicker' is defined but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching",["968"],["969"],["970"],["971"],["972"],["973"],["974"],["975"],["976"],["977"],["978"],"no-unreachable","Unreachable code.","BreakStatement","unreachableCode",["979"],"no-global-assign","no-unsafe-negation",{"desc":"980","fix":"981"},{"desc":"982","fix":"983"},{"desc":"984","fix":"985"},{"desc":"984","fix":"986"},{"desc":"987","fix":"988"},{"desc":"989","fix":"990"},{"desc":"991","fix":"992"},{"desc":"993","fix":"994"},{"desc":"995","fix":"996"},{"desc":"997","fix":"998"},{"desc":"997","fix":"999"},{"desc":"1000","fix":"1001"},{"desc":"1002","fix":"1003"},{"desc":"1004","fix":"1005"},{"desc":"1006","fix":"1007"},{"desc":"1008","fix":"1009"},{"desc":"1010","fix":"1011"},{"desc":"980","fix":"1012"},{"desc":"982","fix":"1013"},{"desc":"984","fix":"1014"},{"desc":"984","fix":"1015"},{"desc":"987","fix":"1016"},{"desc":"989","fix":"1017"},{"desc":"991","fix":"1018"},{"desc":"1019","fix":"1020"},{"desc":"993","fix":"1021"},{"desc":"995","fix":"1022"},{"desc":"1000","fix":"1023"},{"desc":"997","fix":"1024"},{"desc":"997","fix":"1025"},{"desc":"1002","fix":"1026"},{"desc":"1004","fix":"1027"},{"desc":"1008","fix":"1028"},{"desc":"1010","fix":"1029"},{"desc":"1006","fix":"1030"},{"desc":"1031","fix":"1032"},"Update the dependencies array to be: [props.location.pathname, props.autoCheckLogin, props.token, props]",{"range":"1033","text":"1034"},"Update the dependencies array to be: [props.history, props.token]",{"range":"1035","text":"1036"},"Update the dependencies array to be: [props, props.fetchstatedata]",{"range":"1037","text":"1038"},{"range":"1039","text":"1038"},"Update the dependencies array to be: [props, props.fetchDashboradRecord]",{"range":"1040","text":"1041"},"Update the dependencies array to be: [props, props.fetchDashboradRecordTheaterPanel]",{"range":"1042","text":"1043"},"Update the dependencies array to be: [obj, props, props.getscreen, props.singlescreen]",{"range":"1044","text":"1045"},"Update the dependencies array to be: [props.getscreen, props.fetchmoviedata, props.singleuser, props]",{"range":"1046","text":"1047"},"Update the dependencies array to be: [obj, props, props.gettscreen, props.singletscreen]",{"range":"1048","text":"1049"},"Update the dependencies array to be: [active, props.err]",{"range":"1050","text":"1051"},{"range":"1052","text":"1051"},"Update the dependencies array to be: [obj, props, props.fetchstatedata, props.singlestate]",{"range":"1053","text":"1054"},"Update the dependencies array to be: [form, props, props.fetchstatedata]",{"range":"1055","text":"1056"},"Update the dependencies array to be: [obj, props, props.fetchcitiesdata, props.fetchstatedata, props.singlecities]",{"range":"1057","text":"1058"},"Update the dependencies array to be: [obj, props, props.fetchmoviedata, props.singlemovie]",{"range":"1059","text":"1060"},"Update the dependencies array to be: [props, props.getAllUser, props.singleuser1]",{"range":"1061","text":"1062"},"Update the dependencies array to be: [props, props.getAllTheater, props.singleuser1]",{"range":"1063","text":"1064"},{"range":"1065","text":"1034"},{"range":"1066","text":"1036"},{"range":"1067","text":"1038"},{"range":"1068","text":"1038"},{"range":"1069","text":"1041"},{"range":"1070","text":"1043"},{"range":"1071","text":"1045"},"Update the dependencies array to be: [props, props.getscreen]",{"range":"1072","text":"1073"},{"range":"1074","text":"1047"},{"range":"1075","text":"1049"},{"range":"1076","text":"1054"},{"range":"1077","text":"1051"},{"range":"1078","text":"1051"},{"range":"1079","text":"1056"},{"range":"1080","text":"1058"},{"range":"1081","text":"1062"},{"range":"1082","text":"1064"},{"range":"1083","text":"1060"},"Update the dependencies array to be: [props.singleuser1, props.fetchmoviedata, props.fetchreview, props]",{"range":"1084","text":"1085"},[846,904],"[props.location.pathname, props.autoCheckLogin, props.token, props]",[430,443],"[props.history, props.token]",[549,571],"[props, props.fetchstatedata]",[449,471],[498,526],"[props, props.fetchDashboradRecord]",[471,511],"[props, props.fetchDashboradRecordTheaterPanel]",[1206,1242],"[obj, props, props.getscreen, props.singlescreen]",[1250,1305],"[props.getscreen, props.fetchmoviedata, props.singleuser, props]",[2153,2191],"[obj, props, props.gettscreen, props.singletscreen]",[1235,1246],"[active, props.err]",[1117,1128],[1065,1105],"[obj, props, props.fetchstatedata, props.singlestate]",[1453,1475],"[form, props, props.fetchstatedata]",[1372,1436],"[obj, props, props.fetchcitiesdata, props.fetchstatedata, props.singlecities]",[2508,2548],"[obj, props, props.fetchmoviedata, props.singlemovie]",[446,482],"[props, props.getAllUser, props.singleuser1]",[452,491],"[props, props.getAllTheater, props.singleuser1]",[827,885],[417,430],[537,559],[438,460],[487,515],[461,501],[1163,1199],[1105,1122],"[props, props.getscreen]",[1198,1253],[2084,2122],[1035,1075],[1135,1146],[1076,1087],[1392,1414],[1327,1391],[435,471],[441,480],[2319,2359],[898,958],"[props.singleuser1, props.fetchmoviedata, props.fetchreview, props]"]